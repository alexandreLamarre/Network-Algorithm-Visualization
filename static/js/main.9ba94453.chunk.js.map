{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5 lazy /^/.*/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","Components/NavBar/Nav2D.js","Components/NavBar/Nav3D.js","Components/NavBar/NavCustom.js","Components/NavBar/NavBar.js","datatypes/ColorGradient/AbstractColorGradient.js","datatypes/ColorGradient/LinearColorGradient.js","datatypes/Vertex.js","datatypes/Edge.js","datatypes/ColorGradient/PolarColorGradient.js","Components/Network/Network.js","Components/Settings/AlgorithmSettingsComponent.js","Animations/Algorithms/AlgorithmSettings.js","Components/Network/NetworkSettingsComponent.js","Components/Network/NetworkSettings.js","Animations/Algorithms/AbstractNetworkAlgorithm.js","Animations/Algorithms/LayoutAlgorithms/AbstractLayoutAlgorithm.js","Components/Settings/AlgorithmList.js","Components/Settings/AlgorithmSettings.js","Components/Settings/SettingCheckbox.js","Components/Settings/SettingOption.js","Components/Settings/SettingRange.js","Components/Settings/SettingColor.js","Animations/Algorithms/AlgorithmSetting.js","datatypes/Force.js","Animations/Algorithms/LayoutAlgorithms/springEmbedding.js","Components/Network/NetworkVisualizer.js","Components/Network/NetworkVisualizer3D.js","Components/Network/NetworkCustom.js","Components/Network/Visualizer.js","Animations/Algorithms/LayoutAlgorithms/fruchtermanReingold.js","Animations/Algorithms/LayoutAlgorithms/ForceAtlas2.js","Animations/Algorithms/LayoutAlgorithms/ForceAtlasLinLog.js","datatypes/SquareMatrix.js","Animations/Algorithms/LayoutAlgorithms/Spectral.js","Animations/Algorithms/TSP/AbstractTSPAlgorithm.js","Animations/Algorithms/TSP/opt2.js","Animations/Algorithms/TSP/opt3.js","Animations/Algorithms/TSP/optAnnealing.js","Animations/Algorithms/TSP/opt3Annealing.js","Animations/Algorithms/VertexColoringAlgorithms/GreedyVertexColoring.js","Animations/Algorithms/VertexColoringAlgorithms/AbstractVertexColoringAlgorithm.js","Animations/Algorithms/EdgeColoringAlgorithms/MisraGries.js","Animations/Algorithms/EdgeColoringAlgorithms/AbstractEdgeColoringAlgorithm.js","Animations/Algorithms/MinimumSpanningTreeAlgorithms/AbstractMinimumSpanningTreeAlgorithm.js","datatypes/UnionSets.js","Animations/Algorithms/MinimumSpanningTreeAlgorithms/Kruskal.js","Animations/Algorithms/MinimumSpanningTreeAlgorithms/Prim.js","Animations/Animator.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Nav2D","style","textDecoration","to","outline","this","props","selected","icon","gridSharp","marginLeft","React","Component","Nav3D","cubeSharp","NavCustom","easelSharp","NavBar","document","body","classList","toggle","detail","checked","el","createElement","href","target","click","size","height","Math","max","parent","state","path","render","cursor","onClick","openDocumentation","logoOctocat","onIonChange","setDarkMode","color","moon","AbstractColorGradient","startColor","endColor","networkDataType","additionalInformation","hasOwnProperty","getColorGradientColor","str","startsWith","vals","split","length","i","parseInt","slice","nums","val","toString","rgb","red","green","blue","Cmax","Cmin","min","delta","lightness","calculateHue","isFinite","abs","hue","saturation","C","X","m","checkDegrees","rPrime","gPrime","bPrime","floor","start","end","t","LinearColorGradient","numColors","isValidRGB","rgbToNums","isValidHexString","hexToNums","colorGradient","push","numsToHex","newRed","lerp","newGreen","newBlue","minDegree","degree","Vertex","x","y","z","undefined","coords","v","copyVertex","vector","setX","setY","setZ","key","row","colors","replace","Edge","weight","alpha","PolarColorGradient","createColorGradient","rgbNumsToHSLNums","startHue","startSaturation","startLightness","endHue","endSaturation","endLightness","newHue","newSaturation","newLightness","HSLNumsToRGBNums","pickRandomVertex","array","random","pickFromRandomArray","removeFromArray","index","concat","removeSpecificFromArray","item","indexOf","connectRandomVertices","vertices","random1","splice","Network","settings","isThreeDimensional","edgeInitialColor","maxDegree","Infinity","createRandomNetwork","shouldUpdate","bool","shouldReset","shouldResizeVertex","shouldRecolor","scaleVertices","minSize","maxSize","gradientType","applyColorGradientVertex","applyColorGradient","assignColor","console","warn","applyColorGradientEdge","j","edges","color1","color2","numV","maxEdges","availableVertices","properties","Cycle","root","initialPath","next_node","initialRandomCycle","already_connected","Map","remainingEdges","numE","Connected","unvisited","visited","vIndex1","v1","visitedNum","vIndex2","v2","increment_degree","indexTo","indexFrom","set","random2","get","findExtremeDegrees","applyVertexSize","AlgorithmSettingsComponent","lines","name","s","AlgorithmSettings","settingObjects","setting","obj","settingsHTML","toHTML","NetworkSettingsComponent","minV","minE","maxV","maxE","activeProperty","filter","lastActive","setState","updateV","MAX_VERTICES_NUM","num","Number","updateVertexEdgeBounds","log","type","propNetwork","hidden","includes","toLowerCase","textAlign","value","onChange","setProperties","property","step","setNumVertices","setNumEdges","setScalingVertex","setMinSize","disabled","setMaxSize","setApplyColorGradient","selectGradientType","setStartColor","defaultValue","setEndColor","NetworkSettings","General","ref","AbstractNetworkAlgorithm","requiredProperty","a","network","animations","currentStep","steps","actualSteps","trimSteps","applyAnimation","n","nextSteps","adj","adj_row","AbstractLayoutAlgorithm","AlgorithmList","algorithms","animator","activeAlgorithm","width","resize","bind","w","window","innerWidth","addEventListener","removeEventListener","maxWidth","className","setOption","algorithm","algoSettings","algorithmSettings","SettingCheckbox","SettingOption","options","opt","SettingRange","parseFloat","setSettingsValue","SettingColor","AlgorithmSettingObject","validParameter","lengh","parameter","Force","distance","is3D","dist","sqrt","pow","unitVector","new_x","new_y","SpringEmbedding","forceOfAttraction","newRangeSetting","forceOfRepulsion","epsilon","forceToAreaScaling","distanceType","newOptionSetting","iterations","setRequiredProperty","K","scaling_factor","forceList","f","verticesConnected","calcs","fattract","addVector","connected","k","frepulse","iterationAnimations","maxF","minX","minY","minZ","maxX","maxY","maxZ","scale","fNorm","add","unitV","NetworkVisualizer","sorted","offsetX","offsetY","dragging","previousMouseX","previousMouseY","zoomMouseX","zoomMouseY","frameId","heightConstant","widthConstant","minheight","createRef","networkData","h","innerHeight","current","resetAnimationLogic","set3D","requestAnimationFrame","animate","cancelAnimationFrame","drawNetwork","ctx","getContext","clearRect","translate","globalAlpha","beginPath","fillStyle","arc","PI","fill","closePath","index1","index2","moveTo","lineTo","strokeStyle","applyEdgeColorGradient","stroke","edge","Array","isArray","gradient","createLinearGradient","addColorStop","preventDefault","clientX","clientY","deltaX","deltaY","new_offsetX","new_offsetY","rect","getBoundingClientRect","currentMouseX","left","currentMouseY","top","sign","mouseX","mouseY","link","download","appendChild","alert","canvas","toDataURL","removeChild","backgroundColor","onMouseLeave","setDrag","onMouseDown","onMouseUp","onMouseMove","updateCamera","onWheel","zoomCamera","title","position","class","save","saveAs","resetCamera","cameraReverse","NetworkVisualizer3D","spheres","scene","camera","renderer","controls","frameID","network3D","THREE","pointLight","setSize","aspect","OrbitControls","update","resetSceneFromData","updateScene","geometrySphere","materialSphere","sphere","linePoints","geometry","setFromPoints","edgecolors","getEdgeColors","r","g","b","setAttribute","material","vertexColors","opacity","line","attributes","needsUpdate","NetworkCustom","drawTool","startDragX","startDragY","currentDragX","currentDragY","startDragVertex","selectBox","selectedVertices","currentBufferIndex","boundingBoxes","buffer","custom","addAction","maxFrame","processDrag","drawTools","vertex","sx","startX","sy","startY","ex","endX","ey","endY","setLineDash","restore","objectSpaceToCanvasSpace","checkRemoveSelectedBox","canvasX","canvasY","createVertex","coords1","canvasSpaceToObjectSpace","coords2","cx","cy","updateSelectedCoords","removeSelectedVertices","nearbyVertexExists","createEdge","x1","x2","y1","y2","selectVerticesFromBox","clearDragging","vx","vy","box","nearbyAlreadyExists","inBox","copyBoundBoxes","bb","copyEdges","copyEdge","processDownOutcome","handleMouseMove","processDragOutcome","ellipse","analytics","expand","move","clearCanvas","refreshCircle","Visualizer","networkSettings","FruchtermanReingold","area","cTemp","tempHeuristic","temperature","initialTemperature","scalingFactor","ncalcs","iterAnimations","maxForce","origin","forceNorm","unitvector","unitForce","cool","initial","heuristic","ForceAtlas2","kr","ks","gravity","newCheckBoxSetting","kg","tau","ksmax","dissaudeHub","previousForces","currentVertices","createAnimationFrame","repulseForce","attractiveForce","attractiveForceOpp","center","centerForce","gravityForce","fgravity","sG","combinedForce","traN","directionForce","swgN","sN","distCenter","res","forEach","ForceAtlasLinLog","assert","require","SquareMatrix","array2d","container","return_vector","other","new_mat","new_row","dotProduct","getRow","getColumn","sum","GeneralizedEigenvector","dimension","A","D","Dinv","L","adjRow","degreeRow","inverseDegreeRow","laplacianRow","intermediateMat","matrixMultiply","eigenvectors","normalize","newViVector","randomVector","newVi","orthogonalize","lMultiply","dim","firstFrame","frame","newVector","reduce","u","numeratorDtimesUj","rMultiply","numerator","denominator","AbstractTSPAlgorithm","Opt2","simulations","selectedColor","newColorSetting","firstFrameAnimation","initialColors","initialAlpha","betterSolution","I","temp","B","newPath","newEdges","lastAnimationFrame","totalDist","Opt3","c","sort","values","reverseSegmentIfBetter","E","F","d0","d1","d2","d3","d4","reversedPath","reversedPathThree","new_path","Opt2Annealing","coolingHeuristic","temperatureGradient","gradientSegments","temperatureStartColor","temperatureEndColor","ACCEPTANCE","currentEdges","newDist","accepted","Opt3Annealing","GreedyVertexColoring","initialVertices","assignedColors","createAdjacencyMatrix","neighbors","getNeighbors","availableColors","getAvailableColors","newColor","updateIndex","allColors","neighbor","gradientColor","colorList","checkColorIn","MisraGries","incidentVertices","incidentColors","edgeColors","getIndex","uncoloredEdges","a1","a2","b1","b2","pop","fan","createFan","pickColor","d","invertPath","fanPrime","freeColors","getFreeColors","rotateFan","startVertex","searching","lastVertex","currentVertex","switchColors","centerVertex","isUncolored","startIndex","incidentNotStart","lastAdded","maximal","incident","takenColors","valid","curIndex","nextIndex","AbstractMinimumSpanningTreeAlgorithm","UnionSets","contents","representative","setRepresentative","getRepresentative","Kruskal","sortedEdges","e1","e2","trees","treeIndices","animationFrame","newVertices","poppedValue","Prim","vertexQueue","explored","animationFrame2","Animator","ALGORITHMS","algo","getAnimations","nextAnimationSteps","ANIMATOR","App","settingsObject","networkSettingHTML","algorithmSelectHTML","animationsInBuffer","running","invalidAlgorithm","invalidAlgorithmInfo","fps","maxTimeout","networkSettingsRef","algorithmSettingsRef","networkSettingsHTML","algorithmSettingsHTML","algorithmSettingsToHTML","algorithmsToHTML","clearTimeout","setTimeout","stepsPerformed","loading","forceUpdate","numPerformed","animationIndex","newCurrentStep","overflow","boxShadow","searchCircleOutline","setFilter","placeholder","minHeight","maxHeight","overflowY","margin","getAnimation","right","closeCircleOutline","display","justifyContent","alignItems","alignContent","performAnimationStep","playBackCircleOutline","playSkipBackCircleOutline","toggleAnimationsRunning","playCircleOutline","pauseCircleSharp","playSkipForwardCircleOutline","playForwardCircleOutline","setSpecificAnimationFrame","flexDirection","marginRight","setFPS","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+OAAA,IAAIA,EAAM,CACT,8BAA+B,CAC9B,GACA,GAED,uBAAwB,CACvB,GACA,GAED,uBAAwB,CACvB,GACA,GAED,0BAA2B,CAC1B,GACA,IAED,6BAA8B,CAC7B,GACA,IAED,0BAA2B,CAC1B,GACA,IAED,0BAA2B,CAC1B,GACA,IAED,wBAAyB,CACxB,GACA,IAED,0BAA2B,CAC1B,IACA,IAED,sBAAuB,CACtB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mCAAoC,CACnC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,yBAA0B,CACzB,IACA,GAED,8BAA+B,CAC9B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,gCAAiC,CAChC,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B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","file":"static/js/main.9ba94453.chunk.js","sourcesContent":["var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t92,\n\t\t5\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t93,\n\t\t6\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t94,\n\t\t7\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t95,\n\t\t17\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t96,\n\t\t18\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t97,\n\t\t43\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t98,\n\t\t19\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t99,\n\t\t20\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t100,\n\t\t21\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t101,\n\t\t22\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t102,\n\t\t44\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t103,\n\t\t10\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t104,\n\t\t23\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t105,\n\t\t45\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t106,\n\t\t46\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t107,\n\t\t24\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t108,\n\t\t25\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t109,\n\t\t26\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t110,\n\t\t27\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t111,\n\t\t28\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t112,\n\t\t8\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t113,\n\t\t14\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t114,\n\t\t9\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t115,\n\t\t29\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t116,\n\t\t30\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t117,\n\t\t31\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t118,\n\t\t11\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t119,\n\t\t16\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t120,\n\t\t47\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t121,\n\t\t32\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t122,\n\t\t33\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t123,\n\t\t34\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t124,\n\t\t35\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t125,\n\t\t48\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t126,\n\t\t13\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t127,\n\t\t49\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t128,\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t129,\n\t\t15\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t130,\n\t\t37\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t131,\n\t\t38\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t132,\n\t\t39\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t133,\n\t\t12\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t134,\n\t\t50\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 67;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t135,\n\t\t57\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 69;\nmodule.exports = webpackAsyncContext;","import React from \"react\"\r\nimport {IonIcon, IonItem, IonLabel} from \"@ionic/react\";\r\nimport {gridSharp} from \"ionicons/icons\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n/**\r\n * Nav Link in toolbar component for 2D network Visualizer\r\n */\r\nclass Nav2D extends React.Component{\r\n    render(){\r\n        return(\r\n            <Link style = {{textDecoration: \"none\"}} to = \"/Network-Analysis-Visualization/2d\">\r\n                <IonItem style = {{outline: this.props.selected?\"solid 2px blue\":\"none\"}}>\r\n                    <IonIcon icon = {gridSharp}/>\r\n                    <IonLabel style = {{marginLeft: \"10px\"}}> 2D </IonLabel>\r\n                </IonItem>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\nexport default Nav2D","import React from \"react\"\r\nimport {IonIcon, IonItem, IonLabel} from \"@ionic/react\";\r\nimport {cubeSharp} from \"ionicons/icons\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n/**\r\n * Nav Link in toolbar component for 3D network Visualizer\r\n */\r\nclass Nav3D extends React.Component{\r\n    render(){\r\n        return(\r\n            <Link style = {{textDecoration: \"none\"}} to = \"/Network-Analysis-Visualization/3d\">\r\n                <IonItem style = {{outline: this.props.selected?\"solid 2px blue\":\"none\"}}>\r\n                    <IonIcon icon = {cubeSharp}/>\r\n                    <IonLabel style = {{marginLeft: \"10px\"}}> 3D </IonLabel>\r\n                </IonItem>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\nexport default Nav3D","import React from \"react\"\r\nimport {IonIcon, IonItem, IonLabel} from \"@ionic/react\";\r\nimport {easelSharp} from \"ionicons/icons\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n/**\r\n * Nav Link in toolbar component for creating custom Networks\r\n */\r\nclass NavCustom extends React.Component{\r\n    render(){\r\n        return(\r\n            <Link style = {{textDecoration: \"none\"}} to = \"/Network-Analysis-Visualization/custom\">\r\n                <IonItem style = {{outline: this.props.selected?\"solid 2px blue\":\"none\"}}>\r\n                    <IonIcon icon = {easelSharp}/>\r\n                    <IonLabel style = {{marginLeft: \"10px\"}}> Custom </IonLabel>\r\n                </IonItem>\r\n            </Link>\r\n        )\r\n    }\r\n}\r\nexport default NavCustom","import React from \"react\";\r\n\r\nimport {IonRow, IonCol, IonItem, IonLabel, IonIcon, IonToggle} from \"@ionic/react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport {Nav2D, Nav3D, NavCustom} from \"./index\";\r\nimport {logoOctocat, moon} from \"ionicons/icons\";\r\n\r\n\r\nimport \"./darkmode.css\";\r\n\r\n\r\n\r\nclass NavBar extends React.Component{\r\n\r\n    /**\r\n     * Toggles the ionic color theme between light and dark\r\n     * @param e toggle event\r\n     */\r\n    setDarkMode(e){\r\n        document.body.classList.toggle('dark', e.detail.checked)\r\n    }\r\n\r\n    /**\r\n     * Creates a proxy a tag to click to redirect in a new tab to the documentation of the project\r\n     */\r\n    openDocumentation(){\r\n        const el = document.createElement(\"a\");\r\n        el.href = \"https://github.com/alexandreLamarre/Network-Analysis-Visualization\"\r\n        el.target = \"_blank\"\r\n        el.click();\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <IonRow size = \"1\" id = \"toolbar\" style = {{height: Math.max(this.props.parent.state.height/10, 50)}}>\r\n                <IonCol size = \"3\">\r\n                    <Route path = \"/Network-Analysis-Visualization/2d\" render = {() => <Nav2D selected = {true}/>}/>\r\n                    <Route path = \"/Network-Analysis-Visualization/3d\" render = {() => <Nav2D selected = {false}/>}/>\r\n                    <Route path = \"/Network-Analysis-Visualization/custom\" render = {() => <Nav2D selected = {false}/>}/>\r\n\r\n                </IonCol>\r\n                <IonCol size = \"3\">\r\n                    <Route path = \"/Network-Analysis-Visualization/2d\" render = {() => <Nav3D selected = {false}/>}/>\r\n                    <Route path = \"/Network-Analysis-Visualization/3d\" render = {() => <Nav3D selected = {true}/>}/>\r\n                    <Route path = \"/Network-Analysis-Visualization/custom\" render = {() => <Nav3D selected = {false}/>}/>\r\n\r\n                </IonCol>\r\n                <IonCol size = \"3\">\r\n                    <Route path = \"/Network-Analysis-Visualization/2d\" render = {() => <NavCustom selected = {false}/>}/>\r\n                    <Route path = \"/Network-Analysis-Visualization/3d\" render = {() => <NavCustom selected = {false}/>}/>\r\n                    <Route path = \"/Network-Analysis-Visualization/custom\" render = {() => <NavCustom selected = {true}/>}/>\r\n                </IonCol>\r\n                <IonCol size = \"3\" >\r\n                    <IonItem  >\r\n                        <IonIcon style = {{cursor: \"pointer\"}}\r\n                                 onClick = {() => this.openDocumentation()} icon={ logoOctocat}/>\r\n                        <IonLabel style = {{cursor: \"pointer\",marginLeft: \"5%\"}}\r\n                                  onClick = {() => this.openDocumentation()}>\r\n                            Documentation </IonLabel>\r\n                        <IonToggle onIonChange = {(e) => this.setDarkMode(e)}/>\r\n                        <IonIcon color = \"moon\" icon = {moon}/>\r\n                    </IonItem>\r\n                </IonCol>\r\n            </IonRow>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","class AbstractColorGradient{\r\n    constructor(startColor, endColor){\r\n       this.startColor = startColor;\r\n       this.endColor = endColor;\r\n    }\r\n\r\n    /**\r\n     * Sets color for a given networkDataType based on the defined gradient algorithm\r\n     * @param networkDataType , the networkDataType whose color we want to set\r\n     * @param additionalInformation data that contains additial information needed for the gradient\r\n     */\r\n    assignColor(networkDataType, additionalInformation){\r\n        if(!networkDataType.hasOwnProperty(\"color\")) throw new Error(\"Cannot assign a color to a type an \" +\r\n                                                                        \"object without a color property\")\r\n        const color = this.getColorGradientColor(networkDataType, additionalInformation)\r\n        networkDataType.color = color\r\n    }\r\n\r\n    /**\r\n     *  Gets the color for a given networkDataType\r\n     * @param networkDataType the networkDataType whose color we want to set\r\n     */\r\n    getColorGradientColor(networkDataType, additionalInformation){\r\n        throw new Error(\"Cannot get color of an abstract gradient\")\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if the provided string is a valid rgb color string\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    isValidRGB(str){\r\n        if(!str.startsWith(\"rgb\")) return false\r\n        var vals = str.split(\"(\")[1].split(\")\")[0];\r\n        vals = vals.split(\",\")\r\n\r\n        return vals.length === 3\r\n    }\r\n\r\n    /**\r\n     * Checks if the provided string is a valid hex color string\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    isValidHexString(str){\r\n        if(!str.startsWith(\"#\")) return false\r\n\r\n        return str.length === 7\r\n    }\r\n\r\n    /**\r\n     * Turns an rgb color string to an array of rgb nums. Assums rgb string is valid.\r\n     * @param str the rgb color string\r\n     * @returns {number[]} rgb nums array\r\n     */\r\n    rgbToNums(str){\r\n        var vals = str.split(\"(\")[1].split(\")\")[0];\r\n        vals = vals.split(\",\")\r\n        for(let i = 0; i < vals.length; i++){\r\n            vals[i] = parseInt(vals[i])\r\n        }\r\n        return vals\r\n    }\r\n\r\n    /**\r\n     * Converts a hex color string to an array of rgb values. Assumes hex string is valid.\r\n     * @param str the hex string to convert\r\n     * @returns {number[]} the rgb number values of the hex string\r\n     */\r\n    hexToNums(str){\r\n        var vals = str.slice(1);\r\n        var num1 = parseInt(vals.slice(0,2),16)\r\n        var num2 = parseInt(vals.slice(2,4), 16)\r\n        var num3 = parseInt(vals.slice(4,6), 16)\r\n        return [num1, num2, num3]\r\n    }\r\n\r\n    /**\r\n     * Turns rgb numbers into color hex string. Assumes rgb numbers are valid.\r\n     * @param nums [3]float rgb numbers\r\n     * @returns {string} the hex color string of nums\r\n     */\r\n    numsToHex(nums){\r\n        var val = \"#\"\r\n        for(let i = 0; i < nums.length; i++){\r\n            nums[i] = nums[i].toString(16)\r\n            if(nums[i].length === 1) nums[i] = \"0\" + nums[i]\r\n            val += nums[i]\r\n        }\r\n        return val\r\n    }\r\n\r\n    /**\r\n     * Turns an array of rgb values to an array of HSL values. Assumes the rgb array is valid.\r\n     * @param rgb array of rgb values\r\n     * @returns {number[]} the array of HSL values [hue, saturation, lightness]\r\n     */\r\n    rgbNumsToHSLNums(rgb){\r\n        const red = rgb[0]/255;\r\n        const green = rgb[1]/255;\r\n        const blue = rgb[2]/255;\r\n        const Cmax = Math.max(...[red, green, blue]);\r\n        const Cmin = Math.min(...[red,green,blue]);\r\n        const delta = Cmax - Cmin;\r\n        const hue = this.calculateHue(delta, Cmax, red, green, blue) % 360\r\n        const lightness = (Cmax + Cmin)/2;\r\n        const saturation = delta === 0 || typeof delta !== \"number\" || !isFinite(delta) ? 0:\r\n            delta/(1 -Math.abs(2*lightness -1));\r\n        return [hue, saturation, lightness];\r\n    }\r\n\r\n    /**\r\n     * Helper function for rgbNumsToHSLNums\r\n     * Returns the hue of a color given a delta and cmax and the respective red,green, blue values of the color\r\n     * @param delta\r\n     * @param Cmax\r\n     * @param red\r\n     * @param green\r\n     * @param blue\r\n     * @returns {number} the hue of the color\r\n     */\r\n    calculateHue(delta, Cmax, red, green, blue){\r\n        if(delta === 0 || typeof delta !== \"number\" || !isFinite(delta)) return 0;\r\n        if(Cmax === red) return 60*(((green-blue)/delta)%6);\r\n        if(Cmax === green) return 60*((blue-red)/delta+2);\r\n        if(Cmax === blue) return 60*((red- green)/delta + 4);\r\n    }\r\n\r\n    /**\r\n     * converts HSL color number values to RGB number values\r\n     * @param hue\r\n     * @param saturation\r\n     * @param lightness\r\n     * @returns {number[]} the rgb array of number values\r\n     */\r\n    HSLNumsToRGBNums(hue, saturation, lightness){\r\n        const C = (1 - Math.abs(2*lightness -1)) * saturation;\r\n        const X = C * (1 - Math.abs(hue/60)%2 -1);\r\n        const m = lightness - C/2;\r\n        const [rPrime, gPrime, bPrime] = this.checkDegrees(hue, C, X)\r\n\r\n        return [Math.abs(Math.floor(((rPrime +m) * 255) % 256)),\r\n                Math.abs(Math.floor(((gPrime + m)*255)%256)),\r\n                Math.abs(Math.floor(((bPrime +m)*255)%256))];\r\n    }\r\n\r\n    /**\r\n     * helper for HSLNumsToRGBNUms, maps the polar coordinates back to rgb cube coordinates\r\n     * @param hue\r\n     * @param C\r\n     * @param X\r\n     * @returns {number[]} the rgb array of values\r\n     */\r\n    checkDegrees(hue, C, X){\r\n        if((hue >= 0 && hue < 60) || hue === 360) return [C,X,0];\r\n        if(hue >= 60 && hue < 120 ) return [X,C,0];\r\n        if(hue >= 120 && hue < 180 ) return [0, C, X];\r\n        if(hue >= 180 && hue < 240 ) return [0, X, C];\r\n        if(hue >= 240 && hue < 300 ) return [X, 0, C];\r\n        if(hue >= 300 && hue < 360 ) return [C, 0, X];\r\n        return [0,0,0];\r\n    }\r\n\r\n    /**\r\n     * Linear interpolation of two values\r\n     * @param start the start value of the linear function\r\n     * @param  end the end value of the linear function\r\n     * @param t the position between start value and end value\r\n     * @ return newValue the value between start and end at position t\r\n     */\r\n    lerp(start, end, t){\r\n        return start + t*(end -start)\r\n    }\r\n\r\n}\r\n\r\nexport default AbstractColorGradient","import AbstractColorGradient from \"./AbstractColorGradient\";\r\n\r\nclass LinearColorGradient extends AbstractColorGradient{\r\n    constructor(startColor, endColor, numColors){\r\n        super(startColor, endColor)\r\n        this.numColors = numColors\r\n        if(startColor === endColor) this.numColors = 1\r\n\r\n        if(this.isValidRGB(startColor)){\r\n            startColor = this.rgbToNums(startColor)\r\n        } else if(this.isValidHexString(startColor)){\r\n            startColor = this.hexToNums(startColor)\r\n        } else{\r\n            throw new Error(\"Cannot recognize start color: neither hex nor rgb\")\r\n        }\r\n\r\n        if(this.isValidRGB(endColor)){\r\n            endColor = this.rgbToNums(endColor)\r\n        } else if(this.isValidHexString(endColor)){\r\n            endColor = this.hexToNums(endColor)\r\n        } else{\r\n            throw new Error(\"Cannot recognize start color: neither hex nor rgb\")\r\n        }\r\n\r\n        this.colorGradient = []\r\n        if(this.numColors === 1) {\r\n            this.colorGradient.push(this.numsToHex(startColor))\r\n        } else{\r\n            for(let i = 0; i < numColors; i ++){\r\n                const t = i/(numColors-1)\r\n                const newRed = parseInt(this.lerp(startColor[0], endColor[0], t))\r\n                const newGreen = parseInt(this.lerp(startColor[1], endColor[1], t))\r\n                const newBlue = parseInt(this.lerp(startColor[2], endColor[2], t));\r\n                this.colorGradient.push(this.numsToHex([newRed,newGreen, newBlue]))\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *  Gets the color for a given networkDataType and applies a linear gradient along start color to end color\r\n     *  given its degree and its relative distance from minRange/maxRange\r\n     * @param networkDataType the networkDataType whose color we want to set\r\n     * @param minDegree the minimum degree of the network\r\n     */\r\n    getColorGradientColor(networkDataType, minDegree){\r\n        if(this.colorGradient.length === 1){\r\n            return this.colorGradient[0]\r\n        } else{\r\n            const degree = networkDataType.degree\r\n            if(degree -minDegree > this.numColors) throw new Error(\"Not enough colors to use for degree \", degree)\r\n            return this.colorGradient[degree -minDegree];\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default LinearColorGradient;","class Vertex {\r\n  constructor(x, y, z){\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    if(this.z === undefined) this.z = null;\r\n    this.degree = 0;\r\n    this.size = 3;\r\n    this.color = \"rgb(0,255,255)\";\r\n  }\r\n\r\n  /**\r\n   * Returns a copied vertex that has the coords object added to it\r\n   * @param coords an object with x,y,z property are numbers\r\n   */\r\n  add(coords){\r\n    if(!coords.hasOwnProperty(\"x\"))throw new Error(\"coords argument must have an 'x' property to add it to a vertex\")\r\n    if(!coords.hasOwnProperty(\"y\")) throw new Error(\"coords argument must have an 'y' property to add it to a vertex\")\r\n    if(!coords.hasOwnProperty(\"z\")) throw new Error(\"coords argument must have a 'z' property to add it to a vertex\")\r\n    const v = this.copyVertex()\r\n    v.x += coords.x\r\n    v.y += coords.y\r\n    if(v.z !== null && coords.z !== null) v.z += coords.z\r\n    return v\r\n  }\r\n\r\n\r\n\r\n  setX(x){\r\n    this.x = x;\r\n  }\r\n\r\n  setY(y){\r\n    this.y = y;\r\n  }\r\n\r\n  setZ(z){\r\n    this.z = z;\r\n  }\r\n\r\n  increment_degree(){\r\n    this.degree += 1;\r\n  }\r\n\r\n  setSize(size){\r\n    this.size = size;\r\n  }\r\n\r\n  setColor(color){\r\n    this.color = color;\r\n  }\r\n\r\n  setVector(vector){\r\n    this.setX(vector[0]);\r\n    this.setY(vector[1]);\r\n    if(vector[2] !== undefined && this.z !== null){\r\n      this.setZ(vector[2]);\r\n    }\r\n  }\r\n\r\n  copyVertex(){\r\n    const v = new Vertex(this.x, this.y, this.z);\r\n    for(const key in this){\r\n      if(this.hasOwnProperty(key)){\r\n        v[key] = this[key]\r\n      }\r\n    }\r\n    return v;\r\n  }\r\n\r\n\r\n\r\n  toCSV(){\r\n    var row = \"vertex,\";\r\n    row += this.x.toString()+\",\";\r\n    row += this.y.toString()+\",\";\r\n    if(this.z === null) row += \" ,\";\r\n    else{ row += this.z.toString()+\",\"};\r\n    row += this.degree.toString() + \",\";\r\n    row+= this.size.toString() + \",\";\r\n    const color = this.color;\r\n    const colors = color.split(\",\")\r\n    colors[0] = colors[0].replace(\"rgb\", \"\");\r\n    colors[0] = colors[0].replace(\"(\", \"\");\r\n    colors[2] = colors[2].replace(\")\", \"\");\r\n    row += colors[0] +\",\";\r\n    row += colors[1] + \",\";\r\n    row += colors[2] + \"\\n\";\r\n    return row;\r\n  }\r\n}\r\n\r\nexport default Vertex;\r\n","class Edge{\r\n  /*\r\n  Colors are in rgba format\r\n  */\r\n  constructor(start, end, color, weight){\r\n    this.start = start;\r\n    this.end = end;\r\n    this.weight = weight;\r\n    if(this.weight === undefined || this.weight === null) this.weight = 1;\r\n    this.color = color;\r\n    if(this.color === undefined || color ===null) this.color = \"rgb(0,0,0)\";\r\n    this.alpha = 0.1;\r\n  }\r\n\r\n  setColor(color){\r\n    this.color = color;\r\n  }\r\n\r\n  setAlpha(alpha){\r\n    this.alpha = alpha;\r\n  }\r\n\r\n  copyEdge(){\r\n    const e = new Edge(this.start, this.end);\r\n    for(const key in this){\r\n      if(this.hasOwnProperty(key)){\r\n        e[key] = this[key]\r\n      }\r\n    }\r\n    return e;\r\n  }\r\n\r\n  toCSV(){\r\n    var row = \"edge,\";\r\n    row += this.start.toString() +\",\";\r\n    row += this.end.toString() + \",\";\r\n    row += this.weight.toString() +\",\";\r\n    row += this.alpha.toString() + \",\";\r\n    const color = this.color;\r\n    const colors = color.split(\",\")\r\n    colors[0] = colors[0].replace(\"rgb\", \"\");\r\n    colors[0] = colors[0].replace(\"(\", \"\");\r\n    colors[2] = colors[2].replace(\")\", \"\");\r\n    row += colors[0] +\",\";\r\n    row += colors[1] + \",\";\r\n    row += colors[2] + \"\\n\";\r\n    return row;\r\n  }\r\n}\r\n\r\nexport default Edge;\r\n","import AbstractColorGradient from \"./AbstractColorGradient\";\r\n\r\nclass PolarColorGradient extends AbstractColorGradient{\r\n    constructor(startColor, endColor, numColors) {\r\n        super(startColor, endColor)\r\n        this.numColors = numColors\r\n        this.colorGradient = [];\r\n\r\n        //parse input colors\r\n        if(this.isValidRGB(startColor)){\r\n            startColor = this.rgbToNums(startColor)\r\n        } else if(this.isValidHexString(startColor)){\r\n            startColor = this.hexToNums(startColor)\r\n        } else{\r\n            throw new Error(\"Cannot recognize start color: neither hex nor rgb\")\r\n        }\r\n\r\n        if(this.isValidRGB(endColor)){\r\n            endColor = this.rgbToNums(endColor)\r\n        } else if(this.isValidHexString(endColor)){\r\n            endColor = this.hexToNums(endColor)\r\n        } else{\r\n            throw new Error(\"Cannot recognize start color: neither hex nor rgb\")\r\n        }\r\n\r\n        if(this.numColors === 1) {\r\n            this.colorGradient = [this.numsToHex(startColor)]\r\n        } else{\r\n            this.createColorGradient(startColor, endColor)\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Gets the color for a given networkDataType and applies a linear gradient along start color to end color\r\n     *  given its degree and its relative distance from minRange/maxRange\r\n     * @param networkDataType the networkDataType whose color we want to set\r\n     * @param minDegree the minimum degree of the network\r\n     */\r\n    getColorGradientColor(networkDataType, minDegree){\r\n        if(this.colorGradient.length === 1){\r\n            return this.colorGradient[0]\r\n        } else{\r\n            const degree = networkDataType.degree\r\n            if(degree -minDegree > this.numColors) throw new Error(\"Not enough colors to use for degree \", degree)\r\n            return this.colorGradient[degree -minDegree];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * constructor method for generating the color gradient. requires this.numColors > 1\r\n     * @param startColor\r\n     * @param endColor\r\n     */\r\n    createColorGradient(startColor, endColor){\r\n        var [startHue, startSaturation, startLightness] = this.rgbNumsToHSLNums(startColor)\r\n        var [endHue, endSaturation, endLightness] = this.rgbNumsToHSLNums(endColor)\r\n        for(let i = 0; i < this.numColors; i++){\r\n            const t = i/(this.numColors-1); //we have already assumed by calling this\r\n            const newHue = this.lerp(startHue, endHue, t)\r\n            const newSaturation = this.lerp(startSaturation, endSaturation, t)\r\n            const newLightness = this.lerp(startLightness, endLightness, t)\r\n            const rgb = this.HSLNumsToRGBNums(newHue, newSaturation, newLightness);\r\n            this.colorGradient.push(this.numsToHex(rgb))\r\n        }\r\n\r\n        if(this.colorGradient.length !== this.numColors) {\r\n            throw new Error(\"Did not generate the correct amount of colors\", this.colorGradient.length, \"versus\", this.numColors);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default PolarColorGradient;","import LinearColorGradient from \"../../datatypes/ColorGradient/LinearColorGradient\";\r\nimport Vertex from \"../../datatypes/Vertex\";\r\nimport Edge from \"../../datatypes/Edge\";\r\nimport PolarColorGradient from \"../../datatypes/ColorGradient/PolarColorGradient\";\r\n/**\r\n * Network is a class that handles the implementation of a network:\r\n *   - network settings\r\n *      - network generation\r\n *      - network properties\r\n *   - network data\r\n */\r\n\r\nclass Network{\r\n    /**\r\n     * Make a new network datatype to be shared by App and all its descendants,\r\n     * without having to be tied to an asynchronous react state\r\n     * @param settings NetworkSettings object provided by app when it is mounted\r\n     * @param isThreeDimensional boolean indicating whether the data should be 2D (false) or 3D (true)\r\n     */\r\n    constructor(settings, isThreeDimensional){\r\n        this.isThreeDimensional = isThreeDimensional\r\n        this.settings = settings\r\n\r\n        this.edgeInitialColor = \"rgb(41,150,150)\" // only for 3D edges, or when color gradient is selected for network\r\n        this.maxDegree = -Infinity\r\n        this.minDegree = Infinity\r\n        this.createRandomNetwork()\r\n        this.shouldUpdate = false //this attribute handles whether or not a change to the loaded network attributes\r\n                                // should result in a redraw for 3D networks (only used to improve performance)\r\n\r\n    }\r\n\r\n    set3D(bool){\r\n        this.isThreeDimensional = bool\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not a new random network should be assigned\r\n     */\r\n    shouldReset(){\r\n        return this.settings.shouldReset\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns whether or not a network should resize its vertices based on user input change\r\n     */\r\n    shouldResizeVertex(){\r\n        return this.settings.shouldResizeVertex;\r\n    }\r\n\r\n    shouldRecolor(){\r\n        return this.settings.shouldRecolor;\r\n    }\r\n\r\n    /**\r\n     * Applies the vertex size settings to the network\r\n     */\r\n    applyVertexSize(){\r\n        if(this.settings.scaleVertices){\r\n            const minSize = this.settings.minSize\r\n            const maxSize = this.settings.maxSize\r\n            for(let i = 0; i < this.vertices.length; i++){\r\n                const v = this.vertices[i];\r\n                v.size =  Math.floor(\r\n                    ((v.degree - this.minDegree)/(this.maxDegree -this.minDegree))\r\n                    * (maxSize - minSize)) + minSize\r\n            }\r\n        }else {\r\n            for(let i = 0; i < this.vertices.length; i++){\r\n                this.vertices[i].size = 3;\r\n            }\r\n        }\r\n        this.settings.shouldResizeVertex = false\r\n    }\r\n\r\n    /**\r\n     * Applies the color gradient from settings to the network\r\n     */\r\n    applyColorGradient(){\r\n        //define color gradient for use by both vertices and edges\r\n\r\n        const colorGradient =  this.settings.gradientType === \"Linear\"? new LinearColorGradient(\r\n            this.settings.startColor, this.settings.endColor, this.maxDegree - this.minDegree + 1) :\r\n            new PolarColorGradient(this.settings.startColor, this.settings.endColor, this.maxDegree - this.minDegree + 1)\r\n\r\n        if(this.settings.applyColorGradientVertex && this.settings.applyColorGradient){\r\n            for(let i = 0; i < this.vertices.length; i++){\r\n                colorGradient.assignColor(this.vertices[i], this.minDegree)\r\n                if(this.vertices[i].color === undefined){ console.warn(\"Color gradient could not apply color to vertex\", this.vertices[i])}\r\n            }\r\n        } else{//default vertex color\r\n            for(let i = 0; i < this.vertices.length; i++){\r\n                this.vertices[i].color = \"rgb(0,255,255)\"\r\n            }\r\n        }\r\n        if(this.settings.applyColorGradientEdge && this.settings.applyColorGradient){\r\n            //TODO : refactor edges to use multiple colors\r\n            //do nothing for now\r\n            for(let j = 0; j < this.edges.length; j++){\r\n                const v = this.vertices;\r\n                const e = this.edges[j]\r\n                const color1 = colorGradient.getColorGradientColor(v[e.start], this.minDegree)\r\n                const color2 = colorGradient.getColorGradientColor(v[e.end], this.minDegree)\r\n                this.edges[j].color = [color1, color2]\r\n                this.edges[j].alpha = 0.5\r\n            }\r\n\r\n        } else{ //default edge colors\r\n            for(let j = 0; j < this.edges.length; j++){\r\n                this.edges[j].alpha = 0.1\r\n                if(this.isThreeDimensional){\r\n                    this.edges[j].color = this.edgeInitialColor;\r\n                } else{\r\n                    this.edges[j].color = \"rgb(0,0,0)\"\r\n                }\r\n            }\r\n        }\r\n        this.settings.shouldRecolor = false\r\n    }\r\n\r\n    /**\r\n     * Find extreme degrees, calculates the max and min vertex degrees of the network for reuse later.\r\n     * requires network defined vertices (this.vertices)\r\n     */\r\n    findExtremeDegrees(){\r\n        this.maxDegree = -Infinity\r\n        this.minDegree = Infinity\r\n        for(let i = 0; i < this.vertices.length; i ++){\r\n            this.maxDegree = Math.max(this.maxDegree, this.vertices[i].degree)\r\n            this.minDegree = Math.min(this.minDegree, this.vertices[i].degree)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a random network with 2/3 dimensional vertices and edges with position values between 0 and 1\r\n     * based on the network settings currently assigned to this network\r\n     */\r\n    createRandomNetwork(){\r\n        const maxDegree = this.settings.numV - 1\r\n        var maxEdges = Math.floor(maxDegree*this.settings.numV/2)\r\n        const vertices = []\r\n        let availableVertices = [] //used for determining edge assignment\r\n        //create random points from 0 to 1\r\n        for(let i = 0; i < this.settings.numV; i++){\r\n            if (this.isThreeDimensional){\r\n                vertices.push(new Vertex(Math.random(), Math.random(), Math.random()))\r\n            } else{\r\n               vertices.push(new Vertex(Math.random(), Math.random()))\r\n            }\r\n            availableVertices.push(i)\r\n        }\r\n\r\n\r\n        const edges = []\r\n        if (!this.settings.properties.Cycle){\r\n            let already_connected = new Map();\r\n            let remainingEdges = this.settings.numE;\r\n\r\n            if (this.settings.properties.Connected){\r\n                //connect the network before assigning remaining edges\r\n                let unvisited = []\r\n                for(let i = 0; i < this.settings.numV; i++){\r\n                    unvisited.push(i)\r\n                }\r\n                let visited = []\r\n                var vIndex1 = pickRandomVertex(unvisited)\r\n                var v1 = unvisited[vIndex1]\r\n                visited.push(v1)\r\n                unvisited = removeFromArray(unvisited, vIndex1)\r\n                var visitedNum = 1;\r\n                while(visitedNum < this.settings.numV) {\r\n                    var vIndex2 = pickRandomVertex(unvisited)\r\n                    var v2 = unvisited[vIndex2]\r\n                    visited.push(v2)\r\n                    edges.push(new Edge(v1, v2))\r\n                    if (this.isThreeDimensional) edges[edges.length - 1].color = this.edgeInitialColor\r\n                    vertices[v1].increment_degree()\r\n                    vertices[v2].increment_degree()\r\n                    remainingEdges--;\r\n                    maxEdges--;\r\n                    const indexTo = v1 + 1000 * v2 //works as long as numV < 1000\r\n                    const indexFrom = v2 + 1000 * v1;\r\n                    already_connected.set(indexTo, true)\r\n                    already_connected.set(indexFrom, true)\r\n                    unvisited = removeFromArray(unvisited, vIndex2)\r\n                    vIndex1 = pickRandomVertex(visited)\r\n                    v1 = visited[vIndex1]\r\n                    visitedNum++\r\n                }\r\n            }\r\n\r\n            // assign remaining edges to network\r\n            while(remainingEdges > 0 && maxEdges > 0 && availableVertices.length > 1){\r\n                const [random1, random2] = connectRandomVertices(availableVertices.slice())\r\n                if(random1 === random2) throw new Error(\"Randomly selected values in network generation were the same\")\r\n                if(random1 === undefined) throw new Error(\"Randomly selected value 1 in network generation was undefined \")\r\n                if(random2 === undefined) throw new Error(\"Randomly selected value 2 in network generation was undefined \")\r\n                const indexTo = random1+1000*random2; // as long as numV < 1000 this works\r\n                const indexFrom = random2+1000*random1;\r\n                if(already_connected.get(indexTo) === undefined ){\r\n                    edges.push(new Edge(random1, random2));\r\n                    if (this.isThreeDimensional){\r\n                        edges[edges.length-1].color = this.edgeInitialColor\r\n                    }\r\n                    vertices[random1].increment_degree();\r\n                    vertices[random2].increment_degree();\r\n                    if(vertices[random1].degree > maxDegree) availableVertices.splice(random1, 1);\r\n                    if(vertices[random2].degree > maxDegree) availableVertices.splice(random2, 1);\r\n                    already_connected.set(indexTo, true);\r\n                    already_connected.set(indexFrom, true);\r\n                    remainingEdges --;\r\n                    maxEdges --;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            var [path, root] = initialRandomCycle(vertices);\r\n            for(let i = 0; i < path.length -1; i++){\r\n                const e = new Edge(path[i], path[i+1])\r\n                if (this.isThreeDimensional) e.color = this.edgeInitialColor\r\n                edges.push(e)\r\n            }\r\n\r\n            for(let i = 0; i < vertices.length; i++){\r\n                vertices[i].degree = 2\r\n            }\r\n        }\r\n\r\n        this.settings.shouldReset = false\r\n        this.vertices = vertices\r\n        this.edges = edges\r\n        this.findExtremeDegrees()\r\n        this.applyVertexSize()\r\n        this.applyColorGradient()\r\n    }\r\n}\r\n\r\n//helpers\r\n/**\r\n * Returns a valid index of an array, used for picking vertex indices at random\r\n * @param array the array to measure\r\n * @returns {number} the random index\r\n */\r\nfunction pickRandomVertex(array){\r\n    return Math.floor(Math.random()*array.length)\r\n}\r\n\r\n/**\r\n * picks a random element from an array\r\n * @param array the array we want to get a random element from\r\n * @returns {*} a random element of array\r\n */\r\nfunction pickFromRandomArray(array){\r\n    return array[Math.floor(Math.random()*array.length)];\r\n}\r\n\r\n/**\r\n * removes the element at specified index in the array\r\n * @param array the array we want to remove from\r\n * @param index the index we want to remove\r\n * @returns {*} the array resulting from removal of item at index index\r\n */\r\nfunction removeFromArray(array, index){\r\n    return array.slice(0, index).concat(array.slice(index+1))\r\n}\r\n\r\n/**\r\n * removes the specified item in the array\r\n * @param array the array we want to remove from\r\n * @param item the item we want to remove\r\n * @returns {*} the array with item item removed\r\n */\r\nfunction removeSpecificFromArray(array, item){\r\n    var index = array.indexOf(item)\r\n    return array.slice(0, index).concat(array.slice(index+ 1))\r\n}\r\n\r\n/**\r\n * Constructs a random hamiltionian path from a set of vertices\r\n * @param vertices the vertices of the network\r\n * @returns {([]|*|number)[]} the initial path / root of the the path\r\n */\r\nfunction initialRandomCycle(vertices){\r\n    var root = 0;\r\n    var initialPath = []\r\n    //construct adjacency matrix\r\n    const adj = []\r\n    var availableVertices = [];\r\n    for(let i = 0; i < vertices.length; i++){\r\n        availableVertices.push(i);\r\n    }\r\n    root = pickFromRandomArray(availableVertices);\r\n    availableVertices = removeSpecificFromArray(availableVertices, root);\r\n\r\n    initialPath.push(root);\r\n    for(let i = 0; i < vertices.length -1; i++){\r\n        const next_node = pickFromRandomArray(availableVertices);\r\n        availableVertices = removeSpecificFromArray(availableVertices, next_node);\r\n        initialPath.push(next_node);\r\n    }\r\n    initialPath.push(root);\r\n    return [initialPath, root];\r\n}\r\n\r\n\r\nfunction connectRandomVertices(vertices){\r\n    var random1 = vertices[Math.floor(Math.random()*vertices.length)];\r\n    vertices.splice(random1,1);\r\n    var random2 = vertices[Math.floor(Math.random()*vertices.length)];\r\n    return [random1, random2];\r\n}\r\n\r\nexport default Network","import React from \"react\"\r\nimport {IonItem, IonLabel} from \"@ionic/react\"\r\n\r\nclass AlgorithmSettingsComponent extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        let settings = this.props.settings\r\n        return (\r\n            <div>\r\n                <IonItem lines = \"full\" color = \"dark\"\r\n                         style = {{outline: \"1px solid black\"}}>\r\n                    <p>\r\n                        <b>{this.props.name}</b>\r\n                    </p>\r\n\r\n                </IonItem >\r\n                    {settings.map((s, index) => (\r\n                        s\r\n                    ))}\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AlgorithmSettingsComponent","import React from \"react\"\r\nimport {IonItem, IonLabel} from \"@ionic/react\"\r\nimport AlgorithmSettingsComponent from \"../../Components/Settings/AlgorithmSettingsComponent\";\r\n/**\r\n * Settings class handles a container of Setting class\r\n */\r\nclass AlgorithmSettings{\r\n    constructor(name){\r\n        this.name = name + \" Settings\"\r\n        this.settings = []\r\n    }\r\n\r\n    /**\r\n     * Adds Setting objects to Settings\r\n     * @param settingObjects Array of Setting objects to be added to the current settings\r\n     */\r\n    push(settingObjects){\r\n        //Two Setting objects in the same Settings Object should never have the same name\r\n        for(let j = 0; j < settingObjects.length; j++){\r\n            const setting = settingObjects[j]\r\n            for (let i = 0; i < this.settings.length; i++){\r\n                if (this.settings[i].obj.name === setting.obj.name){\r\n                    throw new Error(\"Duplicate name settings are not allowed in the same Settings Object\")\r\n                }\r\n            }\r\n            this.settings.push(setting)\r\n        }\r\n\r\n    }\r\n\r\n    toHTML(index){\r\n        const settingsHTML = []\r\n        for(let i = 0; i < this.settings.length; i++){\r\n            settingsHTML.push(this.settings[i].toHTML(i))\r\n        }\r\n        return (\r\n            <AlgorithmSettingsComponent\r\n                key = {index}\r\n                name = {this.name}\r\n                settings = {settingsHTML}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default AlgorithmSettings","import React from \"react\"\r\nimport {IonItem, IonLabel, IonRange, IonCheckbox} from \"@ionic/react\";\r\n\r\nvar MIN_VERTICES_NUM = 4\r\nvar MAX_VERTICES_NUM = 200\r\nvar MIN_EDGES_NUM = 3\r\nvar MAX_EDGES_NUM = 600\r\nvar MAX_VERTEX_SIZE = 12\r\n\r\n/**\r\n * Network Settings Component is the react component that represents & controls\r\n * settings specific to the network.\r\n * Every time you update a state value. you must also update the settings prop values\r\n * for it to correctly work with the network data structure\r\n */\r\nclass NetworkSettingsComponent extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            minV: MIN_VERTICES_NUM,\r\n            minE : MIN_EDGES_NUM,\r\n            maxV : MAX_VERTICES_NUM,\r\n            maxE : Math.min(\r\n                Math.floor(this.props.settings.numV*(this.props.settings.numV -1)/2), MAX_EDGES_NUM),\r\n            numV: this.props.settings.numV,\r\n            numE: this.props.settings.numE,\r\n            scaleVertices: this.props.settings.scaleVertices,\r\n            minSize : this.props.settings.minSize,\r\n            maxSize : this.props.settings.maxSize,\r\n            gradientType: this.props.settings.gradientType,\r\n            applyColorGradient : this.props.settings.applyColorGradient,\r\n            applyColorGradientVertex: this.props.settings.applyColorGradientVertex,\r\n            applyColorGradientEdge : this.props.settings.applyColorGradientEdge,\r\n            startColor: this.props.settings.startColor,\r\n            endColor : this.props.settings.endColor,\r\n            properties : null,\r\n            activeProperty: \"General\",\r\n            filter: \"\"\r\n        }\r\n        this.settings = this.props.settings\r\n    }\r\n\r\n    componentDidMount() {\r\n        //we need to parse the properties 'List' into an array so it is mappable\r\n        const properties = [];\r\n        //here we set the default network type to General in case something\r\n        //goes wrong in the declaration of the NetworkSettings Class\r\n        let lastActive = false\r\n        for (const key in this.settings.properties){\r\n            if(this.settings.properties.hasOwnProperty(key)){\r\n                properties.push(key)\r\n                if(this.settings.properties[key]){\r\n                    lastActive = key\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        this.setState({properties: properties, activeProperty: lastActive})\r\n    }\r\n\r\n    /**\r\n     * Updates the vertex or edge bounds based on the current network type\r\n     * @param numV the number of vertices we want or have\r\n     * @param numE the number of edges we want or have\r\n     * @param updateV whether or not numV is what we want/have respectively and vice-versa for numE\r\n     */\r\n    updateVertexEdgeBounds(numV, numE, updateV, activeProperty){\r\n        if (activeProperty === \"Connected\"){\r\n            const minE = numV -1\r\n            const maxE= Math.min(Math.floor(numV*(numV-1)/2), MAX_EDGES_NUM)\r\n            const edges = numE > maxE? maxE: numE < minE? minE: numE\r\n            this.settings.numE = edges\r\n            this.settings.numV = numV\r\n            this.setState({numV: numV, numE: edges, minE: minE, maxE: maxE})\r\n        }\r\n        if (activeProperty === \"Cycle\"){\r\n            if (updateV){\r\n                const edges = numV - 1\r\n                this.settings.numE = numV - 1\r\n                this.settings.numV = numV\r\n                this.setState({numV: numV, numE: edges, minE: MIN_EDGES_NUM, maxE: MAX_VERTICES_NUM-1})\r\n            } else{\r\n                const vertices = numE + 1\r\n                this.settings.numV = vertices\r\n                this.settings.numE = numE\r\n                this.setState({numV: vertices, numE: numE, minE: MIN_EDGES_NUM, maxE: MAX_VERTICES_NUM-1})\r\n            }\r\n        }\r\n        if (activeProperty === \"General\"){\r\n            this.setState({\r\n                minE: MIN_EDGES_NUM,\r\n                maxE: Math.min(MAX_EDGES_NUM, Math.floor(numV*(numV-1)/2)),\r\n                minV: MIN_VERTICES_NUM,\r\n                maxV : MAX_VERTICES_NUM,\r\n            })\r\n        }\r\n        //as always, changing number of vertices/ edges shuld result in a network reset\r\n        this.settings.shouldReset = true\r\n    }\r\n\r\n    /**\r\n     * Setter for the number of vertices in a network,\r\n     * should update vertex number/ edge number bounds as necessary\r\n     * @param v number of vertices\r\n     */\r\n    setNumVertices(v){\r\n        const num = Number(v)\r\n        if(this.state.activeProperty === \"Cycle\"){\r\n            this.updateVertexEdgeBounds(num, this.state.numE, true, this.state.activeProperty)\r\n        } else if (this.state.activeProperty === \"Connected\"){\r\n            this.updateVertexEdgeBounds(num, this.state.numE, true, this.state.activeProperty)\r\n        } else{\r\n            this.settings.numV = num\r\n            const maxE = Math.min(Math.floor(num*(num-1)/2), MAX_EDGES_NUM)\r\n            const edges = this.state.numE > maxE? maxE: this.state.numE\r\n            this.settings.numE = edges\r\n            this.settings.shouldReset = true\r\n            this.setState({numV: num, numE: edges, maxE: maxE})\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setter for the number of edges in a network,\r\n     * should update vertex number/edge number as necessary\r\n     * @param v\r\n     */\r\n    setNumEdges(v){\r\n        const num = Number(v)\r\n        if(this.state.activeProperty === \"Cycle\"){\r\n            this.updateVertexEdgeBounds(this.state.numV, num, false, this.state.activeProperty)\r\n        } else if (this.state.activeProperty === \"Connected\"){\r\n            this.updateVertexEdgeBounds(this.state.numV, num, false, this.state.activeProperty)\r\n        } else{\r\n            this.settings.numE = num\r\n            this.settings.shouldReset = true\r\n            this.setState({numE: num})\r\n        }\r\n    }\r\n\r\n    setScalingVertex(v){\r\n        this.settings.scaleVertices = !this.settings.scaleVertices\r\n        this.settings.shouldResizeVertex = true\r\n\r\n        this.setState({scaleVertices: this.settings.scaleVertices})\r\n    }\r\n\r\n    setMinSize(v){\r\n        this.settings.shouldResizeVertex = true\r\n        this.settings.minSize = parseInt(v)\r\n        this.settings.maxSize = Math.max(parseInt(v), this.state.maxSize)\r\n        this.setState({minSize: parseInt(v), maxSize : Math.max(parseInt(v), this.state.maxSize)})\r\n    }\r\n\r\n    setMaxSize(v){\r\n        console.log(v)\r\n        this.settings.shouldResizeVertex = true\r\n        this.settings.maxSize = parseInt(v)\r\n        this.setState({maxSize: parseInt(v)})\r\n    }\r\n\r\n    setApplyColorGradient(type){\r\n        if(type === \"vertex\"){\r\n            this.settings.applyColorGradientVertex = !this.settings.applyColorGradientVertex\r\n            this.setState({applyColorGradientVertex: this.settings.applyColorGradientVertex})\r\n            if(!this.settings.applyColorGradientVertex && !this.settings.applyColorGradientEdge){\r\n                this.settings.applyColorGradient = false\r\n                this.setState({applyColorGradient: false})\r\n            } else{\r\n                this.settings.applyColorGradient = true\r\n                this.setState({applyColorGradient: true, applyColorGradientVertex: true})\r\n            }\r\n        }\r\n        if(type === \"edge\"){\r\n            this.settings.applyColorGradientEdge = !this.settings.applyColorGradientEdge\r\n            this.setState({applyColorGradientEdge: this.settings.applyColorGradientEdge})\r\n            if(!this.settings.applyColorGradientVertex && !this.settings.applyColorGradientEdge){\r\n                this.settings.applyColorGradient = false\r\n                this.setState({applyColorGradient: false})\r\n            } else{\r\n                this.settings.applyColorGradient = true\r\n                this.setState({applyColorGradient: true})\r\n            }\r\n        }\r\n        this.settings.shouldRecolor = true\r\n    }\r\n\r\n    selectGradientType(type){\r\n        this.settings.gradientType = type;\r\n        this.settings.shouldRecolor = true;\r\n        this.setState({gradientType: type})\r\n    }\r\n\r\n    setStartColor(v){\r\n        this.settings.startColor = v\r\n        this.settings.shouldRecolor = true\r\n        this.setState({startColor: this.settings.startColor})\r\n    }\r\n\r\n    setEndColor(v){\r\n        this.settings.endColor = v\r\n        this.settings.shouldRecolor = true\r\n        this.setState({endColor: this.settings.endColor})\r\n    }\r\n\r\n    setProperties(v){\r\n        for(const key in this.settings.properties){\r\n            if(key === v){\r\n               this.settings.properties[key] = true\r\n            } else if(v === \"Cycle\" && key === \"Connected\"){\r\n                this.settings.properties[key] = true\r\n            } else {\r\n                this.settings.properties[key] = false\r\n            }\r\n        }\r\n        this.updateVertexEdgeBounds(this.state.numV, this.state.numE, true, v)\r\n        this.setState({activeProperty: v})\r\n    }\r\n\r\n\r\n    render(){\r\n        const propNetwork = this.state.properties === null? []: this.state.properties\r\n        return (\r\n            <div hidden = {!\"network\".includes(this.state.filter.toLowerCase())}>\r\n                <IonItem lines = \"full\" color = \"dark\">\r\n                    <div style = {{textAlign: \"center\"}}>\r\n                        <b style = {{textAlign: \"center\"}}> {this.props.name}</b>\r\n                    </div>\r\n\r\n                </IonItem >\r\n                <IonItem lines = \"full\" color = \"light\">\r\n                    <p> Network Type </p>\r\n                    <select style = {{marginLeft: \"10px\", color: \"blue\"}}\r\n                        value = {this.state.activeProperty}\r\n                            onChange = {(e) => this.setProperties(e.target.value)}>\r\n                        {propNetwork.map((property, index) => (\r\n                            <option style = {{color: \"blue\"}} key = {index} value = {property}> {property} </option>\r\n                        ))}\r\n                    </select>\r\n                </IonItem>\r\n                <IonItem lines = \"full\" color = \"light\">\r\n                    <p> Vertices {this.state.numV} </p>\r\n                    <IonRange\r\n                        value = {this.state.numV}\r\n                        min = {this.state.minV}\r\n                        max = {this.state.maxV}\r\n                        step = \"1\"\r\n                        onIonChange = {(e) => this.setNumVertices(e.target.value)}\r\n                        >\r\n                    </IonRange>\r\n                </IonItem>\r\n                <IonItem lines = \"full\" color = \"light\">\r\n                    <p> Edges {this.state.numE}</p>\r\n                    <IonRange\r\n                        value = {this.state.numE}\r\n                        min = {this.state.minE}\r\n                        max = {this.state.maxE}\r\n                        step = \"1\"\r\n                        onIonChange = {(e) => this.setNumEdges(e.target.value)}\r\n                    > </IonRange>\r\n                </IonItem>\r\n                <IonItem lines = \"full\" color = \"medium\">\r\n                    <p> Dynamic Sizing </p>\r\n                    <IonCheckbox style = {{marginLeft: \"5%\"}}\r\n                                 checked = {this.state.scaleVertices}\r\n                                 onIonChange = {() => this.setScalingVertex()}\r\n                    > </IonCheckbox>\r\n                </IonItem>\r\n                <div>\r\n                    <IonItem lines = \"full\" color = \"light\">\r\n                        <p> Minimum Vertex Size  {this.state.minSize}</p>\r\n                        <IonRange min = \"1\"\r\n                                  value = {this.state.minSize}\r\n                                  max = {MAX_VERTEX_SIZE}\r\n                                  onIonChange = {(e) => this.setMinSize(e.target.value)}\r\n                            disabled = {!this.state.scaleVertices}> </IonRange>\r\n                    </IonItem>\r\n                    <IonItem lines = \"full\" color = \"light\">\r\n                        <p> Maximum Vertex Size  {this.state.maxSize}</p>\r\n                        <IonRange min = {Math.max(1, this.state.minSize)}\r\n                                  value = {this.state.maxSize}\r\n                                  max = {MAX_VERTEX_SIZE}\r\n                                  onIonChange = {(e) => this.setMaxSize(e.target.value)}\r\n                            disabled = {!this.state.scaleVertices}> </IonRange>\r\n                    </IonItem>\r\n                </div>\r\n                <IonItem lines = \"full\" color = \"medium\">\r\n                    <p> Apply Vertex Color Gradient </p>\r\n                    <IonCheckbox\r\n                        onIonChange = {(e) => {this.setApplyColorGradient(\"vertex\")}}\r\n                        checked = {this.state.applyColorGradientVertex}\r\n                        style = {{marginLeft: \"5%\"}}> </IonCheckbox>\r\n                </IonItem>\r\n                <IonItem lines = \"full\" color = \"medium\">\r\n                    <p> Apply Edge Color Gradient </p>\r\n                    <IonCheckbox\r\n                        checked = {this.state.applyColorGradientEdge}\r\n                        onIonChange = {(e) => {this.setApplyColorGradient(\"edge\")}}\r\n                        style = {{marginLeft: \"5%\"}}> </IonCheckbox>\r\n                </IonItem>\r\n                <IonItem>\r\n                    <p> Color Gradient Type</p>\r\n                    <select\r\n                        style = {{marginLeft: \"5%\"}}\r\n                        disabled = {!this.state.applyColorGradient}\r\n                        onChange = {(e) => this.selectGradientType(e.target.value)}\r\n                        value = {this.state.gradientType}>\r\n                        <option value = \"Linear\"> Linear</option>\r\n                        <option value = \"Polar\"> Polar </option>\r\n                    </select>\r\n                </IonItem>\r\n                <IonItem color = \"light\">\r\n                    <p> Start Color</p>\r\n                    <input\r\n                        onChange = {(e) => this.setStartColor(e.target.value)}\r\n                        disabled = {!this.state.applyColorGradient}\r\n                        style = {{marginLeft: \"5%\"}}\r\n                        type = \"color\" defaultValue = {this.settings.startColor} />\r\n                </IonItem>\r\n                <IonItem color = \"light\">\r\n                    <p> End Color </p>\r\n                    <input\r\n                        onChange = {(e) => this.setEndColor(e.target.value)}\r\n                        disabled = {!this.state.applyColorGradient}\r\n                        style = {{marginLeft: \"5%\"}}\r\n                        type = \"color\" defaultValue = {this.settings.endColor}/>\r\n                </IonItem>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NetworkSettingsComponent","import React from \"react\"\r\nimport NetworkSettingsComponent from \"./NetworkSettingsComponent\";\r\n\r\n/**\r\n * Handles the attributes of a Network and passes\r\n * them down to its .toHTML component and updates them there\r\n */\r\nclass NetworkSettings{\r\n    /**\r\n     * @attr numV : the number of vertices in the network\r\n     * @attr numE : the number of edges in the network\r\n     * @attr scaleVertices: boolean deciding whether or not\r\n     *                      vertex size based on their degree\r\n     * @attr minSize: minimum vertex size if scaling vertex size\r\n     * @attr maxSize: maximum vertex size if scaling vertex size\r\n     * @attr applyColorGradient: boolean deciding whether or not\r\n     *          to apply color to vertices based on their degree\r\n     * @attr startColor string(color) that specifies the start color of the color gradient\r\n     * @attr endColor string(color) that specifies the end color of the color gradient\r\n     * @attr properties specified the properties of the network:\r\n     *              these affect network generation algorithms and which algorithms can be run\r\n     */\r\n    constructor(){\r\n        //number of vertices and edges\r\n        this.numV = 60\r\n        this.numE = 200\r\n        //scaling vertx size\r\n        this.scaleVertices = false\r\n        this.minSize = 1\r\n        this.maxSize = 12\r\n        //apply color gradients\r\n        this.gradientType = \"Linear\"\r\n        this.applyColorGradient = false\r\n        this.applyColorGradientVertex = false\r\n        this.applyColorGradientEdge = false\r\n        this.startColor =  \"#00ffff\"\r\n        this.endColor = \"#00ffff\"\r\n        //network type/properties\r\n        //they are ordered\r\n        this.properties = {}\r\n        this.properties.General = true\r\n        this.properties.Connected = false\r\n        this.properties.Cycle = false\r\n\r\n\r\n        //handlers: if these values are true the network\r\n        // should reassign its vertices/edges properties\r\n        // according to which of the following are true\r\n        this.shouldReset = false //re-randomize vertices/edges\r\n        this.shouldResizeVertex = false\r\n        this.shouldRecolor = false\r\n    }\r\n\r\n    getProperties(){\r\n        return this.properties\r\n    }\r\n\r\n    toHTML(ref){\r\n        return (<NetworkSettingsComponent\r\n            ref = {ref}\r\n            settings = {this} name = {\"Network Settings\"}/>)\r\n    }\r\n}\r\n\r\nexport default NetworkSettings\r\n","import AlgorithmSettings from \"./AlgorithmSettings\"\r\nimport NetworkSettings from \"../../Components/Network/NetworkSettings\";\r\n\r\n/**\r\n * Abstract Super Class that dictates what methods each Network Algorithm Should have\r\n * **/\r\nclass AbstractNetworkAlgorithm{\r\n    constructor(name) {\r\n        this.name = name\r\n        this.settings = new AlgorithmSettings(name)\r\n        this.requiredProperty = null\r\n    }\r\n    /** getAnimations should run the algorithm and get the animations**/\r\n    async getAnimations (){\r\n        throw new Error(\"Cannot fetch animation of an Abstract algorithm\")\r\n    }\r\n\r\n    /**\r\n     * nextAnimationStep should take the input set of vertices and return the update vertices and edges\r\n     * @param network the network to transform\r\n     * @param animations object containing the animations information\r\n     * @param currentStep the current step we are at in the animation (0-indexed)\r\n     * @param steps the number of steps to apply : > 0 means forward steps, < 0 means backwards steps\r\n     */\r\n    nextAnimationSteps(network, animations, currentStep, steps) {\r\n        if (animations.length === 0) {\r\n            console.warn(\"No animations found\");\r\n            return;\r\n        }\r\n        const actualSteps = this.trimSteps(animations, currentStep, steps)\r\n        this.applyAnimation(network, animations, currentStep, actualSteps)\r\n        return actualSteps\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param network\r\n     * @param animations\r\n     * @param currentStep\r\n     * @param actualSteps\r\n     */\r\n    applyAnimation(network, animations, currentStep, actualSteps){\r\n        throw new Error(\"Cannot apply an animation on an abstract algorithm\")\r\n    }\r\n\r\n    /** getSettings should get the settings attribute of the algorithm**/\r\n    getSettings(){\r\n        throw new Error(\"Cannot get settings of an Abstract algorithm \")\r\n    }\r\n\r\n    /**\r\n     * sets the settings attribute of the algorithm\r\n     * @param settings the settings to be set\r\n     */\r\n    setSettings(settings){\r\n        this.settings = settings\r\n    }\r\n\r\n    /**\r\n     * Some algorithms required specific network properties, and this sets such a required property.\r\n     * Checks that it is a valid network property by iterating over settings.\r\n     * @param property the required property of the algorithm\r\n     */\r\n    setRequiredProperty(property){\r\n        if(property === null) {this.requiredProperty = null; return;}\r\n        const properties = new NetworkSettings().properties\r\n        for(const key in properties){\r\n            if(key === property){\r\n                this.requiredProperty = property\r\n                return\r\n            }\r\n        }\r\n        throw new Error(\"Set required property to Algorithm that does not exist in Network Settings\")\r\n    }\r\n    /** getHTMLSettings returns the HTML that represent the settings**/\r\n    getHTMLSettings(){\r\n        throw new Error(\"Can't initiate HTML settings of an Abstract algorithm\")\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param animations\r\n     * @param currentStep\r\n     * @param steps\r\n     * @returns {Number} the amount of appropriate steps to actually apply\r\n     */\r\n    trimSteps(animations, currentStep, steps){\r\n        const n = animations.length - 1\r\n\r\n        if(currentStep === n && steps > 0) return 0 //already at animation end, perform 0 steps\r\n        if(currentStep === 0 && steps < 0) return 0 //already at animation start, perform 0 steps\r\n\r\n        var nextSteps = currentStep + steps\r\n        if (nextSteps > n) return n - currentStep //steps will exceed the animation length\r\n        if (nextSteps < 0) return -currentStep // steps will exceed minimum animation index\r\n        return steps\r\n    }\r\n\r\n    /**\r\n     * Creates a Network's adjacency matrix from its vertices and edges\r\n     * @param v vertices\r\n     * @param e edges\r\n     * @returns {Number[][]} the adjacency matrix of the network\r\n     */\r\n    createAdjacencyMatrix(v, e){\r\n        const adj = [];\r\n        for(let i = 0; i < v.length; i++){\r\n            const adj_row = [];\r\n            for(let j = 0; j < v.length; j++){\r\n                adj_row.push(0);\r\n            }\r\n            adj.push(adj_row);\r\n        }\r\n\r\n        for(let i = 0; i < e.length; i ++){\r\n            adj[e[i].start][e[i].end] = 1;\r\n            adj[e[i].end][e[i].start] = 1;\r\n        }\r\n        return adj;\r\n    }\r\n}\r\n\r\nexport default AbstractNetworkAlgorithm","import AbstractNetworkAlgorithm from \"../AbstractNetworkAlgorithm\";\r\n\r\nclass AbstractLayoutAlgorithm extends AbstractNetworkAlgorithm{\r\n    /**\r\n     * In layout algorithms we store the new vertices at each iteration of the algorithm\r\n     * @param network the network we want to change\r\n     * @param animations\r\n     * @param currentStep\r\n     * @param actualSteps\r\n     */\r\n    applyAnimation(network, animations, currentStep, actualSteps) {\r\n        network.vertices = animations[currentStep + actualSteps]\r\n    }\r\n\r\n}\r\n\r\nexport default AbstractLayoutAlgorithm;","import React from \"react\"\r\nimport {IonItem} from \"@ionic/react\"\r\n\r\nimport \"./AlgorithmList.css\";\r\n\r\nclass AlgorithmList extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.algorithms = this.props.algorithms\r\n        this.animator = this.props.animator\r\n        this.state = {\r\n            activeAlgorithm: this.animator.activeAlgorithm.name,\r\n            width: 0,\r\n        }\r\n        this.resize = this.resize.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const w = window.innerWidth\r\n        this.setState({width: w})\r\n        window.addEventListener(\"resize\", this.resize)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize);\r\n    }\r\n\r\n    setOption(v){\r\n        for(let i = 0; i < this.algorithms.length; i++){\r\n            if(this.algorithms[i].name === v){\r\n                this.setState({\r\n                    activeAlgorithm:  v,\r\n                });\r\n                this.animator.activeAlgorithm = this.algorithms[i]\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    resize(){\r\n        const w = window.innerWidth;\r\n        this.setState({width: w})\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                <IonItem lines = \"full\">\r\n                    <b style = {{cursor: \"default\", maxWidth: this.state.width*(0.75/10)}}\r\n                        className = \"noSelectText\"> Select Algorithm </b>\r\n                    <select\r\n                        value = {this.state.activeAlgorithm}\r\n                        style = {{\r\n                            color: \"blue\",\r\n                            marginLeft: \"10px\",\r\n                            maxWidth: this.state.width*(1/10)\r\n                        }}\r\n                        onChange = {(e) => this.setOption(e.target.value)}\r\n                    >\r\n                    {this.algorithms.map((algorithm, index) => (\r\n                        <option style = {{color: \"blue\"}}value = {algorithm.name} key = {index}> {algorithm.name} </option>\r\n                    ))}\r\n                    </select>\r\n\r\n                </IonItem>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AlgorithmList","import React from \"react\";\r\n\r\nclass AlgorithmSettings extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.algoSettings = []\r\n        for(let i = 0; i < this.props.algorithms.length; i++){\r\n            this.algoSettings.push(this.props.algorithms[i].settings)\r\n        }\r\n        this.state = {\r\n            filter: \"\"\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                {this.algoSettings.map((algorithmSettings, index) => (\r\n                    <div key = {index} hidden = {!algorithmSettings.name.toLowerCase().includes(this.state.filter.toLowerCase())}>\r\n                        {algorithmSettings.toHTML(index)}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AlgorithmSettings","import React from \"react\";\r\nimport {IonCheckbox, IonItem, IonLabel} from \"@ionic/react\";\r\n\r\nclass SettingCheckbox extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            value: this.props.settings.value\r\n        }\r\n        this.settings = this.props.settings\r\n    }\r\n\r\n    toggle(e){\r\n        this.settings.value = !this.settings.value\r\n        this.setState({value: !this.state.value})\r\n        console.log(\"to\", this.settings.value)\r\n    }\r\n    render(){\r\n        return (\r\n            <IonItem color = \"light\">\r\n                <IonLabel>\r\n                    {this.settings.name}\r\n                </IonLabel>\r\n                <IonCheckbox\r\n                    checked = {this.state.value}\r\n                    onIonChange = {(e) => this.toggle(e.detail.value) }>\r\n                </IonCheckbox>\r\n\r\n            </IonItem>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SettingCheckbox","import React from \"react\";\r\nimport {IonItem, IonLabel} from \"@ionic/react\";\r\n\r\nclass SettingOption extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            value : this.props.settings.value\r\n        }\r\n        this.settings = this.props.settings\r\n    }\r\n\r\n    setOption(v){\r\n        this.settings.value = v\r\n        this.setState({value: v})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <IonItem color = \"light\">\r\n                <IonLabel>\r\n                    {this.settings.name}\r\n                </IonLabel>\r\n                <select\r\n                    style = {{color: \"blue\"}}\r\n                    value = {this.settings.value}\r\n                    onChange = {(e) => this.setOption(e.target.value)}>\r\n                    {this.settings.options.map((opt, index) => (\r\n                        <option style = {{color: \"blue\"}} key = {index} value = {opt}> {opt} </option>\r\n                    ))}\r\n                </select>\r\n\r\n            </IonItem>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SettingOption","import React from \"react\";\r\nimport {IonItem} from \"@ionic/react\";\r\n\r\nclass SettingRange extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            value : this.props.settings.value\r\n        }\r\n        this.settings = this.props.settings\r\n    }\r\n\r\n    setSettingsValue(v){\r\n        this.settings.value = Number.parseFloat(v)\r\n        this.setState({value: v})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n\r\n            <IonItem lines = \"full\" color = \"light\">\r\n                <p>\r\n                    {this.settings.name} {this.state.value}\r\n                </p>\r\n                <input type = \"range\" style = {{color: \"rgb(63,111,255)\", cursor: \"grab\", width: \"100%\"}}\r\n                    min = {this.settings.min}\r\n                    max = {this.settings.max}\r\n                    step = {this.settings.step}\r\n                    value = {this.state.value}\r\n                    onChange = {(e) => this.setSettingsValue(e.target.value)}/>\r\n\r\n\r\n            </IonItem>)\r\n    }\r\n}\r\n\r\nexport default SettingRange","import React from \"react\";\r\nimport {IonItem} from \"@ionic/react\"\r\n\r\nclass SettingColor extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            value : this.props.settings.value\r\n        }\r\n        this.settings = this.props.settings\r\n    }\r\n\r\n    setSettingsValue(v){\r\n        this.settings.value = v;\r\n        this.setState({value: v});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <IonItem lines = \"full\" color = \"light\">\r\n                <p>\r\n                    {this.settings.name}\r\n                </p>\r\n                <input type = \"color\"\r\n                       style = {{marginLeft: \"5%\"}}\r\n                       value = {this.state.value}\r\n                       onChange = {(e) => this.setSettingsValue(e.target.value)}\r\n                />\r\n            </IonItem>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SettingColor;","import React from \"react\"\r\nimport {SettingOption, SettingCheckbox,\r\n    SettingRange, SettingColor} from \"../../Components/Settings\"\r\n\r\n\r\n/**\r\n * Setting represents a setting on an algorithm\r\n */\r\nclass AlgorithmSettingObject{\r\n    constructor(obj){\r\n        this.obj = obj\r\n    }\r\n\r\n    /**\r\n     * Creates a setting that could take on a range of values\r\n     * @param name the name/label string of the setting\r\n     * @param min minimum value of the range of values\r\n     * @param max maximum value of the range of values\r\n     * @param step the increment the user can change the value by\r\n     * @param value is the initial value of the setting\r\n     * @returns {AlgorithmSettingObject}\r\n     */\r\n    static newRangeSetting(name, min, max, step, value){\r\n\r\n        if (!validParameter(name) || !validParameter(min) || !validParameter(max) || !validParameter(step)){\r\n            throw new Error(\"Invalid parameter provided to new Range setting\")\r\n        }\r\n        if (!value){\r\n            value = min\r\n        }\r\n        var s = {type: \"range\", name: name, min: min, max: max, step:step, value: value}\r\n        return new AlgorithmSettingObject(s)\r\n    }\r\n\r\n    /**\r\n     * Creates a new setting that gives the user a choice of string options\r\n     * @param name the name string of the new setting\r\n     * @param options the array of string options\r\n     * @param value the value string of options\r\n     * @returns {AlgorithmSettingObject}\r\n     */\r\n    static newOptionSetting(name, options, value){\r\n        if (!validParameter(name) || !validParameter(options)){\r\n            throw new Error(\"Invalid parameter provided to new Option setting\")\r\n        }\r\n        if(options.lengh === 0) throw new Error(\"No options provided to new Option setting\")\r\n        if (!value){\r\n            value = options[0]\r\n        }\r\n        if (!options.includes(value)){\r\n            throw new Error(\"Initial option provided to new Options setting is not provided in\")\r\n        }\r\n\r\n        var s = {type: \"option\", name: name, options: options, value: value}\r\n        return new AlgorithmSettingObject(s)\r\n    }\r\n\r\n    /**\r\n     * Creates a new setting that generates a binary setting in the form of a checkbox\r\n     * @param name name of the checkbox\r\n     * @param value default value of the checkbox\r\n     * @returns {AlgorithmSettingObject}\r\n     */\r\n    static newCheckBoxSetting(name, value){\r\n        if (!validParameter(name)){\r\n            throw new Error(\"Name provided to new CheckBox setting is not valid\")\r\n        }\r\n        if (!validParameter(value)) value = false\r\n\r\n        var s = {type: \"checkbox\", name: name, value: value}\r\n        return new AlgorithmSettingObject(s)\r\n    }\r\n\r\n    /**\r\n     * Creates a new color picker setting\r\n     * @param name the name of the color picker\r\n     * @param value the initial color string value of the color setting, must be in hex color string format\r\n     * @returns {AlgorithmSettingObject}\r\n     */\r\n    static newColorSetting(name, value){\r\n        if(!validParameter(name)){\r\n            throw new Error(\"Name provided to new Color setting is not valid\")\r\n        }\r\n\r\n        if (!validParameter(value)) value = \"#ff00ff\"\r\n        var s = {type: \"color\", name : name, value: value}\r\n        return new AlgorithmSettingObject(s)\r\n    }\r\n\r\n    /**\r\n     * toHTML returns the component representation of the setting\r\n     * @param key the provided props key to pass down to the component\r\n     * @returns {JSX.Element}\r\n     */\r\n    toHTML(key){\r\n       if (this.obj.type === \"range\"){\r\n           return (\r\n               <SettingRange\r\n                   key = {key}\r\n                   settings = {this.obj}\r\n               />)\r\n       }\r\n       if (this.obj.type === \"option\"){\r\n           return (\r\n               <SettingOption\r\n                   key = {key}\r\n                   settings = {this.obj}\r\n               />\r\n           )\r\n       }\r\n       if (this.obj.type === \"checkbox\"){\r\n           return(\r\n               <SettingCheckbox\r\n                   key = {key}\r\n                   settings = {this.obj}\r\n               />\r\n               )\r\n       }\r\n       if (this.obj.type === \"color\"){\r\n           return(\r\n               <SettingColor\r\n                   key = {key}\r\n                   settings = {this.obj}/>\r\n           )\r\n       }\r\n    }\r\n}\r\n\r\nexport default AlgorithmSettingObject\r\n\r\n/**\r\n * Checks if a provided parameter is non null. not undefined and not NaN\r\n * @param parameter the parameter to check\r\n * @returns {boolean} is a valid parameter\r\n */\r\nfunction validParameter(parameter){\r\n    return !(parameter === undefined || parameter === null);\r\n}\r\n\r\n","class Force{\r\n  constructor(x,y,z){\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n    if(this.z === undefined) this.z = null;\r\n  }\r\n\r\n  setX(x){\r\n    this.x = x;\r\n  }\r\n\r\n  setY(y){\r\n    this.y = y;\r\n  }\r\n\r\n  setZ(z){\r\n    this.z = z;\r\n  }\r\n\r\n  addVector(vector){\r\n    this.x += vector[0];\r\n    this.y += vector[1];\r\n    if(vector[2]!== undefined && this.z !== null){\r\n      this.z += vector[2];\r\n    }\r\n  }\r\n\r\n  scale(delta){\r\n    this.setX(this.x*delta);\r\n    this.setY(this.y*delta);\r\n    if(this.z !== null){\r\n      this.setZ(this.z*delta);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default Force;\r\n","import AbstractLayoutAlgorithm from \"./AbstractLayoutAlgorithm.js\"\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\nimport Force from \"../../../datatypes/Force.js\"\r\nimport Vertex from \"../../../datatypes/Vertex.js\"\r\nimport Edge from \"../../../datatypes/Edge.js\"\r\n\r\nconst ITERATIONS = 100;\r\n\r\nclass SpringEmbedding extends AbstractLayoutAlgorithm{\r\n    constructor(){\r\n        super(\"Spring Embedding\")\r\n        //declare all of the algorithm settings\r\n\r\n        this.forceOfAttraction = AlgorithmSettingObject.newRangeSetting(\r\n            \"Force of Attraction\",\r\n            0.1,\r\n            2,\r\n            0.1,\r\n            2\r\n        )\r\n        this.forceOfRepulsion = AlgorithmSettingObject.newRangeSetting(\r\n            \"Fore of Repulsion\",\r\n            0.1,\r\n            2,\r\n            0.1,\r\n            1\r\n        )\r\n        this.epsilon = AlgorithmSettingObject.newRangeSetting(\r\n            \"Convergence bound\",\r\n            0.001,\r\n            3,\r\n            0.001,\r\n            0.1,\r\n        )\r\n        this.forceToAreaScaling = AlgorithmSettingObject.newRangeSetting(\r\n            \"Force to area scaling\",\r\n            0,\r\n            100,\r\n            0.1,\r\n            0\r\n        )\r\n        this.distanceType = AlgorithmSettingObject.newOptionSetting(\r\n            \"Distance type\",\r\n            [\"Graph theoretic\", \"Continuous\"],\r\n            \"Continuous\"\r\n            )\r\n\r\n        this.iterations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Maximum Iterations\",\r\n            100,\r\n            300,\r\n            1,\r\n            100)\r\n\r\n        this.settings.push([\r\n            this.forceOfAttraction,\r\n            this.forceOfRepulsion,\r\n            this.epsilon,\r\n            this.distanceType,\r\n            this.iterations])\r\n\r\n        this.setRequiredProperty(null)\r\n    }\r\n\r\n    /** gets the settings of the spring embedding algorithm**/\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     * Performs the spring embedding algorithm on a set of vertices and edges\r\n     */\r\n    async getAnimations(vertices, edges, is3D){\r\n        const K = ITERATIONS;\r\n        const distType = this.distanceType.obj.value;\r\n        const delta = 0.1\r\n\r\n        let t = 1;\r\n        let animations = [];\r\n        let scaling_factor = []; //the animations will sometimes push vertices x,y, z\r\n                    // outside of the range (0,1) so we need to rescale every iteration of the animation once it is done\r\n        animations.push(vertices);\r\n        scaling_factor.push([0, 0, 0, 1, 1, 1])\r\n        //apply forces to all vertices on each iteration\r\n        while(t < K){\r\n            let forceList = [];\r\n            for(let i = 0; i < vertices.length; i++){\r\n                let f = new Force(0, 0, 0);\r\n                let verticesConnected = [];\r\n\r\n                //CALCULATE FORCES OF ATTRACTION\r\n                for(let j = 0; j < edges.length; j++){\r\n\r\n                    if(i === edges[j].start && i !== edges[j].end){\r\n                        const calcs = this.fattract(\r\n                            vertices[edges[j].start],\r\n                            vertices[edges[j].end], is3D);\r\n                        f.addVector(calcs);\r\n                        verticesConnected.push(edges[j].end)\r\n                    }\r\n\r\n                    if(i === edges[j].end && i !== edges[j].start){\r\n                        const calcs = this.fattract(vertices[edges[j].end],\r\n                            vertices[edges[j].start], is3D);\r\n                        f.addVector(calcs)\r\n                        verticesConnected.push(edges[j].start);\r\n                    }\r\n                }\r\n\r\n                //CALCULATE REPULSIVE FORCES\r\n                for(let j = 0; j < vertices.length; j++){\r\n                    if (i === j) continue;\r\n                    let connected = false;\r\n                    for (let k = 0; k < verticesConnected.length; k++){\r\n                        if (j === verticesConnected[k]) {\r\n                            connected = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(!connected){\r\n                        const calcs = this.frepulse(\r\n                            vertices[i],\r\n                            vertices[j],\r\n                            is3D)\r\n                        f.addVector(calcs)\r\n                    }\r\n                }\r\n                forceList.push(f)\r\n            }\r\n\r\n\r\n            //now apply these forces\r\n            const iterationAnimations = [];\r\n            var maxF = -Infinity;\r\n            var minX = Infinity,minY = Infinity,minZ = Infinity\r\n            var maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity\r\n\r\n            for(let i = 0; i < vertices.length; i++){\r\n                forceList[i].scale(delta)\r\n                const fNorm = distance(forceList[i], new Force(0, 0, 0), is3D)\r\n                maxF = Math.max(maxF, fNorm)\r\n\r\n                iterationAnimations.push(vertices[i].add(forceList[i]))\r\n                minX = Math.min(minX, iterationAnimations[i].x); maxX = Math.max(maxX, iterationAnimations[i].x);\r\n                minY = Math.min(minY, iterationAnimations[i].y); maxY = Math.max(maxY, iterationAnimations[i].y);\r\n                minZ = Math.min(minZ, iterationAnimations[i].z); maxZ = Math.max(maxZ, iterationAnimations[i].z);\r\n            }\r\n            //rescale to (0, 1)\r\n            scaling_factor.push([-minX, -minY, -minZ, 1/((-minX) + maxX), 1/((-minY)+maxY), 1/((-minZ)+maxZ)]);\r\n            animations.push(iterationAnimations);\r\n            vertices = iterationAnimations;\r\n            t += 1;\r\n\r\n            //check convergence bound to see if we need to stop the algorithm early:\r\n            if(maxF < this.epsilon)break;\r\n\r\n        } //end of iterations loop\r\n        //scaling animations properly without affecting computations\r\n        for(let i = 0; i < animations.length; i++){\r\n            for(let j = 0; j < animations[i].length; j++){\r\n\r\n                animations[i][j].x = (animations[i][j].x + scaling_factor[i][0])*scaling_factor[i][3];\r\n                animations[i][j].y = (animations[i][j].y + scaling_factor[i][1])*scaling_factor[i][4];\r\n                animations[i][j].z = (animations[i][j].z + scaling_factor[i][2])*scaling_factor[i][5];\r\n            }\r\n        }\r\n        return animations\r\n\r\n    }\r\n\r\n    fattract(v1,v2, is3D){\r\n        var dist = distance(v1,v2, is3D);\r\n        const unitV = unitVector(v1,v2, is3D);\r\n        if (is3D){\r\n            return [this.forceOfAttraction.obj.value* Math.log(dist) * unitV[0],\r\n            this.forceOfAttraction.obj.value* Math.log(dist) * unitV[1],\r\n            this.forceOfAttraction.obj.value* Math.log(dist) * unitV[2]];\r\n        }\r\n        return [this.forceOfAttraction.obj.value* Math.log(dist) * unitV[0],\r\n            this.forceOfAttraction.obj.value* Math.log(dist) * unitV[1]]\r\n    }\r\n\r\n    frepulse(v1,v2, is3D){\r\n        var dist = distance(v2,v1, is3D);\r\n        const unitV = unitVector(v2,v1, is3D);\r\n        if (is3D){\r\n            return [(this.forceOfRepulsion.obj.value*unitV[0])/Math.sqrt(dist) ,\r\n                (this.forceOfRepulsion.obj.value*unitV[1])/Math.sqrt(dist),\r\n                (this.forceOfRepulsion.obj.value*unitV[2])/Math.sqrt(dist)];\r\n        }\r\n        return [(this.forceOfRepulsion.obj.value*unitV[0])/Math.sqrt(dist) ,\r\n        (this.forceOfRepulsion.obj.value*unitV[1])/Math.sqrt(dist)]\r\n\r\n    }\r\n\r\n}\r\n\r\n//helpers\r\n/**\r\n * distance between two points (Vertex or Force)\r\n * @param v1 the first point\r\n * @param v2 the secont point\r\n */\r\nfunction distance(v1, v2, is3D){\r\n    var dist;\r\n    if (is3D) {dist = Math.sqrt(\r\n        Math.pow((v1.x - v2.x), 2)\r\n        + Math.pow((v1.y - v2.y), 2)\r\n        + Math.pow((v1.z-v2.z),2))\r\n    } else{\r\n        dist = Math.sqrt(\r\n            Math.pow((v1.x - v2.x), 2)\r\n            + Math.pow((v1.y - v2.y), 2))\r\n    }\r\n    return dist === 0? 0.00000000000000000001: dist;\r\n\r\n}\r\n\r\n/**\r\n * returns the unit vector from v1 to v2\r\n * @param v1 the start point\r\n * @param v2 the end point\r\n * @returns {number[]} the unit vector\r\n */\r\nfunction unitVector(v1,v2, is3D){\r\n    const new_x = v2.x - v1.x;\r\n    const new_y = v2.y - v1.y;\r\n\r\n    const dist = distance(v1,v2, is3D);\r\n    if(is3D){\r\n        const new_z = v2.z - v1.z;\r\n        return [new_x/dist, new_y/dist, new_z/dist];\r\n    }\r\n\r\n    return [new_x/dist, new_y/dist]\r\n}\r\n\r\n\r\nexport default SpringEmbedding\r\n","import React from \"react\";\r\nimport Network from \"./Network\";\r\nimport SpringEmbedding from \"../../Animations/Algorithms/LayoutAlgorithms/springEmbedding\";\r\n\r\nimport {IonIcon, IonButton} from \"@ionic/react\"\r\nimport {save, cameraReverse} from \"ionicons/icons\"\r\n\r\nimport \"./networkVisualizer.css\";\r\n\r\nclass NetworkVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            width: 0,\r\n            height: 0,\r\n            network: null,\r\n            sorted: false,\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            dragging: false,\r\n            previousMouseX: 0,\r\n            previousMouseY: 0,\r\n            zoomMouseX: null,\r\n            zoomMouseY: null,\r\n            scale: 1,\r\n        }\r\n        this.frameId = 0;\r\n        this.settings = this.props.settings\r\n        this.heightConstant= 8.5/10\r\n        this.widthConstant = 7/10\r\n        this.minheight = 420\r\n        this.network = React.createRef()\r\n        this.networkData = this.props.networkData\r\n        this.animator = this.props.animator\r\n\r\n        this.resize = this.resize.bind(this);\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const w = window.innerWidth * this.widthConstant\r\n        const h = window.innerHeight * this.heightConstant\r\n        this.network.current.width = w\r\n        this.network.current.height = h\r\n\r\n        await this.props.parent.resetAnimationLogic() //clear any animations loaded when changing network visualizations\r\n        this.networkData.set3D(false)\r\n        this.networkData.createRandomNetwork()\r\n\r\n        this.setState({width: w, height: h})\r\n        window.addEventListener(\"resize\", this.resize)\r\n        this.frameId = window.requestAnimationFrame(() => this.animate())\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize)\r\n        window.cancelAnimationFrame(this.frameId)\r\n    }\r\n\r\n    animate(){\r\n        if(this.networkData !== null && this.network.current !== null){\r\n            if(this.networkData.shouldReset()){\r\n                this.networkData.createRandomNetwork()\r\n            } else if(this.networkData.shouldResizeVertex()){\r\n                this.networkData.applyVertexSize()\r\n            } else if(this.networkData.shouldRecolor()){\r\n                this.networkData.applyColorGradient()\r\n            }\r\n            this.drawNetwork(this.networkData)\r\n            this.frameId = window.requestAnimationFrame(() => this.animate())\r\n        }\r\n\r\n    }\r\n\r\n    drawNetwork(network){\r\n        const w = this.network.current.width\r\n        const h = this.network.current.height\r\n        const ctx = this.network.current.getContext(\"2d\");\r\n        ctx.clearRect(0, 0, this.network.current.width, this.network.current.height)\r\n        ctx.translate(this.state.offsetX, this.state.offsetY)//translate by the offsets\r\n\r\n        ctx.scale(this.state.scale, this.state.scale)\r\n\r\n        for(let i = 0; i < network.vertices.length; i++){\r\n            ctx.globalAlpha = 1.0\r\n            ctx.beginPath()\r\n            const color = network.vertices[i].color\r\n            ctx.fillStyle = color\r\n            ctx.arc(network.vertices[i].x*w ,\r\n                network.vertices[i].y*h,\r\n                network.vertices[i].size, 0, Math.PI*2)\r\n            ctx.fill();\r\n            ctx.closePath()\r\n        }\r\n\r\n        for(let j = 0; j < network.edges.length; j++){\r\n            ctx.beginPath();\r\n            const index1 = network.edges[j].start;\r\n            const index2 = network.edges[j].end;\r\n            ctx.moveTo(network.vertices[index1].x * w ,\r\n                        network.vertices[index1].y * h )\r\n            ctx.lineTo(network.vertices[index2].x * w ,\r\n                        network.vertices[index2].y * h)\r\n            ctx.globalAlpha = network.edges[j].alpha\r\n            ctx.strokeStyle = this.applyEdgeColorGradient(network.vertices,network.edges[j], ctx, w, h)\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n        }\r\n        ctx.scale(1/this.state.scale, 1/this.state.scale) //scale by zoom\r\n        ctx.translate(-this.state.offsetX, -this.state.offsetY) //untranslate by the offsets\r\n    }\r\n\r\n    resize(){\r\n        const h = Math.max(window.innerHeight *this.heightConstant, this.minheight)\r\n        const w = window.innerWidth  * this.widthConstant\r\n        if(this.network.current !== null){\r\n            this.network.current.width = w\r\n            this.network.current.height = h\r\n            this.setState({height: h, width: w})\r\n        }\r\n    }\r\n\r\n    applyEdgeColorGradient(vertices, edge, ctx, w, h){\r\n        if(Array.isArray(edge.color)){\r\n            var gradient = ctx.createLinearGradient(\r\n                vertices[edge.start].x *w,\r\n                vertices[edge.start].y * h,\r\n                vertices[edge.end].x*w,\r\n                vertices[edge.end].y*h)\r\n            gradient.addColorStop(0, edge.color[0]);\r\n            gradient.addColorStop(1, edge.color[1])\r\n            return gradient\r\n        } else{\r\n            return edge.color\r\n        }\r\n    }\r\n\r\n    //SPECIFIC EVENT HANDLERS\r\n\r\n    /** handles whether drag events on canvas are occuring**/\r\n    setDrag(e,v){\r\n        e.preventDefault();\r\n        if(v === true) {\r\n            this.setState({previousMouseX : e.clientX});\r\n            this.setState({previousMouseY : e.clientY});\r\n        }\r\n        this.setState({dragging:v});\r\n    }\r\n\r\n    /** updates the camera based on user-input events on canvas**/\r\n    updateCamera(e){\r\n        e.preventDefault();\r\n        if(this.state.dragging){\r\n            const deltaX = e.clientX - this.state.previousMouseX;\r\n            const deltaY = e.clientY - this.state.previousMouseY;\r\n            const new_offsetX = this.state.offsetX + deltaX/(this.state.scale);\r\n            const new_offsetY = this.state.offsetY + deltaY/(this.state.scale);\r\n            this.setState({previousMouseX: e.clientX, previousMouseY: e.clientY,\r\n                offsetX: new_offsetX, offsetY: new_offsetY});\r\n        }\r\n        const rect = this.network.current.getBoundingClientRect()\r\n        this.setState({ currentMouseX: e.clientX -rect.left, currentMouseY: e.clientY - rect.top})\r\n    }\r\n\r\n    /** zoom camera**/\r\n    zoomCamera(e){\r\n        const delta = -Math.sign(e.deltaY);\r\n        const zoomIntensity = 0.1\r\n        const scale = (this.state.scale) + (delta*zoomIntensity);\r\n        const rect = this.network.current.getBoundingClientRect()\r\n        this.setState({scale: scale, zoomMouseX: e.clientX -rect.left, zoomMouseY: e.clientY- rect.top});\r\n    }\r\n\r\n    /** Resets camera to default position**/\r\n    resetCamera(){\r\n        this.setState({offsetX:0,offsetY:0, scale: 1, mouseX: this.state.width/2, mouseY:this.state.height/2})\r\n    }\r\n\r\n    /**\r\n     * Saves the network as a file\r\n     * @param type string: the extension type to save the file as\r\n     */\r\n    saveAs(type){\r\n        var link = document.createElement(\"a\");\r\n        link.download = \"Network.\" + type;\r\n        document.body.appendChild(link);\r\n\r\n        if(type === \"csv\"){\r\n            alert(\"csv format networks download is not supported yet\")\r\n            // let csvContent = \"data:text/csv;charset=utf-8,\";\r\n            // csvContent += \"Nothing here yet\";\r\n            // link.href = csvContent;\r\n        } else{\r\n            const canvas = this.network.current;\r\n            link.href = canvas.toDataURL(\"network/\"+type);\r\n        }\r\n        link.click();\r\n        document.body.removeChild(link)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas ref = {this.network} style = {{backgroundColor: \"rgba(255,255,255,0.5)\", outline: \"1px solid blue\"}}\r\n                        onMouseLeave = {(e) => this.setDrag(e,false)}\r\n                        onMouseDown = {(e) => this.setDrag(e,true)}\r\n                        onMouseUp = {(e) => this.setDrag(e,false)}\r\n                        onMouseMove = {(e) => this.updateCamera(e)}\r\n                        onWheel = {(e) => this.zoomCamera(e)}\r\n                />\r\n                <div className = \"dropdown\"\r\n                    title = \"Save as\"\r\n                    style = {{\r\n                    cursor: \"pointer\",\r\n                    width: 10,\r\n                    height: 10,\r\n                    position: \"absolute\",\r\n                    top:this.state.height -36,\r\n                    left: this.state.width-47}}>\r\n                    <IonButton\r\n                        class = \"no-ripple\"\r\n                        fill = \"clear\">\r\n                    <IonIcon\r\n                        title = {false}\r\n                        size = \"large\"\r\n                        color = \"primary\"\r\n                        icon={save}/>\r\n                    </IonButton>\r\n                    <div className = \"dropdown-content\" style = {{top: -85}}>\r\n                        <a className = \"aFile\" onClick = {() => this.saveAs(\"csv\")}>.csv</a>\r\n                        <a className = \"aFile\" onClick = {() => this.saveAs(\"png\")}>.png</a>\r\n                        <a className = \"aFile\" onClick = {() => this.saveAs(\"jpg\")}>.jpg</a>\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    title = \"Reset camera to default\"\r\n                    style = {{\r\n                    cursor: \"pointer\",\r\n                    width: 10,\r\n                    height: 10,\r\n                    position: \"absolute\",\r\n                    top:this.state.height -36,\r\n                    left: this.state.width-85,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.resetCamera()}\r\n                    >\r\n                    <IonIcon\r\n                        size = \"large\"\r\n                        title = {false}\r\n                        color = \"primary\"\r\n                        icon = {cameraReverse}>\r\n                    </IonIcon>\r\n                    </IonButton>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NetworkVisualizer","import React from \"react\";\r\nimport * as THREE from \"three\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\"\r\nimport Network from \"./Network\";\r\n\r\nimport {IonButton, IonIcon} from \"@ionic/react\";\r\nimport {cameraReverse, save} from \"ionicons/icons\";\r\n\r\nimport \"./networkVisualizer.css\";\r\n\r\n\r\nclass NetworkVisualizer3D extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            width: 0,\r\n            height: 0,\r\n            network: null,\r\n            spheres: [],\r\n            lines : [],\r\n            scene : null,\r\n            camera: null,\r\n            renderer: null,\r\n            controls: null,\r\n        }\r\n        this.frameID = 0\r\n        this.heightConstant= 8.5/10\r\n        this.widthConstant = 7/10\r\n        this.minheight = 420\r\n        this.network3D = React.createRef()\r\n        this.networkData = this.props.networkData\r\n        this.animator = this.props.animator\r\n\r\n        this.renderer = null\r\n        this.controls = null\r\n        this.scene = null\r\n        this.camera = new THREE.PerspectiveCamera(75, 1, 0.1)\r\n        this.pointLight = new THREE.PointLight(0xffffff, 1);\r\n        this.pointLight.position.set(1,1,2)\r\n        this.camera.add(this.pointLight)\r\n\r\n        this.spheres = []\r\n        this.lines = []\r\n\r\n        this.resize = this.resize.bind(this);\r\n    }\r\n\r\n\r\n    async componentDidMount(){\r\n        //set up default constants and what not\r\n        const w = window.innerWidth * this.widthConstant\r\n        const h = window.innerHeight * this.heightConstant\r\n        this.network3D.current.width = w\r\n        this.network3D.current.height = h\r\n\r\n        await this.props.parent.resetAnimationLogic() //clear any animations loaded when changing network visualizations\r\n        this.networkData.set3D(true)\r\n        this.networkData.createRandomNetwork()\r\n        const network = this.networkData\r\n\r\n\r\n        //set 3D graphics variables\r\n        this.renderer = new THREE.WebGLRenderer({canvas: this.network3D.current, alpha:true})\r\n        this.renderer.setSize(w, h)\r\n        this.camera.aspect = (w/h)\r\n        this.controls = new OrbitControls(this.camera, this.network3D.current)\r\n        this.controls.target.set( w/2, h/2, h/2);\r\n        this.camera.position.set(w/2, h/2, 1.7*h)\r\n        this.controls.update()\r\n\r\n        //setup initial scene\r\n        this.resetSceneFromData(w, h)\r\n\r\n\r\n        this.renderer.render(this.scene, this.camera)\r\n\r\n\r\n        //add listeners and set state\r\n        window.addEventListener(\"resize\", this.resize)\r\n        this.frameID = window.requestAnimationFrame(() => this.animate())\r\n        this.setState({width: w, height: h})\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resize)\r\n        window.cancelAnimationFrame(this.frameID)\r\n        if(this.renderer !== null) this.renderer = null; //destroy the webgl context\r\n        if(this.network3D.current != null) this.network3D.current = null //destroy webgl context\r\n    }\r\n\r\n    animate(){\r\n        if(this.networkData !== null && this.network3D.current !== null){\r\n            if(this.networkData.shouldReset()){\r\n                this.networkData.createRandomNetwork()\r\n                this.resetSceneFromData(this.state.width, this.state.height)\r\n            } else if (this.networkData.shouldUpdate){\r\n                this.updateScene()\r\n                this.networkData.shouldUpdate = false\r\n            } else if (this.networkData.shouldResizeVertex()){\r\n                this.networkData.applyVertexSize()\r\n                this.updateScene()\r\n            } else if (this.networkData.shouldRecolor()){\r\n                this.networkData.applyColorGradient()\r\n                this.updateScene()\r\n            }\r\n            this.renderer.render(this.scene, this.camera)\r\n            this.frameID = window.requestAnimationFrame(() => this.animate())\r\n        }\r\n    }\r\n\r\n    resetSceneFromData(w, h){\r\n        this.scene = new THREE.Scene()\r\n        this.scene.add(this.camera)\r\n        const spheres = []\r\n        for(let i = 0; i < this.networkData.vertices.length; i++){\r\n            const v = this.networkData.vertices[i]\r\n            var geometrySphere = new THREE.SphereGeometry(v.size, 4, 4)\r\n            var materialSphere = new THREE.MeshLambertMaterial({color: new THREE.Color(v.color)})\r\n            var sphere = new THREE.Mesh(geometrySphere, materialSphere);\r\n\r\n            sphere.position.set(v.x* w, v.y*h, v.z*h)\r\n            sphere.scale.set(1+v.size/5, 1+v.size/5, 1+v.size/5)\r\n            spheres.push(sphere)\r\n            this.scene.add(sphere)\r\n        }\r\n\r\n        const lines = []\r\n        for(let j = 0; j < this.networkData.edges.length; j++){\r\n            const e = this.networkData.edges[j]\r\n            const v = this.networkData.vertices\r\n            var linePoints = []\r\n\r\n            linePoints.push(spheres[e.start].position)\r\n            linePoints.push(spheres[e.end].position)\r\n            var geometry = new THREE.BufferGeometry().setFromPoints(linePoints)\r\n\r\n            const colors = []\r\n            const edgecolors = this.getEdgeColors(e)\r\n            for(let i = 0; i < edgecolors.length; i++){\r\n                edgecolors[i] = new THREE.Color(edgecolors[i])\r\n                colors.push(edgecolors[i].r, edgecolors[i].g, edgecolors[i].b);\r\n            }\r\n\r\n            geometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3))\r\n\r\n            var material = new THREE.LineBasicMaterial({vertexColors: true});\r\n            material.opacity = 0.1\r\n            var line = new THREE.Line(geometry, material)\r\n            this.scene.add(line)\r\n            lines.push(line)\r\n        }\r\n        this.spheres = spheres\r\n        this.lines = lines\r\n    }\r\n\r\n    updateScene(){\r\n        const h = Math.max(window.innerHeight *this.heightConstant, this.minheight)\r\n        const w = window.innerWidth  * this.widthConstant\r\n        for(let i = 0; i < this.networkData.vertices.length; i++){\r\n            const v = this.networkData.vertices[i]\r\n            this.spheres[i].position.set(v.x*w, v.y*h, v.z*h);\r\n            this.spheres[i].scale.set(1+v.size/5, 1+v.size/5, 1+v.size/5)\r\n            this.spheres[i].material.color.set(v.color);\r\n        }\r\n\r\n        for(let j = 0; j < this.networkData.edges.length; j++){\r\n            const e = this.networkData.edges[j]\r\n\r\n            const colors = []\r\n            const edgecolors = this.getEdgeColors(e)\r\n            for(let i = 0; i < edgecolors.length; i++){\r\n                edgecolors[i] = new THREE.Color(edgecolors[i])\r\n                colors.push(edgecolors[i].r, edgecolors[i].g, edgecolors[i].b);\r\n            }\r\n            this.lines[j].geometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3))\r\n\r\n\r\n            var linePoints = []\r\n            linePoints.push(this.spheres[e.start].position)\r\n            linePoints.push(this.spheres[e.end].position)\r\n\r\n\r\n            this.lines[j].geometry.setFromPoints(linePoints)\r\n            this.lines[j].geometry.attributes.position.needsUpdate = true;\r\n\r\n            // this.lines[j].material.color.set(this.networkData.edges[j].color);\r\n        }\r\n    }\r\n\r\n    getEdgeColors(edge){\r\n        if(Array.isArray(edge.color)){\r\n            return edge.color\r\n        } else{\r\n            return [edge.color, edge.color]\r\n        }\r\n    }\r\n\r\n    resize(){\r\n        const h = Math.max(window.innerHeight *this.heightConstant, this.minheight)\r\n        const w = window.innerWidth  * this.widthConstant\r\n        if (this.network3D.current != null){\r\n            this.network3D.current.width = w\r\n            this.network3D.current.height = h\r\n            this.camera.aspect = w/h\r\n            this.renderer.setSize(w, h)\r\n            this.controls.target.set(w/2, h/2, h/2)\r\n            this.controls.update()\r\n            this.networkData.shouldUpdate = true\r\n            this.setState({height: h, width: w})\r\n        }\r\n\r\n    }\r\n\r\n    resetCamera(){\r\n        const h = Math.max(window.innerHeight *this.heightConstant, this.minheight)\r\n        const w = window.innerWidth  * this.widthConstant\r\n        this.camera.position.set(w/2, h/2, 1.7*h)\r\n        this.controls.target.set( w/2, h/2, h/2);\r\n        this.controls.update()\r\n    }\r\n\r\n    saveAs(type){\r\n        alert(\"Saving not yet supported for 3D networks\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas ref = {this.network3D}\r\n                        style = {{outline: \"1px solid blue\",\r\n                        backgroundColor: \"black\"\r\n                        }}/>\r\n                <div className = \"dropdown\"\r\n                    title = \"Save as\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:this.state.height -36,\r\n                        left: this.state.width-47}}>\r\n                    <IonButton\r\n                        class = \"no-ripple\"\r\n                        fill = \"clear\">\r\n                        <IonIcon\r\n                            title = {false}\r\n                            size = \"large\"\r\n                            color = \"primary\"\r\n                            icon={save}/>\r\n                    </IonButton>\r\n                    <div className = \"dropdown-content\" style = {{top: -85}}>\r\n                        <a className = \"aFile\" onClick = {() => this.saveAs(\"csv\")}>.csv</a>\r\n                        <a className = \"aFile\" onClick = {() => this.saveAs(\"png\")}>.png</a>\r\n                        <a className = \"aFile\" onClick = {() => this.saveAs(\"jpg\")}>.jpg</a>\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    title = \"Reset camera to default\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:this.state.height -36,\r\n                        left: this.state.width-85,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.resetCamera()}\r\n                    >\r\n                        <IonIcon\r\n                            size = \"large\"\r\n                            title = {false}\r\n                            color = \"primary\"\r\n                            icon = {cameraReverse}>\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NetworkVisualizer3D","import React from \"react\";\r\nimport Vertex from \"../../datatypes/Vertex\";\r\nimport Edge from \"../../datatypes/Edge\";\r\n\r\nimport {IonButton, IonIcon} from \"@ionic/react\";\r\nimport {ellipse, move, analytics, expand, cameraReverse, save,\r\n    arrowUndoCircle, arrowRedoCircle, refreshCircle} from \"ionicons/icons\"\r\n\r\nconst MAXBUF = 10;\r\n\r\nclass NetworkCustom extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            width: 0,\r\n            height: 0,\r\n            drawTool: \"vertex\", // vertex, edge, select, move\r\n            offsetX : 0,\r\n            offsetY : 0,\r\n            scale: 1,\r\n            startDragX : null,\r\n            startDragY : null,\r\n            currentDragX: null,\r\n            currentDragY: null,\r\n            startDragVertex: null, // for edge tool\r\n            dragging: false,\r\n            selectBox: null,\r\n            selectedVertices : [],\r\n            currentBufferIndex: -1,\r\n        }\r\n        this.heightConstant= 8.5/10\r\n        this.widthConstant = 7/10\r\n        this.minheight = 420\r\n        this.network = React.createRef()\r\n        this.boundingBoxes = [];\r\n        this.edges = [];\r\n        this.buffer = [];\r\n\r\n        this.resize = this.resize.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const w = window.innerWidth * this.widthConstant\r\n        const h = window.innerHeight * this.heightConstant\r\n        this.network.current.width = w\r\n        this.network.current.height = h\r\n        window.addEventListener(\"resize\", this.resize)\r\n        window.requestAnimationFrame(() => this.animate());\r\n        this.props.parent.setState({custom: true}) //disable animations for now\r\n        this.addAction();\r\n        this.setState({width: w, height: h})\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.parent.setState({custom: false}) //re-enable animations since we disabled them\r\n        window.removeEventListener(\"resize\", this.resize)\r\n        window.cancelAnimationFrame(this.maxFrame);\r\n    }\r\n\r\n    resize(){\r\n        const h = Math.max(window.innerHeight *this.heightConstant, this.minheight)\r\n        const w = window.innerWidth  * this.widthConstant\r\n        if (this.network.current !== null){\r\n            this.network.current.width = w\r\n            this.network.current.height = h\r\n            this.setState({height: h, width: w})\r\n        }\r\n    }\r\n\r\n    animate(){\r\n        if(this.state.dragging) this.processDrag()\r\n        this.drawNetwork()\r\n        if(this.state.dragging) this.drawTools() //some tools leave marks as they are being operated\r\n        this.maxFrame = window.requestAnimationFrame(() => this.animate())\r\n    }\r\n\r\n    drawNetwork(){\r\n        const ctx = this.network.current.getContext(\"2d\");\r\n        ctx.clearRect(0, 0, this.state.width, this.state.height)\r\n        const w = this.state.width;\r\n        const h = this.state.height;\r\n        ctx.save();\r\n        ctx.translate(this.state.offsetX, this.state.offsetY)//translate by the offsets\r\n        ctx.scale(this.state.scale, this.state.scale);\r\n\r\n        for(let i = 0; i < this.state.selectedVertices.length; i++){\r\n            const s = this.state.selectedVertices[i];\r\n            const v = this.boundingBoxes[s].vertex\r\n            ctx.globalAlpha = 1.0\r\n            ctx.beginPath()\r\n\r\n            ctx.fillStyle = \"rgb(0, 255, 0)\"\r\n            ctx.arc(v.x*w ,\r\n                v.y*h,\r\n                v.size + 1, 0, Math.PI*2)\r\n            ctx.fill();\r\n            ctx.closePath()\r\n        }\r\n\r\n\r\n        for(let i = 0; i < this.boundingBoxes.length; i++){\r\n            const v = this.boundingBoxes[i].vertex\r\n            ctx.globalAlpha = 1.0\r\n            ctx.beginPath()\r\n            ctx.fillStyle = v.color\r\n            ctx.arc(v.x*w ,\r\n                v.y*h,\r\n                v.size, 0, Math.PI*2)\r\n            ctx.fill();\r\n            ctx.closePath()\r\n        }\r\n        for(let j = 0; j < this.edges.length; j++){\r\n            ctx.beginPath();\r\n            const index1 = this.edges[j].start;\r\n            const index2 = this.edges[j].end;\r\n            ctx.moveTo(this.boundingBoxes[index1].vertex.x * w ,\r\n                this.boundingBoxes[index1].vertex.y * h )\r\n            ctx.lineTo(this.boundingBoxes[index2].vertex.x * w ,\r\n                this.boundingBoxes[index2].vertex.y * h)\r\n            ctx.globalAlpha = this.edges[j].alpha\r\n            ctx.strokeStyle = this.edges[j].color;\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n        }\r\n\r\n        if(this.state.selectBox !== null){\r\n            const sx = this.state.selectBox.startX;\r\n            const sy = this.state.selectBox.startY;\r\n            const ex = this.state.selectBox.endX;\r\n            const ey = this.state.selectBox.endY;\r\n            ctx.save();\r\n\r\n            ctx.beginPath();\r\n            ctx.setLineDash([5,15]);\r\n            ctx.globalAlpha = 1\r\n            ctx.rect(\r\n                sx * w,\r\n                sy * h,\r\n                (ex-sx) * w ,\r\n                (ey-sy) * h);\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n            ctx.restore();\r\n        }\r\n        ctx.scale(1/this.state.scale, 1/this.state.scale) //scale by zoom\r\n        ctx.translate(-this.state.offsetX, -this.state.offsetY) //untranslate by the offsets\r\n        ctx.restore();\r\n\r\n\r\n    }\r\n\r\n    drawTools(){\r\n        if(this.state.drawTool === \"edge\"){\r\n            const v = this.state.startDragVertex\r\n            if(v !== null){\r\n                const coords = this.objectSpaceToCanvasSpace(\r\n                    this.boundingBoxes[v].vertex.x,\r\n                    this.boundingBoxes[v].vertex.y,\r\n                    this.state.width,\r\n                    this.state.height,\r\n                )\r\n                const x = coords.x\r\n                const y = coords.y\r\n                const ctx = this.network.current.getContext(\"2d\");\r\n                ctx.save();\r\n                ctx.beginPath();\r\n                ctx.moveTo(x, y);\r\n                ctx.setLineDash([5,15])\r\n                ctx.lineTo(this.state.currentDragX, this.state.currentDragY);\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n                ctx.restore();\r\n            }\r\n\r\n        } else if(this.state.drawTool === \"select\" && this.state.selectBox === null){\r\n            const ctx = this.network.current.getContext(\"2d\");\r\n            const sx = this.state.startDragX;\r\n            const sy = this.state.startDragY;\r\n            const ex = this.state.currentDragX;\r\n            const ey = this.state.currentDragY;\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.setLineDash([5,15]);\r\n            ctx.rect(sx,sy,ex-sx,ey - sy)\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n            ctx.restore();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Handles mouse down events based on the currently selected drawing tool\r\n     * @param e mouse event\r\n     */\r\n    processDownOutcome(e){\r\n        this.checkRemoveSelectedBox();\r\n\r\n        const rect = this.network.current.getBoundingClientRect();\r\n        const x = e.clientX; const y = e.clientY;\r\n        const canvasX = x - rect.left;\r\n        const canvasY = y - rect.top;\r\n        const w = this.network.current.width;\r\n        const h = this.network.current.height;\r\n        if(this.state.drawTool === \"vertex\"){\r\n            this.createVertex(canvasX, canvasY, w, h);\r\n        } else if (this.state.drawTool === \"edge\"\r\n            || this.state.drawTool === \"select\"\r\n            || this.state.drawTool === \"move\") {\r\n            this.setState({\r\n                dragging: true,\r\n                startDragX: canvasX,\r\n                startDragY: canvasY,\r\n                currentDragX: canvasX,\r\n                currentDragY: canvasY});\r\n        }\r\n    }\r\n\r\n    processDrag(){\r\n        if(this.state.selectBox !== null && this.state.drawTool === \"select\"){\r\n            //we should move the select box and its contents if it is selected with the mouse\r\n            const coords1 = this.canvasSpaceToObjectSpace(\r\n                this.state.startDragX,\r\n                this.state.startDragY,\r\n                this.state.width,\r\n                this.state.height)\r\n            const coords2 = this.canvasSpaceToObjectSpace(\r\n                this.state.currentDragX,\r\n                this.state.currentDragY,\r\n                this.state.width,\r\n                this.state.height\r\n            )\r\n\r\n            const sx = coords1.x; const sy = coords1.y;\r\n            const cx = coords2.x; const cy = coords2.y;\r\n            if(sx > this.state.selectBox.startX\r\n                && sx <this.state.selectBox.endX\r\n                && sy > this.state.selectBox.startY\r\n                && sy < this.state.selectBox.endY){\r\n\r\n                const deltaX = cx - sx\r\n                const deltaY = cy - sy\r\n                this.updateSelectedCoords(deltaX, deltaY);\r\n                // this.updateSelectedCoordsVertices();\r\n                this.setState({\r\n                    startDragX: this.state.currentDragX,\r\n                    startDragY : this.state.currentDragY\r\n                });\r\n            } else{\r\n                this.removeSelectedVertices();\r\n            }\r\n        }else if(this.state.drawTool === \"edge\"){\r\n            const vertex = this.nearbyVertexExists(\r\n                this.state.currentDragX,\r\n                this.state.currentDragY,\r\n                this.state.width, this.state.height).vertex\r\n            if(vertex === null) return;\r\n            if(this.state.startDragVertex === null){\r\n                this.setState({\r\n                    startDragVertex: vertex,\r\n                    startDragX: this.state.currentDragX,\r\n                    startDragY: this.state.currentDragY});\r\n            } else if(this.state.startDragVertex !== vertex){\r\n                this.createEdge(this.state.startDragVertex, vertex);\r\n                this.setState({\r\n                    startDragVertex: vertex,\r\n                    startDragX : this.state.currentDragX,\r\n                    startDragY : this.state.currentDragY,\r\n                })\r\n            }\r\n        } else if(this.state.drawTool === \"move\"){\r\n            const deltaX = this.state.startDragX - this.state.currentDragX;\r\n            const deltaY = this.state.startDragY - this.state.currentDragY;\r\n            const offsetX = this.state.offsetX - deltaX/this.state.scale;\r\n            const offsetY = this.state.offsetY - deltaY/this.state.scale;\r\n            this.setState({\r\n                offsetX: offsetX,\r\n                offsetY: offsetY,\r\n                startDragX: this.state.currentDragX,\r\n                startDragY: this.state.currentDragY\r\n            })\r\n        }\r\n    }\r\n\r\n    async processDragOutcome(){\r\n        if(this.state.drawTool === \"select\" && this.state.selectBox === null\r\n            && this.state.currentDragX !== this.state.startDragX\r\n            && this.state.currentDragY !== this.state.startDragY){\r\n            const coords1 = this.canvasSpaceToObjectSpace(\r\n                this.state.startDragX,\r\n                this.state.startDragY,\r\n                this.state.width,\r\n                this.state.height);\r\n            const coords2 = this.canvasSpaceToObjectSpace(\r\n                this.state.currentDragX,\r\n                this.state.currentDragY,\r\n                this.state.width,\r\n                this.state.height\r\n            )\r\n            const x1 = coords1.x; const x2 = coords2.x;\r\n            const y1 = coords1.y; const y2 = coords2.y;\r\n            const selectBox = {\r\n                startX:  Math.min(x1, x2),\r\n                startY: Math.min(y1, y2),\r\n                endX : Math.max(x1, x2),\r\n                endY: Math.max(y1, y2)}\r\n\r\n            await this.selectVerticesFromBox(selectBox);\r\n            await this.setState({\r\n                selectBox: selectBox});\r\n            this.addAction();\r\n        }\r\n        else if(this.state.selectBox !== null){\r\n            this.addAction();\r\n        }\r\n        this.clearDragging()\r\n    }\r\n\r\n    /**\r\n     * Creates a vertex object and its corresponding bounding box\r\n     * @param canvasX canvas space x coordinate\r\n     * @param canvasY canvas space y coordinate\r\n     * @param w width of the canvas\r\n     * @param h height of the canvas\r\n     */\r\n    createVertex(canvasX, canvasY, w, h){\r\n        if(this.nearbyVertexExists(canvasX, canvasY, w, h).value) return\r\n\r\n        //otherwise create a vertex and boundin box in object space\r\n        const v = this.canvasSpaceToObjectSpace(canvasX, canvasY, w, h);\r\n        const vx = v.x;\r\n        const vy = v.y;\r\n        const vertex = new Vertex(vx, vy);\r\n        const max = this.canvasSpaceToObjectSpace(\r\n            canvasX + vertex.size + 10,\r\n            canvasY + vertex.size + 10,\r\n            w,\r\n            h)\r\n        const maxX = max.x;\r\n        const maxY = max.y;\r\n        const min = this.canvasSpaceToObjectSpace(\r\n            canvasX - vertex.size - 10,\r\n            canvasY - vertex.size - 10,\r\n            w,\r\n            h)\r\n        const minX = min.x;\r\n        const minY  = min.y;\r\n        const box = {\r\n            vertex: vertex,\r\n            box: {maxX: maxX, maxY: maxY, minX: minX, minY : minY},\r\n        }\r\n\r\n        this.boundingBoxes.push(box)\r\n        this.addAction();\r\n    }\r\n\r\n    /**\r\n     * Creates an edge between v1 and v2 if non already exists between them\r\n     * @param v1 first enpoint\r\n     * @param v2 second endpoint\r\n     */\r\n    createEdge(v1, v2){\r\n        for(let i = 0; i < this.edges.length; i++){\r\n            const e = this.edges[i];\r\n            if(e.start === v1 && e.start === v2){\r\n                return\r\n            }\r\n        }\r\n        const e = new Edge(v1, v2);\r\n        this.edges.push(e);\r\n        this.addAction();\r\n    }\r\n\r\n    /**\r\n     * Updates the selected vertices upon creation of a select box\r\n     * @param box\r\n     * @returns {[]}\r\n     */\r\n    async selectVerticesFromBox(box){\r\n        const selectedVertices = [];\r\n        for(let i = 0; i < this.boundingBoxes.length; i++){\r\n            const v = this.boundingBoxes[i].vertex;\r\n            if(v.x < box.endX && v.x > box.startX && v.y < box.endY && v.y > box.startY){\r\n                selectedVertices.push(i)\r\n            }\r\n        }\r\n        await this.setState({selectedVertices: selectedVertices})\r\n    }\r\n\r\n\r\n    /**\r\n     * Updates the coordinates of the select box\r\n     * and all of its dependant selected vertices by the specified amounts\r\n     * @param deltaX the amount to move in the X direction in object space\r\n     * @param deltaY the amount to move in the Y direction in object space\r\n     */\r\n    updateSelectedCoords(deltaX, deltaY){\r\n        const selectBox = this.state.selectBox;\r\n\r\n        selectBox.startX += deltaX\r\n        selectBox.startY += deltaY;\r\n        selectBox.endX += deltaX;\r\n        selectBox.endY += deltaY;\r\n        const selectedVertices = this.state.selectedVertices\r\n        for(let i = 0; i < selectedVertices.length; i++){\r\n            const s = selectedVertices[i];\r\n            const v = this.boundingBoxes[s].vertex;\r\n            v.x += deltaX;\r\n            v.y += deltaY;\r\n            const b = this.boundingBoxes[s].box;\r\n            b.maxX += deltaX;\r\n            b.minX += deltaX;\r\n            b.minY += deltaY;\r\n            b.maxY += deltaY;\r\n        }\r\n\r\n        this.setState({selectBox: selectBox})\r\n    }\r\n\r\n    /**\r\n     * Checks to see if we should remove the selected box if it exists\r\n     */\r\n    checkRemoveSelectedBox(){\r\n        if(this.state.drawTool !== \"move\" && this.state.drawTool !== \"select\" && this.state.selectBox !== null){\r\n            this.removeSelectedVertices();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the selected vertices\r\n     */\r\n    removeSelectedVertices(){\r\n        this.setState({selectBox: null, selectedVertices: []})\r\n    }\r\n\r\n    /**\r\n     * Helper method to check whether or not there is a vertices near the selected canvas coords\r\n     * within the canvas bounds w, h.\r\n     * Returns a value of true and a vertex if one is found otherwise false and null.\r\n     * @param canvasX canvas space x coordinate\r\n     * @param canvasY canvas space y coordinate\r\n     * @param w width of the canvas\r\n     * @param h height of the canvas\r\n     * @returns {{vertex: Vertex, value: boolean}}\r\n     */\r\n    nearbyVertexExists(canvasX, canvasY, w, h){\r\n        let nearbyAlreadyExists = false\r\n        let vertex = null\r\n        for(let i = 0; i < this.boundingBoxes.length; i++){\r\n            const box = this.boundingBoxes[i].box;\r\n            const coords = this.canvasSpaceToObjectSpace(canvasX, canvasY, w, h)\r\n            if(this.inBox(box, coords.x, coords.y)){\r\n                nearbyAlreadyExists = true;\r\n                vertex = i\r\n                break;\r\n            }\r\n        }\r\n        return {value: nearbyAlreadyExists, vertex: vertex}\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param e\r\n     */\r\n    handleMouseMove(e){\r\n        if(this.state.dragging){\r\n            const rect = this.network.current.getBoundingClientRect();\r\n            const x = e.clientX -rect.left; const y = e.clientY-rect.top;\r\n            this.setState({currentDragX: x, currentDragY : y});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears any react states used for tracking dragging\r\n     * @param e\r\n     */\r\n    clearDragging(){\r\n        this.setState({\r\n            startDragX: null,\r\n            startDragY: null,\r\n            currentDragX: null,\r\n            currentDragY: null,\r\n            dragging:false,\r\n            startDragVertex: null})\r\n    }\r\n\r\n    inBox(box, x, y){\r\n        return x < box.maxX && x > box.minX && y < box.maxY && y > box.minY;\r\n    }\r\n\r\n    /**\r\n     * transforms a set of coordinates from canvas space to object space\r\n     * @param x x coordinate to transform\r\n     * @param y y coordinate to transform\r\n     * @param w width of the canvas\r\n     * @param h height of the canvas\r\n     * @returns {{x: number, y: *}}\r\n     */\r\n    canvasSpaceToObjectSpace(x, y, w, h){\r\n        return {x : (x-this.state.offsetX)*(1/this.state.scale)/w, y: (y - this.state.offsetY)*(1/this.state.scale)/h}\r\n    }\r\n\r\n    /**\r\n     * transforms a set of coordinates from object space to canvas space\r\n     * @param x x coordinate to transform\r\n     * @param y y coordinate to transform\r\n     * @param w width of the canvas\r\n     * @param h height of the canvas\r\n     * @returns {{x: number, y: *}}\r\n     */\r\n    objectSpaceToCanvasSpace(x, y, w, h){\r\n        return {x : x*w*this.state.scale+ this.state.offsetX, y: y*this.state.scale*h +this.state.offsetY}\r\n    }\r\n\r\n\r\n\r\n    /** zoom camera**/\r\n    zoomCamera(e){\r\n        const delta = -Math.sign(e.deltaY);\r\n        const zoomIntensity = 0.1\r\n        const scale = (this.state.scale) + (delta*zoomIntensity);\r\n        const rect = this.network.current.getBoundingClientRect()\r\n        this.setState({scale: scale, zoomMouseX: e.clientX -rect.left, zoomMouseY: e.clientY- rect.top});\r\n    }\r\n\r\n    /**\r\n     * Resets camera zoom and offset\r\n     */\r\n    resetCamera(){\r\n        this.setState({offsetX: 0, offsetY: 0, scale: 1})\r\n    }\r\n\r\n    /**\r\n     * Saves the network/canvas as the given file type;\r\n     * @param type\r\n     */\r\n    saveAs(type){\r\n        //TODO\r\n    }\r\n\r\n    /**\r\n     * Copies the current object space of the canvas\r\n     * @returns {{boundingBoxes: [], edges: [], selectBox: {}}}\r\n     */\r\n    copyState(){\r\n        const copyBoundBoxes = [];\r\n        for(let i = 0; i < this.boundingBoxes.length; i++){\r\n            const v = this.boundingBoxes[i].vertex.copyVertex();\r\n            const bb = this.boundingBoxes[i].box\r\n            copyBoundBoxes.push({vertex: v, box: bb});\r\n        }\r\n        const copyEdges = [];\r\n        for(let j = 0; j < this.edges.length; j++){\r\n            const e = this.edges[j].copyEdge();\r\n            copyEdges.push(e);\r\n        }\r\n        let selectBox = {}\r\n        if(this.state.selectBox === null){\r\n            selectBox = null\r\n        } else{\r\n            selectBox.startX = this.state.selectBox.startX;\r\n            selectBox.startY = this.state.selectBox.startY;\r\n            selectBox.endX = this.state.selectBox.endX;\r\n            selectBox.endY = this.state.selectBox.endY;\r\n        }\r\n        const selectedVertices = [];\r\n        for(let i = 0; i < this.state.selectedVertices.length; i++){\r\n            selectedVertices.push(this.state.selectedVertices[i])\r\n        }\r\n        return {boundingBoxes:  copyBoundBoxes, edges: copyEdges, selectBox: selectBox, selectedVertices: selectedVertices};\r\n    }\r\n\r\n    // /**\r\n    //  * undoes the last action stored in the action buffer\r\n    //  */\r\n    // undoAction(){\r\n    //     const index = this.state.currentBufferIndex - 1;\r\n    //     if(index < 0) return;\r\n    //     this.boundingBoxes = this.buffer[index].action.boundingBoxes;\r\n    //     this.edges = this.buffer[index].action.edges;\r\n    //     this.setState({\r\n    //         selectedVertices: this.buffer[index].action.selectedVertices,\r\n    //         selectBox: this.buffer[index].action.selectBox,\r\n    //         currentBufferIndex: index\r\n    //     });\r\n    //     this.forceUpdate();\r\n    // }\r\n    //\r\n    // /**\r\n    //  * redoes the next action stored in the action buffer\r\n    //  */\r\n    // redoAction(){\r\n    //     const index = this.state.currentBufferIndex + 1;\r\n    //     if(index > this.buffer.length -1) return;\r\n    //     this.boundingBoxes = this.buffer[index].action.boundingBoxes;\r\n    //     this.edges = this.buffer[index].action.edges;\r\n    //     this.setState({\r\n    //         selectedVertices: this.buffer[index].action.selectedVertices,\r\n    //         selectBox: this.buffer[index].action.selectBox,\r\n    //         currentBufferIndex: index\r\n    //     });\r\n    // }\r\n\r\n    /**\r\n     * adds an animation object to the custom network buffer\r\n     */\r\n    addAction(){\r\n        // const action = this.copyState();\r\n        // if(this.state.currentBufferIndex !== 0 && this.state.currentBufferIndex !== this.buffer.length -1){\r\n        //     const newBuffer =[]\r\n        //     for(let i = 0; i < this.state.currentBufferIndex; i++){\r\n        //         newBuffer.push(this.buffer[i])\r\n        //     }\r\n        //     this.buffer = newBuffer;\r\n        //\r\n        // }\r\n        // this.buffer.push({action: action});\r\n        // if(this.buffer.length > MAXBUF){\r\n        //     this.buffer = this.buffer.slice(1, this.buffer.length);\r\n        // }\r\n        // console.log(\" \")\r\n        // for(let i = 0; i < this.buffer.length; i++){\r\n        //     console.log(this.buffer[i])\r\n        // }\r\n        // this.setState({currentBufferIndex: this.state.currentBufferIndex+1});\r\n    }\r\n\r\n    /**\r\n     * Clears the object space of the canvas\r\n     */\r\n    clearCanvas(){\r\n        this.buffer =[];\r\n        this.boundingBoxes = [];\r\n        this.edges = [];\r\n        this.setState({selectBox: null, selectedVertices: []});\r\n        this.clearDragging() //just in case\r\n        this.resetCamera()\r\n    }\r\n\r\n    /**\r\n     * Saves the network as a file\r\n     * @param type string: the extension type to save the file as\r\n     */\r\n    saveAs(type){\r\n        var link = document.createElement(\"a\");\r\n        link.download = \"Network.\" + type;\r\n        document.body.appendChild(link);\r\n\r\n        if(type === \"csv\"){\r\n            alert(\"csv format networks download is not supported yet\")\r\n            // let csvContent = \"data:text/csv;charset=utf-8,\";\r\n            // csvContent += \"Nothing here yet\";\r\n            // link.href = csvContent;\r\n        } else{\r\n            const canvas = this.network.current;\r\n            link.href = canvas.toDataURL(\"network/\"+type);\r\n        }\r\n        link.click();\r\n        document.body.removeChild(link)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas ref = {this.network}\r\n                        style = {{backgroundColor: \"rgba(255,255,255,0.5)\",\r\n                            cursor: this.state.drawTool === \"move\"? \"move\":\r\n                                this.state.drawTool === \"select\"? \"cell\": \"default\",\r\n                            outline: \"1px solid blue\",\r\n                        }}\r\n                        onMouseDown= {(e) => this.processDownOutcome(e, true)}\r\n                        onMouseMove = {(e) => this.handleMouseMove(e)}\r\n                        onMouseUp = {(e) => this.processDragOutcome(e)}\r\n                        onMouseLeave = {() => this.clearDragging()}\r\n                        onWheel = {(e) => this.zoomCamera(e)}/>\r\n                <div className = \"dropdown\"\r\n                     title = \"Save as\"\r\n                     style = {{\r\n                         cursor: \"pointer\",\r\n                         width: 10,\r\n                         height: 10,\r\n                         position: \"absolute\",\r\n                         top:this.state.height -36,\r\n                         left: this.state.width-47}}>\r\n                    <IonButton\r\n                        class = \"no-ripple\"\r\n                        fill = \"clear\">\r\n                        <IonIcon\r\n                            title = {false}\r\n                            size = \"large\"\r\n                            color = \"primary\"\r\n                            icon={save}/>\r\n                    </IonButton>\r\n                    <div className = \"dropdown-content\" style = {{top: -85}}>\r\n                        <a className = \"aFile\" onClick = {() => this.saveAs(\"csv\")}>.csv</a>\r\n                        <a className = \"aFile\" onClick = {() => this.saveAs(\"png\")}>.png</a>\r\n                        <a className = \"aFile\" onClick = {() => this.saveAs(\"jpg\")}>.jpg</a>\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    title = \"Reset camera to default\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:this.state.height -36,\r\n                        left: this.state.width-85,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.resetCamera()}\r\n                    >\r\n                        <IonIcon\r\n                            size = \"large\"\r\n                            title = {false}\r\n                            color = \"primary\"\r\n                            icon = {cameraReverse}>\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </div>\r\n\r\n                <div\r\n                    title = \"Place vertex\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:this.state.height -36,\r\n                        left: 0,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.setState({drawTool : \"vertex\"})}\r\n                    >\r\n                        <IonIcon\r\n                            size = \"large\"\r\n                            title = {false}\r\n                            color = {this.state.drawTool === \"vertex\"?\"success\":\"primary\"}\r\n                            icon = {ellipse}>\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </div>\r\n                <div\r\n                    title = \"Connect vertices\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:this.state.height -36,\r\n                        left: 40,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.setState({drawTool : \"edge\"})}\r\n                    >\r\n                        <IonIcon\r\n                            size = \"large\"\r\n                            title = {false}\r\n                            color = {this.state.drawTool === \"edge\"?\"success\":\"primary\"}\r\n                            icon = {analytics}>\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </div>\r\n                <div\r\n                    title = \"Select & Move tool\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:this.state.height -36,\r\n                        left: 80,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.setState({drawTool : \"select\"})}\r\n                    >\r\n                        <IonIcon\r\n                            size = \"large\"\r\n                            title = {false}\r\n                            color = {this.state.drawTool === \"select\"?\"success\":\"primary\"}\r\n                            icon = {expand}>\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </div>\r\n                <div\r\n                    title = \"Move tool\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:this.state.height -36,\r\n                        left: 120,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.setState({drawTool : \"move\"})}\r\n                    >\r\n                        <IonIcon\r\n                            size = \"large\"\r\n                            title = {false}\r\n                            color = {this.state.drawTool === \"move\"?\"success\":\"primary\"}\r\n                            icon = {move}>\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </div>\r\n                {/*\r\n                <div\r\n                    title = \"Undo action\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:this.state.height -36,\r\n                        left: 160,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.undoAction()}\r\n                    >\r\n                        <IonIcon\r\n                            size = \"large\"\r\n                            title = {false}\r\n                            color = \"primary\"\r\n                            icon = {arrowUndoCircle}>\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </div>\r\n\r\n                <div\r\n                    title = \"Redo action\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:this.state.height -36,\r\n                        left: 200,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.redoAction()}\r\n                    >\r\n                        <IonIcon\r\n                            size = \"large\"\r\n                            title = {false}\r\n                            color = \"primary\"\r\n                            icon = {arrowRedoCircle}>\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </div> */}\r\n\r\n                <div\r\n                    title = \"Reset canvas\"\r\n                    style = {{\r\n                        cursor: \"pointer\",\r\n                        width: 10,\r\n                        height: 10,\r\n                        position: \"absolute\",\r\n                        top:0,\r\n                        left: this.state.width -50,\r\n                    }}>\r\n                    <IonButton fill = \"clear\"\r\n                               class = \"no-ripple\"\r\n                               onClick = {() => this.clearCanvas()}\r\n                    >\r\n                        <IonIcon\r\n                            size = \"large\"\r\n                            title = {false}\r\n                            color = \"primary\"\r\n                            icon = {refreshCircle}>\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NetworkCustom","import React from \"react\"\r\nimport {Route} from \"react-router-dom\";\r\nimport {NetworkCustom, NetworkVisualizer, NetworkVisualizer3D} from \"./index\";\r\nimport {IonCol} from \"@ionic/react\";\r\n\r\nclass Visualizer extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        return(\r\n            <IonCol size = \"9\">\r\n\r\n                <Route path = \"/Network-Analysis-Visualization/2d\" render = {() => <NetworkVisualizer\r\n                    settings = {this.props.parent.networkSettings}\r\n                    networkData = {this.props.parent.networkData}\r\n                    animator = {this.props.parent.animator}\r\n                    parent = {this.props.parent}/>}\r\n                />\r\n                <Route path = \"/Network-Analysis-Visualization/3d\" render = {() => <NetworkVisualizer3D\r\n                    settings = {this.props.parent.networkSettings}\r\n                    networkData = {this.props.parent.networkData}\r\n                    animator = {this.props.parent.animator}\r\n                    parent = {this.props.parent}/>}\r\n                />\r\n                <Route path = \"/Network-Analysis-Visualization/custom\" render = {() => <NetworkCustom\r\n                    parent = {this.props.parent}/>}\r\n\r\n                />\r\n\r\n            </IonCol>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Visualizer;","import AbstractLayoutAlgorithm from \"./AbstractLayoutAlgorithm\";\r\nimport Force from \"../../../datatypes/Force.js\"\r\nimport Vertex from \"../../../datatypes/Vertex.js\"\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\nconst ITERATIONS = 100;\r\n\r\n/**\r\n *\r\n */\r\nclass FruchtermanReingold extends AbstractLayoutAlgorithm{\r\n    constructor(){\r\n        super(\"Fruchterman Reingold\")\r\n        this.area = 1\r\n\r\n        //declare all algorithm settings\r\n\r\n        this.epsilon = AlgorithmSettingObject.newRangeSetting(\r\n            \"Convergence Bound\",\r\n            0.01,\r\n            1,\r\n            0.01,\r\n            0.5)\r\n\r\n        this.cTemp = AlgorithmSettingObject.newRangeSetting(\r\n            \"Initial Temperature Scaling\",\r\n            1,\r\n            3,\r\n            0.1,\r\n            2\r\n        )\r\n\r\n        this.tempHeuristic = AlgorithmSettingObject.newOptionSetting(\r\n            \"Temperature Cooling Heuristic\",\r\n            [\"Linear\", \"Exponential\", \"Directional\"],\r\n            \"Exponential\")\r\n\r\n        this.iterations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Maximum Iterations\",\r\n            100,\r\n            300,\r\n            1,\r\n            100)\r\n\r\n\r\n        this.settings.push([\r\n            this.epsilon,\r\n            this.cTemp,\r\n            this.tempHeuristic,\r\n            this.iterations]);\r\n\r\n        this.setRequiredProperty(null)\r\n\r\n    }\r\n\r\n    /**\r\n     * gets the settings of the fruchterman reingold algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    async getAnimations(vertices, edges, is3D){\r\n        const K = ITERATIONS;\r\n        const epsilon = this.epsilon.obj.value;\r\n        this.area = Math.sqrt(1000/(vertices.length))\r\n\r\n        let t = 1;\r\n        let temperature = this.cTemp.obj.value\r\n        const initialTemperature = temperature;\r\n        let temperatureList = [];\r\n        let previousAngles = [];\r\n        let animations = [];\r\n        let scalingFactor = [];\r\n\r\n        animations.push(vertices);\r\n        scalingFactor.push([0, 0, 0, 1, 1, 1]);\r\n\r\n        //apply forces to all vertices on each iteration\r\n        while(t < K){\r\n            let forceList = [];\r\n\r\n            //CALCULATE REPULSIVE FORCES\r\n            for(let i = 0; i < vertices.length; i++){\r\n                let f = new Force(0, 0, 0)\r\n\r\n                for(let j = 0; j < vertices.length; j++){\r\n                    if( i !== j){\r\n                        const delta = distance(vertices[i], vertices[j], is3D);\r\n                        const calcs = this.frepulse(vertices[i], vertices[j], delta, is3D)\r\n                        f.addVector(calcs)\r\n                    }\r\n                }\r\n                forceList.push(f)\r\n            }\r\n\r\n\r\n            //CALCULATE ATTRACTIVE FORCES\r\n            for(let i = 0; i < edges.length; i++){\r\n                const e = edges[i];\r\n                if(e.start === e.end) console.warn(\"vertex connected to itself\")\r\n                const delta = distance(vertices[e.start], vertices[e.end], is3D);\r\n                const calcs = this.fattract(vertices[e.start], vertices[e.end], delta, is3D)\r\n                const ncalcs = [calcs[0]*-1, calcs[1]*-1, calcs[2]*-1]\r\n\r\n                forceList[e.end].addVector(calcs);\r\n                forceList[e.start].addVector(ncalcs);\r\n            }\r\n\r\n\r\n            //update positions\r\n            const iterAnimations = [];\r\n            var minX = Infinity; var minY = Infinity; var minZ = Infinity;\r\n            var maxX = -Infinity; var maxY = -Infinity; var maxZ = -Infinity;\r\n            var maxForce = -Infinity;\r\n            const origin = new Vertex(0,0,0)\r\n\r\n            for(let i = 0; i < vertices.length; i++){\r\n                const forceNorm = distance(forceList[i], origin, is3D);\r\n                const unitvector = unitVector(forceList[i], origin, is3D);\r\n                const unitForce = new Force(unitvector[0], unitvector[1], unitvector[2]);\r\n                unitForce.setX(unitForce.x * Math.min(temperature, Math.abs(forceList[i].x)))\r\n                unitForce.setY(unitForce.y * Math.min(temperature, Math.abs(forceList[i].y)))\r\n                unitForce.setZ(unitForce.z * Math.min(temperature, Math.abs(forceList[i].z)))\r\n\r\n                iterAnimations.push(vertices[i].add(unitForce));\r\n                minX = Math.min(minX, iterAnimations[i].x); minY = Math.min(minY, iterAnimations[i].y);\r\n                minZ = Math.min(minZ, iterAnimations[i].z)\r\n                maxX = Math.max(maxX, iterAnimations[i].x); maxY = Math.max(maxY, iterAnimations[i].y);\r\n                maxZ = Math.max(maxZ, iterAnimations[i].z)\r\n                maxForce = Math.max(forceNorm)\r\n            }\r\n            scalingFactor.push([-minX, -minY, -minZ, 1/(maxX -minX), 1/(maxY - minY), 1/(maxZ - minZ)]);\r\n            animations.push(iterAnimations);\r\n            vertices = animations[animations.length -1];\r\n            temperature = this.cool(temperature,initialTemperature, K)\r\n            t += 1\r\n            if(maxForce < epsilon) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < animations.length; i++){\r\n            for(let j = 0; j < animations[i].length; j++){\r\n                animations[i][j].x = (animations[i][j].x + scalingFactor[i][0]) * scalingFactor[i][3];\r\n                animations[i][j].y = (animations[i][j].y + scalingFactor[i][1]) * scalingFactor[i][4];\r\n                animations[i][j].z = (animations[i][j].z + scalingFactor[i][2]) * scalingFactor[i][5];\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return animations;\r\n    }\r\n\r\n    cool(temperature, initial, iterations){\r\n        const heuristic  = this.tempHeuristic.obj.value;\r\n        if(heuristic === \"Linear\"){\r\n            return temperature - initial/iterations\r\n        }\r\n        if(heuristic === \"Exponential\"){\r\n            return 0.90*temperature\r\n        }\r\n        if(heuristic === \"Directinoal\"){\r\n            return temperature\r\n        }\r\n        return temperature\r\n    }\r\n\r\n    frepulse(v1, v2, delta, is3D){\r\n        const unitvector = unitVector(v1, v2, is3D)\r\n\r\n        return [((Math.pow(this.area,2))/delta)*unitvector[0],\r\n            ((Math.pow(this.area,2))/delta)*unitvector[1],\r\n            ((Math.pow(this.area,2))/delta)*unitvector[2] ]\r\n    }\r\n\r\n    fattract(v1, v2, delta, is3D){\r\n        const unitvector = unitVector(v1, v2, is3D)\r\n\r\n        return [unitvector[0]*(Math.pow(delta,2))/this.area,\r\n            unitvector[1]*(Math.pow(delta,2))/this.area,\r\n            unitvector[2]*(Math.pow(delta,2))/this.area];\r\n    }\r\n}\r\n\r\n//helpers\r\n/**\r\n * distance between two points (Vertex or Force)\r\n * @param v1 the first point\r\n * @param v2 the secont point\r\n * @param is3D is the data three dimensional?\r\n */\r\nfunction distance(v1, v2, is3D){\r\n    var dist;\r\n    if (is3D) {dist = Math.sqrt(\r\n        Math.pow((v1.x - v2.x), 2)\r\n        + Math.pow((v1.y - v2.y), 2)\r\n        + Math.pow((v1.z-v2.z),2))\r\n    } else{\r\n        dist = Math.sqrt(\r\n            Math.pow((v1.x - v2.x), 2)\r\n            + Math.pow((v1.y - v2.y), 2))\r\n    }\r\n    return dist === 0? 0.00000000000000000001: dist;\r\n\r\n}\r\n\r\n/**\r\n * returns the unit vector from v1 to v2\r\n * @param v1 the start point\r\n * @param v2 the end point\r\n * @param is3D is the data three dimensional?\r\n * @returns {number[]} the unit vector\r\n */\r\nfunction unitVector(v1,v2, is3D){\r\n    const new_x = v2.x - v1.x;\r\n    const new_y = v2.y - v1.y;\r\n\r\n    const dist = distance(v1,v2, is3D);\r\n    if(is3D){\r\n        const new_z = v2.z - v1.z;\r\n        return [new_x/dist, new_y/dist, new_z/dist];\r\n    }\r\n\r\n    return [new_x/dist, new_y/dist]\r\n}\r\n\r\nexport default FruchtermanReingold","import AbstractLayoutAlgorithm from \"./AbstractLayoutAlgorithm\";\r\nimport Force from \"../../../datatypes/Force.js\"\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\n\r\nclass ForceAtlas2 extends AbstractLayoutAlgorithm{\r\n    constructor(){\r\n        super(\"Force Atlas 2\");\r\n\r\n\r\n\r\n        this.iterations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Maximum iterations\",\r\n            100,\r\n            300,\r\n            1,\r\n            100\r\n        )\r\n\r\n\r\n        this.kr = AlgorithmSettingObject.newRangeSetting(\r\n            \"Force of Repulsion\",\r\n            0.1,\r\n            15,\r\n            0.1,\r\n            10)\r\n\r\n        this.ks = AlgorithmSettingObject.newRangeSetting(\r\n            \"System Angular Swing\",\r\n            0.1,\r\n            1,\r\n            0.1,\r\n            0.1\r\n            )\r\n\r\n        this.gravity = AlgorithmSettingObject.newCheckBoxSetting(\r\n            \"Gravitational Force\",\r\n            false)\r\n\r\n        this.kg = AlgorithmSettingObject.newRangeSetting(\r\n            \"Force of Gravity\",\r\n            0.1,\r\n            20,\r\n            0.1,\r\n            10\r\n        )\r\n\r\n        this.tau = AlgorithmSettingObject.newRangeSetting(\r\n            \"Angular Speed Tolerance\",\r\n            0.1,\r\n            2,\r\n            0.1,\r\n            0.1\r\n        )\r\n\r\n        this.ksmax = AlgorithmSettingObject.newRangeSetting(\r\n            \"Angular swing cap\",\r\n            1,\r\n            20,\r\n            0.1,\r\n            10,\r\n        )\r\n\r\n        this.dissaudeHub= AlgorithmSettingObject.newCheckBoxSetting(\r\n            \"Dissuade Hubs\",\r\n            true,\r\n        )\r\n\r\n        this.settings.push([\r\n            this.iterations,\r\n            this.kr,this.gravity,\r\n            this.kg,\r\n            this.tau,\r\n            this.ks,\r\n            this.ksmax,\r\n            this.dissaudeHub]);\r\n    }\r\n\r\n    /**\r\n     * gets the settings of the force atlas 2 algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    async getAnimations(vertices, edges, is3D){\r\n        const animations = [];\r\n        let t = 1;\r\n        let scalingFactor = [];\r\n        let previousForces = [];\r\n        let currentVertices = this.createAnimationFrame(vertices);\r\n        animations.push(currentVertices);\r\n        scalingFactor.push([0,0,0,1,1,1])\r\n\r\n\r\n        for(let i = 0; i < vertices.length; i++){\r\n            previousForces.push(new Force(0,0,0));\r\n        }\r\n\r\n\r\n\r\n        while(t < this.iterations.obj.value){\r\n            let forceList = [];\r\n\r\n            //CALCULATE REPULSIVE FORCES\r\n            for(let i = 0; i < vertices.length; i++){\r\n                let f = new Force(0, 0, 0);\r\n\r\n                for(let j = 0; j < vertices.length; j++){\r\n                    if(i !== j){\r\n                        const repulseForce = this.frepulse(currentVertices[i], currentVertices[j], is3D);\r\n                        f.addVector(repulseForce);\r\n                    }\r\n                }\r\n                forceList.push(f);\r\n            }\r\n\r\n            //CALCULATE ATTRACTIVE FORCES\r\n            for(let i = 0; i < edges.length; i++){\r\n                const e = edges[i];\r\n                const attractiveForce = this.fattract(currentVertices[e.start], currentVertices[e.end], is3D);\r\n                let attractiveForceOpp;\r\n                if(!is3D) attractiveForceOpp = [-attractiveForce[0], -attractiveForce[1]];\r\n                if(is3D) attractiveForceOpp = [-attractiveForce[0], -attractiveForce[1], -attractiveForce[2]]\r\n                forceList[e.start].addVector(attractiveForce);\r\n                forceList[e.end].addVector(attractiveForceOpp); //have to add the vector in other direction for it to be additive\r\n            }\r\n\r\n            //CALCULATE GRAVITY FORCES\r\n            if(this.gravity.obj.value){\r\n                let center = [];\r\n                let centerForce = [0, 0];\r\n                if(!is3D){\r\n                    center = t === 1? [1/2, 1/2] : [1/2 * (1/scalingFactor[t-2][3]), 1/2 * (1/scalingFactor[t-2][4])];\r\n                    centerForce = new Force(center[0], center[1])\r\n                } else{\r\n                    center = t === 1? [1/3, 1/3, 1/3] : [\r\n                        1/3 * (1/scalingFactor[t-2][3]),\r\n                        1/3 * (1/scalingFactor[t-2][4]),\r\n                        1/3 * (1/scalingFactor[t-2][5])\r\n                    ];\r\n                    centerForce = new Force(center[0], center[1], center[2]);\r\n                }\r\n\r\n                for(let i = 0; i < vertices.length; i++){\r\n                    const gravityForce = this.fgravity(currentVertices[i], centerForce, is3D);\r\n                    forceList[i].addVector(gravityForce)\r\n                }\r\n            }\r\n\r\n            //update global speed\r\n            let sG = 0;\r\n            let traG = 0;\r\n            let swgG = 0;\r\n            let minX = Infinity; let minY = Infinity; let minZ = Infinity;\r\n            let maxX = -Infinity; let maxY = -Infinity; let maxZ = -Infinity;\r\n            let fN = 0;\r\n            for(let i = 0; i < forceList.length; i++){\r\n                const origin = new Force(0, 0, 0);\r\n                const combinedForce = new Force(\r\n                    forceList[i].x + previousForces[i].x,\r\n                    forceList[i].y + previousForces[i].y,\r\n                    forceList[i].z + previousForces[i].z);\r\n                const traN = distance(combinedForce, origin, is3D)/2;\r\n                traG += (vertices[i].degree + 1) * traN\r\n                const directionForce = new Force(\r\n                    forceList[i].x - previousForces[i].x,\r\n                    forceList[i].y - previousForces[i].y,\r\n                    forceList[i].z - previousForces[i].z);\r\n                const swgN = distance(directionForce, origin, is3D);\r\n                swgG += (vertices[i].degree + 1) * swgN;\r\n                sG += traN/swgN\r\n            }\r\n\r\n\r\n            let sN = 0;\r\n            currentVertices = this.createAnimationFrame(currentVertices);\r\n            for(let i = 0; i < vertices.length; i++){\r\n                //find direction of forces\r\n                const origin = new Force(0, 0, 0);\r\n\r\n                //calculate temperatures\r\n                const directionForce = new Force(\r\n                    forceList[i].x - previousForces[i].x,\r\n                    forceList[i].y - previousForces[i].y,\r\n                    forceList[i].z - previousForces[i].z\r\n                )\r\n                const swgN = distance(directionForce, origin, is3D);\r\n                sN = Math.min((this.ks.obj.value*sG)/(1 + sG * Math.sqrt(swgN)),\r\n                    this.ksmax.obj.value/distance(forceList[i], origin, is3D));\r\n                currentVertices[i].x += sN*forceList[i].x;\r\n                currentVertices[i].y += sN*forceList[i].y;\r\n                currentVertices[i].z += sN*forceList[i].z;\r\n\r\n                //update previous forces\r\n                previousForces[i] = forceList[i];\r\n\r\n                //update constants for scaling factor\r\n                minX = Math.min(minX, currentVertices[i].x); minY = Math.min(minY, currentVertices[i].y);\r\n                minZ = Math.min(minZ, currentVertices[i].z);\r\n\r\n                maxX = Math.max(maxX, currentVertices[i].x); maxY = Math.max(maxY, currentVertices[i].y);\r\n                maxZ = Math.max(maxZ, currentVertices[i].z);\r\n            }\r\n            animations.push(currentVertices);\r\n            scalingFactor.push([-minX, -minY, -minZ, 1/(maxX-minX), 1/(maxY-minY), 1/(maxZ-minZ)]);\r\n            t += 1;\r\n        }\r\n\r\n        //Rescale all the animations within the frame\r\n        for(let i = 0; i < animations.length; i++){\r\n            for(let j = 0; j < animations[i].length; j ++){\r\n                animations[i][j].x = (animations[i][j].x + scalingFactor[i][0])*scalingFactor[i][3];\r\n                animations[i][j].y = (animations[i][j].y + scalingFactor[i][1])*scalingFactor[i][4];\r\n                animations[i][j].z = (animations[i][j].z + scalingFactor[i][2])*scalingFactor[i][5];\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return animations;\r\n    }\r\n\r\n    /**\r\n     * Calculates the repulsive forces between two vertices in the Force Atlas algorithm\r\n     * @param x\r\n     * @param y\r\n     * @param is3D\r\n     * @returns {number[]}\r\n     */\r\n    frepulse(x, y, is3D){\r\n        let dist = distance(x, y, is3D);\r\n        let unitvector = unitVector(y,x, is3D);\r\n\r\n        if(is3D){\r\n            return [unitvector[0]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist),\r\n                unitvector[1]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist),\r\n                unitvector[2]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist)\r\n            ];\r\n        }\r\n        return [unitvector[0]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist),\r\n            unitvector[1]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist)];\r\n    }\r\n\r\n    fattract(x, y, is3D){\r\n        let dist = this.dissaudeHub?distance(x, y, is3D)/(x.degree + 1): distance(x,y, is3D);\r\n        let unitvector = unitVector(x,y, is3D);\r\n\r\n        if(is3D){\r\n            return [unitvector[0] *dist, unitvector[1]*dist, unitvector[2]*dist];\r\n        }\r\n        return [unitvector[0] *dist, unitvector[1]*dist];\r\n    }\r\n\r\n    fgravity(v, center, is3D){\r\n        let distCenter = distance(v,center, is3D);\r\n        let unitvector = unitVector(v,center, is3D);\r\n\r\n        if(is3D){\r\n            return [unitvector[0]*this.kg.obj.value*(v.degree+1)*distCenter,\r\n                unitvector[1]*this.kg.obj.value*(v.degree+1)*distCenter,\r\n                unitvector[2]*this.kg.obj.value*(v.degree+1)*distCenter,\r\n            ];\r\n        }\r\n\r\n        return [unitvector[0]*this.kg.obj.value*(v.degree+1)*distCenter,\r\n            unitvector[1]*this.kg.obj.value*(v.degree+1)*distCenter];\r\n    }\r\n\r\n    /**\r\n     * create a copy of the current vertices in the network\r\n     * @param vertices\r\n     * @returns {[]}\r\n     */\r\n    createAnimationFrame(vertices){\r\n        const res = [];\r\n        vertices.forEach((v) => {res.push(v.copyVertex())})\r\n        return res\r\n    }\r\n}\r\n\r\n/**\r\n * distance between two points (Vertex or Force)\r\n * @param v1 the first point\r\n * @param v2 the secont point\r\n * @param is3D is the data three dimensional?\r\n */\r\nfunction distance(v1, v2, is3D){\r\n    let dist;\r\n    if (is3D) {dist = Math.sqrt(\r\n        Math.pow((v1.x - v2.x), 2)\r\n        + Math.pow((v1.y - v2.y), 2)\r\n        + Math.pow((v1.z-v2.z),2))\r\n    } else{\r\n        dist = Math.sqrt(\r\n            Math.pow((v1.x - v2.x), 2)\r\n            + Math.pow((v1.y - v2.y), 2))\r\n    }\r\n    return dist === 0? 0.00000001: dist;\r\n\r\n}\r\n\r\n/**\r\n * returns the unit vector from v1 to v2\r\n * @param v1 the start point\r\n * @param v2 the end point\r\n * @param is3D is the data three dimensional?\r\n * @returns {number[]} the unit vector\r\n */\r\nfunction unitVector(v1,v2, is3D){\r\n    const new_x = v2.x - v1.x;\r\n    const new_y = v2.y - v1.y;\r\n\r\n    const dist = distance(v1,v2, is3D);\r\n    if(is3D){\r\n        const new_z = v2.z - v1.z;\r\n        return [new_x/dist, new_y/dist, new_z/dist];\r\n    }\r\n\r\n    return [new_x/dist, new_y/dist]\r\n}\r\n\r\nexport default ForceAtlas2;","import AbstractLayoutAlgorithm from \"./AbstractLayoutAlgorithm\";\r\nimport Force from \"../../../datatypes/Force.js\"\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\n\r\nclass ForceAtlasLinLog extends AbstractLayoutAlgorithm{\r\n    constructor(){\r\n        super(\"Force Atlas Lin-Log\");\r\n\r\n\r\n\r\n        this.iterations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Maximum iterations\",\r\n            100,\r\n            300,\r\n            1,\r\n            100\r\n        )\r\n\r\n\r\n        this.kr = AlgorithmSettingObject.newRangeSetting(\r\n            \"Force of Repulsion\",\r\n            0.01,\r\n            20,\r\n            0.1,\r\n            10)\r\n\r\n        this.ks = AlgorithmSettingObject.newRangeSetting(\r\n            \"System Angular Swing\",\r\n            0.1,\r\n            1,\r\n            0.1,\r\n            0.1\r\n        )\r\n\r\n        this.gravity = AlgorithmSettingObject.newCheckBoxSetting(\r\n            \"Gravitational Force\",\r\n            false)\r\n\r\n        this.kg = AlgorithmSettingObject.newRangeSetting(\r\n            \"Force of Gravity\",\r\n            0.1,\r\n            20,\r\n            0.1,\r\n            10\r\n        )\r\n\r\n        this.tau = AlgorithmSettingObject.newRangeSetting(\r\n            \"Angular Speed Tolerance\",\r\n            0.1,\r\n            2,\r\n            0.1,\r\n            0.1\r\n        )\r\n\r\n        this.ksmax = AlgorithmSettingObject.newRangeSetting(\r\n            \"Angular swing cap\",\r\n            1,\r\n            20,\r\n            0.1,\r\n            10,\r\n        )\r\n\r\n        this.dissaudeHub= AlgorithmSettingObject.newCheckBoxSetting(\r\n            \"Dissuade Hubs\",\r\n            true,\r\n        )\r\n\r\n        this.settings.push([\r\n            this.iterations,\r\n            this.kr,this.gravity,\r\n            this.kg,\r\n            this.tau,\r\n            this.ks,\r\n            this.ksmax,\r\n            this.dissaudeHub]);\r\n    }\r\n\r\n    /**\r\n     * gets the settings of the force atlas 2 algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    async getAnimations(vertices, edges, is3D){\r\n        const animations = [];\r\n        let t = 1;\r\n        let scalingFactor = [];\r\n        let previousForces = [];\r\n        let currentVertices = this.createAnimationFrame(vertices);\r\n        animations.push(currentVertices);\r\n        scalingFactor.push([0,0,0,1,1,1])\r\n\r\n\r\n        for(let i = 0; i < vertices.length; i++){\r\n            previousForces.push(new Force(0,0,0));\r\n        }\r\n\r\n\r\n\r\n        while(t < this.iterations.obj.value){\r\n            let forceList = [];\r\n\r\n            //CALCULATE REPULSIVE FORCES\r\n            for(let i = 0; i < vertices.length; i++){\r\n                let f = new Force(0, 0, 0);\r\n\r\n                for(let j = 0; j < vertices.length; j++){\r\n                    if(i !== j){\r\n                        const repulseForce = this.frepulse(currentVertices[i], currentVertices[j], is3D);\r\n                        f.addVector(repulseForce);\r\n                    }\r\n                }\r\n                forceList.push(f);\r\n            }\r\n\r\n            //CALCULATE ATTRACTIVE FORCES\r\n            for(let i = 0; i < edges.length; i++){\r\n                const e = edges[i];\r\n                const attractiveForce = this.fattract(currentVertices[e.start], currentVertices[e.end], is3D);\r\n                let attractiveForceOpp;\r\n                if(!is3D) attractiveForceOpp = [-attractiveForce[0], -attractiveForce[1]];\r\n                if(is3D) attractiveForceOpp = [-attractiveForce[0], -attractiveForce[1], -attractiveForce[2]]\r\n                forceList[e.start].addVector(attractiveForce);\r\n                forceList[e.end].addVector(attractiveForceOpp); //have to add the vector in other direction for it to be additive\r\n            }\r\n\r\n            //CALCULATE GRAVITY FORCES\r\n            if(this.gravity.obj.value){\r\n                let center = [];\r\n                let centerForce = [0, 0];\r\n                if(!is3D){\r\n                    center = t === 1? [1/2, 1/2] : [1/2 * (1/scalingFactor[t-2][3]), 1/2 * (1/scalingFactor[t-2][4])];\r\n                    centerForce = new Force(center[0], center[1])\r\n                } else{\r\n                    center = t === 1? [1/3, 1/3, 1/3] : [\r\n                        1/3 * (1/scalingFactor[t-2][3]),\r\n                        1/3 * (1/scalingFactor[t-2][4]),\r\n                        1/3 * (1/scalingFactor[t-2][5])\r\n                    ];\r\n                    centerForce = new Force(center[0], center[1], center[2]);\r\n                }\r\n\r\n                for(let i = 0; i < vertices.length; i++){\r\n                    const gravityForce = this.fgravity(currentVertices[i], centerForce, is3D);\r\n                    forceList[i].addVector(gravityForce)\r\n                }\r\n            }\r\n\r\n            //update global speed\r\n            let sG = 0;\r\n            let traG = 0;\r\n            let swgG = 0;\r\n            let minX = Infinity; let minY = Infinity; let minZ = Infinity;\r\n            let maxX = -Infinity; let maxY = -Infinity; let maxZ = -Infinity;\r\n            let fN = 0;\r\n            for(let i = 0; i < forceList.length; i++){\r\n                const origin = new Force(0, 0, 0);\r\n                const combinedForce = new Force(\r\n                    forceList[i].x + previousForces[i].x,\r\n                    forceList[i].y + previousForces[i].y,\r\n                    forceList[i].z + previousForces[i].z);\r\n                const traN = distance(combinedForce, origin, is3D)/2;\r\n                traG += (vertices[i].degree + 1) * traN\r\n                const directionForce = new Force(\r\n                    forceList[i].x - previousForces[i].x,\r\n                    forceList[i].y - previousForces[i].y,\r\n                    forceList[i].z - previousForces[i].z);\r\n                const swgN = distance(directionForce, origin, is3D);\r\n                swgG += (vertices[i].degree + 1) * swgN;\r\n                sG += traN/swgN\r\n            }\r\n\r\n\r\n            let sN = 0;\r\n            currentVertices = this.createAnimationFrame(currentVertices);\r\n            for(let i = 0; i < vertices.length; i++){\r\n                //find direction of forces\r\n                const origin = new Force(0, 0, 0);\r\n\r\n                //calculate temperatures\r\n                const directionForce = new Force(\r\n                    forceList[i].x - previousForces[i].x,\r\n                    forceList[i].y - previousForces[i].y,\r\n                    forceList[i].z - previousForces[i].z\r\n                )\r\n                const swgN = distance(directionForce, origin, is3D);\r\n                sN = Math.min((this.ks.obj.value*sG)/(1 + sG * Math.sqrt(swgN)),\r\n                    this.ksmax.obj.value/distance(forceList[i], origin, is3D));\r\n                currentVertices[i].x += sN*forceList[i].x;\r\n                currentVertices[i].y += sN*forceList[i].y;\r\n                currentVertices[i].z += sN*forceList[i].z;\r\n\r\n                //update previous forces\r\n                previousForces[i] = forceList[i];\r\n\r\n                //update constants for scaling factor\r\n                minX = Math.min(minX, currentVertices[i].x); minY = Math.min(minY, currentVertices[i].y);\r\n                minZ = Math.min(minZ, currentVertices[i].z);\r\n\r\n                maxX = Math.max(maxX, currentVertices[i].x); maxY = Math.max(maxY, currentVertices[i].y);\r\n                maxZ = Math.max(maxZ, currentVertices[i].z);\r\n            }\r\n            animations.push(currentVertices);\r\n            scalingFactor.push([-minX, -minY, -minZ, 1/(maxX-minX), 1/(maxY-minY), 1/(maxZ-minZ)]);\r\n            t += 1;\r\n        }\r\n\r\n        //Rescale all the animations within the frame\r\n        for(let i = 0; i < animations.length; i++){\r\n            for(let j = 0; j < animations[i].length; j ++){\r\n                animations[i][j].x = (animations[i][j].x + scalingFactor[i][0])*scalingFactor[i][3];\r\n                animations[i][j].y = (animations[i][j].y + scalingFactor[i][1])*scalingFactor[i][4];\r\n                animations[i][j].z = (animations[i][j].z + scalingFactor[i][2])*scalingFactor[i][5];\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return animations;\r\n    }\r\n\r\n    /**\r\n     * Calculates the repulsive forces between two vertices in the Force Atlas algorithm\r\n     * @param x\r\n     * @param y\r\n     * @param is3D\r\n     * @returns {number[]}\r\n     */\r\n    frepulse(x, y, is3D){\r\n        let dist = distance(x, y, is3D);\r\n        let unitvector = unitVector(y,x, is3D);\r\n\r\n        if(is3D){\r\n            return [unitvector[0]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist),\r\n                unitvector[1]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist),\r\n                unitvector[2]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist)\r\n            ];\r\n        }\r\n        return [unitvector[0]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist),\r\n            unitvector[1]*this.kr.obj.value*(((x.degree+1)*(y.degree+1))/dist)];\r\n    }\r\n\r\n    fattract(x, y, is3D){\r\n        let dist = this.dissaudeHub?Math.log(1+distance(x, y, is3D))/(x.degree + 1): Math.log(distance(x,y, is3D));\r\n        let unitvector = unitVector(x,y, is3D);\r\n\r\n        if(is3D){\r\n            return [unitvector[0] *dist, unitvector[1]*dist, unitvector[2]*dist];\r\n        }\r\n        return [unitvector[0] *dist, unitvector[1]*dist];\r\n    }\r\n\r\n    fgravity(v, center, is3D){\r\n        let distCenter = distance(v,center, is3D);\r\n        let unitvector = unitVector(v,center, is3D);\r\n\r\n        if(is3D){\r\n            return [unitvector[0]*this.kg.obj.value*(v.degree+1)*distCenter,\r\n                unitvector[1]*this.kg.obj.value*(v.degree+1)*distCenter,\r\n                unitvector[2]*this.kg.obj.value*(v.degree+1)*distCenter,\r\n            ];\r\n        }\r\n\r\n        return [unitvector[0]*this.kg.obj.value*(v.degree+1)*distCenter,\r\n            unitvector[1]*this.kg.obj.value*(v.degree+1)*distCenter];\r\n    }\r\n\r\n    /**\r\n     * create a copy of the current vertices in the network\r\n     * @param vertices\r\n     * @returns {[]}\r\n     */\r\n    createAnimationFrame(vertices){\r\n        const res = [];\r\n        vertices.forEach((v) => {res.push(v.copyVertex())})\r\n        return res\r\n    }\r\n}\r\n\r\n/**\r\n * distance between two points (Vertex or Force)\r\n * @param v1 the first point\r\n * @param v2 the secont point\r\n * @param is3D is the data three dimensional?\r\n */\r\nfunction distance(v1, v2, is3D){\r\n    let dist;\r\n    if (is3D) {dist = Math.sqrt(\r\n        Math.pow((v1.x - v2.x), 2)\r\n        + Math.pow((v1.y - v2.y), 2)\r\n        + Math.pow((v1.z-v2.z),2))\r\n    } else{\r\n        dist = Math.sqrt(\r\n            Math.pow((v1.x - v2.x), 2)\r\n            + Math.pow((v1.y - v2.y), 2))\r\n    }\r\n    return dist === 0? 0.00000001: dist;\r\n\r\n}\r\n\r\n/**\r\n * returns the unit vector from v1 to v2\r\n * @param v1 the start point\r\n * @param v2 the end point\r\n * @param is3D is the data three dimensional?\r\n * @returns {number[]} the unit vector\r\n */\r\nfunction unitVector(v1,v2, is3D){\r\n    const new_x = v2.x - v1.x;\r\n    const new_y = v2.y - v1.y;\r\n\r\n    const dist = distance(v1,v2, is3D);\r\n    if(is3D){\r\n        const new_z = v2.z - v1.z;\r\n        return [new_x/dist, new_y/dist, new_z/dist];\r\n    }\r\n\r\n    return [new_x/dist, new_y/dist]\r\n}\r\n\r\nexport default ForceAtlasLinLog;","var assert = require('assert');\r\n\r\nclass SquareMatrix{\r\n  constructor(array2d){\r\n    assert(array2d.length === array2d[0].length)\r\n    this.container = array2d;\r\n  }\r\n\r\n  lMultiply(vector){\r\n    assert(vector.length === this.container.length, \"vector \" + vector.toString()+\r\n              \"vector dimension \"+vector.length.toString()+\"versus matrix \" + this.container.toString() +\r\n              \"of dimension \"+ this.container.length);\r\n    const return_vector = [];\r\n    for(let i = 0; i < vector.length; i++){\r\n      var value = 0;\r\n      for(let j = 0; j < vector.length; j++){\r\n        value += vector[j]*this.container[j][i];\r\n      }\r\n      return_vector.push(value);\r\n    }\r\n    return return_vector;\r\n  }\r\n\r\n  rMultiply(vector){\r\n    assert(vector.length === this.container.length, \"vector \" + vector.toString()+\r\n              \"vector dimension \"+vector.length.toString()+\"versus matrix \" + this.container.toString() +\r\n              \"of dimension \"+ this.container.length);\r\n    const return_vector = [];\r\n    for(let i = 0; i < vector.length; i++){\r\n      var value = 0;\r\n      for(let j = 0; j < vector.length; j++){\r\n        value += this.container[i][j]*vector[j]\r\n      }\r\n      return_vector.push(value);\r\n    }\r\n    return return_vector;\r\n  }\r\n\r\n  matrixMultiply(other){\r\n    assert(other.container.length === this.container.length, \"matrix \" +\r\n        this.container.toString() + \" other matrix \" + other.container.toString());\r\n    const new_mat = [];\r\n    for(let i = 0; i < this.container.length; i++){\r\n      const new_row = [];\r\n      for(let j = 0; j < this.container.length; j++){\r\n        const row = this.getRow(i);\r\n        const col = other.getColumn(j);\r\n        const value = dotProduct(row, col);\r\n        new_row.push(value);\r\n      }\r\n      new_mat.push(new_row);\r\n    }\r\n    return new_mat;\r\n  }\r\n\r\n  getMatrix(){\r\n    return this.container;\r\n  }\r\n\r\n  getRow(i){\r\n    assert(i < this.container.length, \"matrix dimension \"\r\n                + this.container.length.toString()+ \", access index \" + i.toString());\r\n    const return_vector = [];\r\n    for(let j = 0; j < this.container.length; j++){\r\n      return_vector.push(this.container[i][j]);\r\n    }\r\n    return return_vector;\r\n  }\r\n\r\n  getColumn(i){\r\n    assert(i < this.container.length, \"matrix dimension \"\r\n                + this.container.length.toString()+ \", access index \" + i.toString());\r\n    const return_vector = [];\r\n    for(let j = 0; j < this.container.length; j++){\r\n      return_vector.push(this.container[j][i]);\r\n    }\r\n    return return_vector;\r\n  }\r\n}\r\n\r\nexport default SquareMatrix;\r\n\r\nfunction dotProduct(v1,v2){\r\n  var sum = 0;\r\n  for(let i = 0; i < v1.length; i ++){\r\n    sum += v1[i]*v2[i];\r\n  }\r\n  return sum\r\n}\r\n","import AbstractLayoutAlgorithm from \"./AbstractLayoutAlgorithm\";\r\nimport SquareMatrix from \"../../../datatypes/SquareMatrix\";\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\n\r\nclass GeneralizedEigenvector extends AbstractLayoutAlgorithm{\r\n    constructor(){\r\n        super(\"Generalized Eigenvector\")\r\n\r\n        this.iterations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Convergence iterations\",\r\n            50,\r\n            200,\r\n            1,\r\n            100);\r\n        this.settings.push([this.iterations])\r\n        this.setRequiredProperty(null)\r\n    }\r\n\r\n    /**\r\n     * gets the settings of the fruchterman reingold algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     * Get the animations for a generalized eigenvector layout algorithm\r\n     * @param vertices\r\n     * @param edges\r\n     * @param is3D\r\n     * @returns {Promise<[]>}\r\n     */\r\n    async getAnimations(vertices, edges, is3D){\r\n        const epsilon = Math.pow(10, -7);\r\n        const dimension = is3D? 4: 3; // 1-index network data for clarity (makes the linear algebra less confusing)\r\n\r\n        //import matrices\r\n        let A = []; //adjacency\r\n        let D = []; //degree\r\n        let Dinv = []; // degree inverse\r\n        let L = []; //laplacian\r\n\r\n        //Pre-compute important matrices\r\n        for(let i = 0; i < vertices.length; i++){\r\n            const adjRow = [];\r\n            const degreeRow = [];\r\n            const inverseDegreeRow = [];\r\n            const laplacianRow = [];\r\n            for(let j = 0; j < vertices.length; j++){\r\n                adjRow.push(0);\r\n                degreeRow.push(0);\r\n                inverseDegreeRow.push(0);\r\n                laplacianRow.push(0);\r\n                if(i === j){\r\n                    degreeRow[i] = vertices[i].degree;\r\n                    inverseDegreeRow[i] = 1/vertices[i].degree;\r\n                    laplacianRow[i] = vertices[i].degree;\r\n                }\r\n            }\r\n            A.push(adjRow);\r\n            D.push(degreeRow);\r\n            Dinv.push(inverseDegreeRow);\r\n            L.push(laplacianRow);\r\n        }\r\n\r\n        for(let i = 0; i < edges.length; i++){\r\n            A[edges[i].start][edges[i].end] = 1;\r\n            A[edges[i].end][edges[i].start] = 1;\r\n            L[edges[i].start][edges[i].end] = -1;\r\n            L[edges[i].end][edges[i].start] = -1;\r\n        }\r\n        A = new SquareMatrix(A);\r\n        L = new SquareMatrix(L);\r\n        D = new SquareMatrix(D);\r\n        Dinv = new SquareMatrix(Dinv);\r\n\r\n        const intermediateMat = Dinv.matrixMultiply(A);\r\n        for(let i = 0; i < intermediateMat.length; i++){\r\n            intermediateMat[i][i]++;\r\n        }\r\n        for(let i = 0; i < intermediateMat.length; i++){\r\n            for(let j = 0; j < intermediateMat.length; j++){\r\n                intermediateMat[i][j] *= 1/2;\r\n            }\r\n        }\r\n        let C = new SquareMatrix(intermediateMat);\r\n        //end of matrix precomputation\r\n\r\n        //instantiate default eigenvector\r\n        const eigenvectors = [];\r\n        const v1 = [];\r\n        vertices.forEach(() => v1.push(1));\r\n        eigenvectors.push(v1);\r\n\r\n        //computing degree normalized eigenvectors v2 ... vk where k is data dimension + 1\r\n        for(let i = 2; i < dimension+1; i++){\r\n            let newViVector = randomVector(vertices.length);\r\n            normalize(newViVector);\r\n\r\n            //Normalize against previous eigenvectors;\r\n            let newVi = newViVector;\r\n            //\r\n            for(let j = 0; j < i -1; j ++){\r\n                newVi = orthogonalize(newVi, eigenvectors[j], D);\r\n            }\r\n            newViVector = C.lMultiply(newVi);\r\n            normalize(newViVector);\r\n\r\n            var iterations = 0;\r\n            while(dotProduct(newViVector, newVi) < 1- epsilon){\r\n                newVi = C.lMultiply(newViVector);\r\n                normalize(newVi);\r\n                iterations ++;\r\n                if(iterations > this.iterations.obj.value) break;\r\n            }\r\n            eigenvectors.push(newVi)\r\n        }\r\n        //even though the vectors are normalized, we have to rescale them to be in the range 0, 1\r\n        for(let dim =1; dim < dimension; dim++){\r\n            let min = Infinity;\r\n            let max = -Infinity;\r\n            for(let k = 0; k < eigenvectors[dim].length; k++){\r\n                min = Math.min(eigenvectors[dim][k], min);\r\n                max = Math.max(eigenvectors[dim][k], max);\r\n            }\r\n\r\n            for(let k = 0; k < eigenvectors[dim].length; k++){\r\n                eigenvectors[dim][k] = (eigenvectors[dim][k] - min)/(max-min)\r\n\r\n            }\r\n        }\r\n\r\n        const animations = [];\r\n        const firstFrame = this.createAnimationFrame(vertices);\r\n        animations.push(firstFrame);\r\n        let currentVertices = vertices\r\n        for(let dim = 1; dim < dimension; dim++){\r\n            for(let k = 0; k < eigenvectors[dim].length; k++){\r\n                const frame = this.createAnimationFrame(currentVertices);\r\n                for(let j = 0; j < vertices.length; j++){\r\n                    if(dim === 1)frame[k].x = eigenvectors[dim][k]\r\n                    if(dim === 2)frame[k].y = eigenvectors[dim][k]\r\n                    if(is3D && dim === 3) frame[k].z = eigenvectors[dim][k]\r\n\r\n                }\r\n                animations.push(frame);\r\n                currentVertices = frame;\r\n            }\r\n        }\r\n        return animations;\r\n\r\n    }\r\n\r\n    createAnimationFrame(vertices){\r\n        const res = [];\r\n        vertices.forEach((v) => {res.push(v.copyVertex())});\r\n        return res;\r\n    }\r\n}\r\n\r\nexport default GeneralizedEigenvector;\r\n\r\n/**\r\n * Generates a vector with random values between 0 and 1\r\n * @param size the size of the random vector to generate\r\n * @returns {[]} the random vector\r\n */\r\nfunction randomVector(size){\r\n    const newVector = [];\r\n    for(let i = 0; i < size; i ++){\r\n        newVector.push(Math.random())\r\n    }\r\n    return newVector;\r\n}\r\n\r\n/**\r\n * Normalize a vector in place\r\n * @param vector returns a normalized vector\r\n */\r\nfunction normalize(vector){\r\n    let sum = vector.reduce(function(a,b){return a+ Math.pow(b,2)});\r\n    sum = Math.sqrt(sum)\r\n    for(let i = 0; i < vector.length; i ++){\r\n        vector[i] = vector[i]/sum\r\n    }\r\n}\r\n\r\n/**\r\n * Orthogonalize one vector with respect to another under the degree matrix transformation\r\n * @param u vector to orthogonalize\r\n * @param v vector to orthogonalize against\r\n * @param D the degree matrix of the network\r\n * @returns {[]} the orthogonalized vector\r\n */\r\nfunction orthogonalize(u, v, D){\r\n    const numeratorDtimesUj = D.rMultiply(v)\r\n    const numerator = dotProduct(u, numeratorDtimesUj);\r\n    const denominator = dotProduct(v, numeratorDtimesUj);\r\n    const newVector = [];\r\n    for(let i = 0; i < u.length; i++){\r\n        newVector.push(u[i] - v[i]*(numerator/denominator));\r\n    }\r\n    return newVector;\r\n\r\n}\r\n\r\n/**\r\n * returns the dotProduct of two vectors v1 and v2\r\n * @param v1\r\n * @param v2\r\n * @returns {number} dot product result\r\n */\r\nfunction dotProduct(v1,v2){\r\n    var sum = 0;\r\n    for(let i = 0; i < v1.length; i ++){\r\n        sum += v1[i]*v2[i];\r\n    }\r\n    return sum\r\n}","import AbstractNetworkAlgorithm from \"../AbstractNetworkAlgorithm\";\r\n\r\nclass AbstractTSPAlgorithm extends AbstractNetworkAlgorithm{\r\n    constructor(name){\r\n        super(name)\r\n        this.setRequiredProperty(\"Cycle\")\r\n    }\r\n    /**\r\n     * In TSP algorithms we want\r\n     * to assign entirely new edges to the network\r\n     * @param network the network we want to change\r\n     * @param animations\r\n     * @param currentStep\r\n     * @param actualSteps\r\n     */\r\n    applyAnimation(network, animations, currentStep, actualSteps) {\r\n        network.edges = animations[currentStep + actualSteps]\r\n    }\r\n\r\n}\r\n\r\nexport default AbstractTSPAlgorithm;","import AbstractTSPAlgorithm from \"./AbstractTSPAlgorithm\";\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\n\r\nclass Opt2 extends AbstractTSPAlgorithm{\r\n    constructor(){\r\n        super(\"2-Opt\")\r\n\r\n        this.iterations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Maximum Possible Swaps\",\r\n            100,\r\n            10000,\r\n            1,\r\n            5025);\r\n\r\n        this.simulations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Attempts Per Iteration\",\r\n            100,\r\n            200,\r\n            1,\r\n            100\r\n        )\r\n\r\n        this.selectedColor = AlgorithmSettingObject.newColorSetting(\r\n            \"Color\",\r\n            \"#ff0000\"\r\n        )\r\n\r\n        this.settings.push([this.iterations, this.simulations, this.selectedColor])\r\n        this.setRequiredProperty(\"Cycle\")\r\n    }\r\n\r\n    /**\r\n     * returns the settings of the Opt-2 algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param vertices\r\n     * @param edges\r\n     * @param is3D\r\n     * @returns {[]}\r\n     */\r\n    async getAnimations(vertices, edges, is3D){\r\n        //set up animations\r\n        const animations = [];\r\n        const firstFrameAnimation = [];\r\n        //set up intial cycle definitions & first animation\r\n        let path = [];\r\n        const initialColors = [];\r\n        const initialAlpha = [];\r\n        let betterSolution = false;\r\n        let root = edges[0].start;\r\n        initialColors.push(edges[0].color)\r\n        initialAlpha.push(edges[0].alpha)\r\n        firstFrameAnimation.push(edges[0].copyEdge())\r\n        path.push(root)\r\n        var I = -1;\r\n        var K = -1;\r\n\r\n        for(let i = 1; i < edges.length; i++){\r\n            path.push(edges[i].start);\r\n            initialColors.push(edges[i].color);\r\n            initialAlpha.push(edges[i].alpha);\r\n            firstFrameAnimation.push(edges[i].copyEdge())\r\n        }\r\n        path.push(root)\r\n        animations.push(firstFrameAnimation);\r\n\r\n        for(let j = 0; j < this.iterations.obj.value; j++){\r\n            //try and perform a swap that improves the below distance\r\n            for(let n = 0; n < this.simulations.obj.value; n++){\r\n                //select two random enpoints\r\n                var i = Math.floor(Math.random() *(path.length -2)) + 1;\r\n                var k = Math.floor(Math.random() * (path.length - 2)) + 1;\r\n\r\n                if(i > k){ //we swap the values just to make switching paths easier later\r\n                    const temp = i;\r\n                    i = k;\r\n                    k = temp;\r\n                }\r\n\r\n                const [A, B, C, D] = [path[i], path[i+1], path[k], path[k+1]]\r\n                const v = vertices;\r\n                let dist = distance(v[A], v[B], is3D) + distance(v[C], v[D], is3D);\r\n                let newDist = distance(v[A], v[C], is3D) + distance(v[B], v[D], is3D);\r\n\r\n                if(newDist < dist) {\r\n                    let newPath = [];\r\n                    newPath.push(root);\r\n                    for(let m = 0; m < i; m ++){\r\n                        newPath.push(path[m+1]);\r\n                    }\r\n\r\n                    for(let m = k- 1; m > i -1; m--){\r\n                        newPath.push(path[m+1]);\r\n                    }\r\n\r\n                    for(let m = k; m < path.length -1; m++){\r\n                        newPath.push(path[m+1])\r\n                    }\r\n                    betterSolution = true;\r\n                    path = newPath\r\n                    I = i;\r\n                    K = k;\r\n                    break;\r\n                }\r\n            }\r\n            if(betterSolution) {\r\n                const newEdges = [];\r\n                for(let i = 0; i < path.length - 1; i++){\r\n                    const e = edges[i].copyEdge();\r\n                    e.start = path[i];\r\n                    e.end = path[i+1];\r\n                    newEdges.push(e);\r\n                    if(i === I || i === K){\r\n                        newEdges[i].color = this.selectedColor.obj.value\r\n                        newEdges[i].alpha = 0.5\r\n                    } else{\r\n                        newEdges[i].color = initialColors[i]\r\n                        newEdges[i].alpha = initialAlpha[i];\r\n                    }\r\n                }\r\n                animations.push(newEdges)\r\n\r\n            }\r\n        }\r\n        //add one last animation where all the edges have their intial colors;\r\n        const lastAnimationFrame = [];\r\n        for(let i = 0; i < animations[animations.length-1].length; i++){\r\n            lastAnimationFrame.push(animations[animations.length-1][i].copyEdge());\r\n            lastAnimationFrame[i].color = initialColors[i];\r\n            lastAnimationFrame[i].alpha = initialAlpha[i];\r\n        }\r\n        animations.push(lastAnimationFrame);\r\n\r\n        return animations;\r\n    }\r\n\r\n    calculateDistancePath(path, vertices, is3D){\r\n        var totalDist = 0;\r\n        for(let i = 0; i < path.length -1 ; i++){\r\n            totalDist += distance(vertices[path[i]], vertices[path[i+1]], is3D)\r\n        }\r\n        return Math.sqrt(totalDist)\r\n    }\r\n}\r\n\r\nfunction distance(v1, v2, is3D){\r\n    let dist = 0;\r\n    if(!is3D) dist = Math.pow(v1.x-v2.x,2) + Math.pow(v1.y-v2.y, 2);\r\n    if(is3D) dist = Math.pow(v1.x-v2.x,2) + Math.pow(v1.y-v2.y, 2) + Math.pow(v1.z-v2.z,2);\r\n    if(dist === 0) dist = 0.00000000000000000001;\r\n    return dist\r\n}\r\n\r\nexport default Opt2;","import AbstractTSPAlgorithm from \"./AbstractTSPAlgorithm\";\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\n\r\nclass Opt3 extends AbstractTSPAlgorithm{\r\n    constructor(){\r\n        super(\"3-Opt\")\r\n\r\n        this.iterations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Maximum Possible Swaps\",\r\n            100,\r\n            10000,\r\n            1,\r\n            5000);\r\n\r\n        this.simulations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Attempts Per Iteration\",\r\n            100,\r\n            200,\r\n            1,\r\n            100\r\n        )\r\n\r\n        this.selectedColor = AlgorithmSettingObject.newColorSetting(\r\n            \"Color\",\r\n            \"#ff0000\"\r\n        )\r\n\r\n        this.settings.push([this.iterations, this.simulations, this.selectedColor])\r\n        this.setRequiredProperty(\"Cycle\")\r\n    }\r\n\r\n    /**\r\n     * returns the settings of the Opt-2 algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param vertices\r\n     * @param edges\r\n     * @param is3D\r\n     * @returns {[]}\r\n     */\r\n    async getAnimations(vertices, edges, is3D){\r\n        //set up animations\r\n        const animations = [];\r\n        const firstFrameAnimation = [];\r\n        //set up intial cycle definitions & first animation\r\n        let path = [];\r\n        const initialColors = [];\r\n        const initialAlpha = [];\r\n        let root = edges[0].start;\r\n        initialColors.push(edges[0].color)\r\n        initialAlpha.push(edges[0].alpha)\r\n        firstFrameAnimation.push(edges[0].copyEdge())\r\n        path.push(root)\r\n\r\n        for(let i = 1; i < edges.length; i++){\r\n            path.push(edges[i].start);\r\n            initialColors.push(edges[i].color);\r\n            initialAlpha.push(edges[i].alpha);\r\n            firstFrameAnimation.push(edges[i].copyEdge())\r\n        }\r\n        path.push(root)\r\n        animations.push(firstFrameAnimation);\r\n\r\n        for(let j = 0; j < this.iterations.obj.value; j++){\r\n            //try and perform a swap that improves the below distance\r\n            let newPath = [];\r\n            let a; let b; let c; //v1, v2 and v3\r\n            let betterSolution = false;\r\n\r\n            for(let n = 0; n < this.simulations.obj.value; n++){\r\n                a = Math.floor(Math.random()*(path.length-3))+2;\r\n                b = Math.floor(Math.random()*(path.length-3))+2;\r\n                c = Math.floor(Math.random()*(path.length-3))+2;\r\n\r\n                [a,b,c] = [a,b,c].sort(function(a,b) {return a - b});\r\n                const values = this.reverseSegmentIfBetter(path, a, b, c, vertices, is3D);\r\n                newPath = values[0];\r\n                betterSolution = values[1];\r\n                if(betterSolution) {\r\n                    path = newPath\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(betterSolution){\r\n                const newEdges = [];\r\n                for(let i = 0; i < path.length - 1; i++){\r\n                    const e = edges[i].copyEdge();\r\n                    e.start = newPath[i];\r\n                    e.end = newPath[i+1];\r\n                    newEdges.push(e);\r\n                    if(i ===  a || i === b || i === c){\r\n                        newEdges[i].color = this.selectedColor.obj.value\r\n                        newEdges[i].alpha = 0.5\r\n                    } else{\r\n                        newEdges[i].color = initialColors[i]\r\n                        newEdges[i].alpha = initialAlpha[i];\r\n                    }\r\n                }\r\n                animations.push(newEdges)\r\n            }\r\n        }\r\n        //add one last animation where all the edges have their intial colors;\r\n        const lastAnimationFrame = [];\r\n        for(let i = 0; i < animations[animations.length-1].length; i++){\r\n            lastAnimationFrame.push(animations[animations.length-1][i].copyEdge());\r\n            lastAnimationFrame[i].color = initialColors[i];\r\n            lastAnimationFrame[i].alpha = initialAlpha[i];\r\n        }\r\n        animations.push(lastAnimationFrame);\r\n\r\n        return animations;\r\n    }\r\n\r\n    /**\r\n     * Checks the three end points and swap edges as necessary.\r\n     * @param path the original path\r\n     * @param i endpoint1\r\n     * @param j endpoint2\r\n     * @param k endpoint3\r\n     * @param v network vertices\r\n     * @param is3D is the network data three dimensional?\r\n     * @returns {(*|boolean)[]|(*[]|boolean)[]} newPath, is better solution?\r\n     */\r\n    reverseSegmentIfBetter(path, i, j, k, v, is3D){\r\n        let newPath = [];\r\n        const [A, B, C, D, E, F] = [path[i-1], path[i], path[j-1], path[j], path[k-1], path[k]]\r\n        const d0 = distance(v[A], v[B], is3D) + distance(v[C], v[D], is3D) + distance(v[E], v[F], is3D);\r\n        const d1 = distance(v[A], v[C], is3D) + distance(v[B], v[D], is3D) + distance(v[E], v[F], is3D);\r\n        const d2 = distance(v[A], v[B], is3D) + distance(v[C], v[E], is3D) + distance(v[D], v[F], is3D);\r\n        const d3 = distance(v[A], v[D], is3D) + distance(v[E], v[B], is3D) + distance(v[C], v[F], is3D);\r\n        const d4 = distance(v[F], v[B], is3D) + distance(v[C], v[D], is3D) + distance(v[E], v[A], is3D);\r\n\r\n        if(d0 > d1){\r\n            newPath = this.reversedPath(path, i - 1, j -1);\r\n            return [newPath, true];\r\n        } else if (d0 > d2){\r\n            newPath = this.reversedPath(path, j - 1, k - 1);\r\n            return [newPath, true];\r\n        } else if(d0 > d4){\r\n            newPath = this.reversedPath(path, i - 1, k - 1);\r\n            return [newPath, true];\r\n        } else if(d0 > d3){\r\n            newPath = this.reversedPathThree(path, i, j, k);\r\n            return [newPath, true];\r\n        }\r\n        return [path, false]\r\n    }\r\n\r\n    /**\r\n     * Reverse cycle path between two endpoints\r\n     * returns the reverse cycle\r\n     * @param path the original cycle\r\n     * @param a end point 1\r\n     * @param b end point 2\r\n     * @returns {[]}\r\n     */\r\n    reversedPath(path, a, b){\r\n        const new_path = [];\r\n        // console.log(path);\r\n        var root = path[0];\r\n        new_path.push(root);\r\n        for(let i = 0; i< a; i++){\r\n            new_path.push(path[i+1]);\r\n        }\r\n        for(let i = b-1; i > a-1; i--){\r\n            new_path.push(path[i+1]);\r\n        }\r\n        for(let i = b; i < path.length-1; i++){\r\n            new_path.push(path[i+1]);\r\n        }\r\n        // console.log(new_path);\r\n        return new_path;\r\n    }\r\n\r\n    /**\r\n     * reverse cycle path between three endpoints\r\n     * returns the reversed cycle\r\n     * @param path the original cycle\r\n     * @param i end point 1\r\n     * @param j end point 2\r\n     * @param k end point 3\r\n     * @returns {[]} reversed cycle\r\n     */\r\n    reversedPathThree(path, i, j, k){\r\n        const newPath = [];\r\n        let root = path[0];\r\n        newPath.push(root);\r\n        for(let n = 1; n < i; n++){\r\n            newPath.push(path[n]);\r\n        }\r\n        for(let n = j; n < k; n++){\r\n            newPath.push(path[n]);\r\n        }\r\n        for(let n = i; n< j; n++){\r\n            newPath.push(path[n]);\r\n        }\r\n        for(let n = k; n < path.length; n++){\r\n            newPath.push(path[n]);\r\n        }\r\n        return newPath;\r\n    }\r\n\r\n    calculateDistancePath(path, vertices, is3D){\r\n        var totalDist = 0;\r\n        for(let i = 0; i < path.length -1 ; i++){\r\n            totalDist += distance(vertices[path[i]], vertices[path[i+1]], is3D)\r\n        }\r\n        return Math.sqrt(totalDist)\r\n    }\r\n}\r\n\r\nfunction distance(v1, v2, is3D){\r\n    let dist = 0;\r\n    if(!is3D) dist = Math.pow(v1.x-v2.x,2) + Math.pow(v1.y-v2.y, 2);\r\n    if(is3D) dist = Math.pow(v1.x-v2.x,2) + Math.pow(v1.y-v2.y, 2) + Math.pow(v1.z-v2.z,2);\r\n    if(dist === 0) dist = 0.00000000000000000001;\r\n    return dist\r\n}\r\n\r\nexport default Opt3;","import AbstractTSPAlgorithm from \"./AbstractTSPAlgorithm\";\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\nimport LinearColorGradient from \"../../../datatypes/ColorGradient/LinearColorGradient\";\r\nimport PolarColorGradient from \"../../../datatypes/ColorGradient/PolarColorGradient\";\r\n\r\nclass Opt2Annealing extends AbstractTSPAlgorithm{\r\n    constructor(){\r\n        super(\"2-Opt Simulated Annealing\")\r\n\r\n        this.iterations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Maximum Possible Swaps\",\r\n            100,\r\n            10000,\r\n            1,\r\n            5025);\r\n\r\n        this.simulations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Attempts Per Iteration\",\r\n            100,\r\n            200,\r\n            1,\r\n            100\r\n        )\r\n\r\n        this.initialTemperature = AlgorithmSettingObject.newRangeSetting(\r\n            \"Initial System Temperature\",\r\n            50,\r\n            200,\r\n            1,\r\n            100\r\n        )\r\n\r\n        this.coolingHeuristic = AlgorithmSettingObject.newOptionSetting(\r\n            \"Temperature Cooling Heuristic\",\r\n            [\"Linear\", \"Exponential\"],\r\n            \"Exponential\"\r\n            )\r\n\r\n\r\n\r\n        this.temperatureGradient = AlgorithmSettingObject.newOptionSetting(\r\n            \"Temperature Color Gradient\",\r\n            [\"Polar\", \"Linear\"],\r\n            \"Linear\");\r\n\r\n        this.gradientSegments = AlgorithmSettingObject.newRangeSetting(\r\n            \"Color Gradient Segments\",\r\n            5,\r\n            30,\r\n            1,\r\n            10);\r\n\r\n        this.temperatureStartColor = AlgorithmSettingObject.newColorSetting(\r\n            \"Temperature Hot Color\",\r\n            \"#ff0000\"\r\n        );\r\n\r\n        this.temperatureEndColor = AlgorithmSettingObject.newColorSetting(\r\n            \"Temperature Cold Color\",\r\n            \"#0000ff\"\r\n        )\r\n\r\n        this.settings.push([\r\n            this.iterations,\r\n            this.simulations,\r\n            this.coolingHeuristic,\r\n            this.initialTemperature,\r\n            this.temperatureGradient,\r\n            this.gradientSegments,\r\n            this.temperatureStartColor,\r\n            this.temperatureEndColor]);\r\n\r\n        this.setRequiredProperty(\"Cycle\")\r\n        this.ACCEPTANCE = 0.0001;\r\n    }\r\n\r\n    /**\r\n     * returns the settings of the Opt-2 algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param vertices\r\n     * @param edges\r\n     * @param is3D\r\n     * @returns {[]}\r\n     */\r\n    async getAnimations(vertices, edges, is3D){\r\n        //set up animations\r\n        const animations = [];\r\n        const firstFrameAnimation = [];\r\n        const colorGradient = this.temperatureGradient.obj.value === \"Linear\"?\r\n            new LinearColorGradient(\r\n                this.temperatureStartColor.obj.value,\r\n                this.temperatureEndColor.obj.value,\r\n                this.gradientSegments.obj.value):\r\n            new PolarColorGradient(\r\n                this.temperatureStartColor.obj.value,\r\n                this.temperatureEndColor.obj.value,\r\n                this.gradientSegments.obj.value);\r\n\r\n        //set up intial cycle definitions & first animation\r\n        let temperature = this.initialTemperature.obj.value;\r\n        let path = [];\r\n        let currentEdges = edges;\r\n        let betterSolution = false;\r\n        let root = edges[0].start;\r\n        firstFrameAnimation.push(edges[0].copyEdge())\r\n        path.push(root)\r\n        var I = -1;\r\n        var K = -1;\r\n\r\n\r\n        for(let i = 1; i < edges.length; i++){\r\n            path.push(edges[i].start);\r\n            firstFrameAnimation.push(edges[i].copyEdge())\r\n        }\r\n        path.push(root)\r\n        animations.push(firstFrameAnimation);\r\n\r\n        for(let j = 0; j < this.iterations.obj.value; j++){\r\n            //try and perform a swap that improves the below distance\r\n            for(let n = 0; n < this.simulations.obj.value; n++){\r\n\r\n\r\n                var i = Math.floor(Math.random() *(path.length -2)) + 1;\r\n                var k = Math.floor(Math.random() * (path.length - 2)) + 1;\r\n\r\n\r\n                if(i > k){ //we swap the values just to make switching paths easier later\r\n                    const temp = i;\r\n                    i = k;\r\n                    k = temp;\r\n                }\r\n\r\n                const [A, B, C, D] = [path[i], path[i+1], path[k], path[k+1]]\r\n                const v = vertices;\r\n                let dist = distance(v[A], v[B], is3D) + distance(v[C], v[D], is3D);\r\n                let newDist = distance(v[A], v[C], is3D) + distance(v[B], v[D], is3D);\r\n\r\n\r\n\r\n                const accepted = Math.random()\r\n                if(newDist < dist || accepted < temperature* this.ACCEPTANCE) {\r\n                    let newPath = [];\r\n                    newPath.push(root);\r\n                    for(let m = 0; m < i; m ++){\r\n\r\n                        newPath.push(path[m+1]);\r\n                    }\r\n\r\n                    for(let m = k- 1; m > i -1; m--){\r\n                        newPath.push(path[m+1]);\r\n                    }\r\n\r\n                    for(let m = k; m < path.length -1; m++){\r\n                        newPath.push(path[m+1])\r\n                    }\r\n                    dist = newDist\r\n                    betterSolution = true;\r\n                    path = newPath\r\n                    I = i;\r\n                    K = k;\r\n                    break;\r\n                }\r\n\r\n            }\r\n            if(betterSolution) {\r\n                const newEdges = [];\r\n                for(let i = 0; i < path.length - 1; i++){\r\n                    const e = currentEdges[i].copyEdge();\r\n                    e.start = path[i];\r\n                    e.end = path[i+1];\r\n                    newEdges.push(e);\r\n                    if(i === I || i === K){\r\n                        let degree = (this.initialTemperature.obj.value - temperature)/(this.initialTemperature.obj.value)\r\n                        degree = Math.floor(degree * this.gradientSegments.obj.value)\r\n                        newEdges[i].color = colorGradient.getColorGradientColor({degree: degree}, 0)\r\n                        newEdges[i].alpha = 0.5\r\n                    }\r\n                }\r\n                animations.push(newEdges)\r\n                temperature = this.cool(temperature, j)\r\n                currentEdges = newEdges;\r\n\r\n            }\r\n        }\r\n\r\n        return animations;\r\n    }\r\n\r\n    /**\r\n     * Applies the cooling heuristic to the temperature based on the user selected cooling heuristic\r\n     * @param temperature\r\n     * @param i the iteration of the algorithm we are on\r\n     * @returns {*}\r\n     */\r\n    cool(temperature,  i){\r\n        if(this.coolingHeuristic.obj.value === \"Linear\"){\r\n            return this.initialTemperature.obj.value * (this.iterations.obj.value - i)/(this.iterations.obj.value)\r\n        } else if(this.coolingHeuristic.obj.value === \"Exponential\"){\r\n            return 0.996 * temperature;\r\n        }\r\n        return temperature\r\n    }\r\n\r\n    calculateDistancePath(path, vertices, is3D){\r\n        var totalDist = 0;\r\n        for(let i = 0; i < path.length -1 ; i++){\r\n            totalDist += distance(vertices[path[i]], vertices[path[i+1]], is3D)\r\n        }\r\n        return Math.sqrt(totalDist)\r\n    }\r\n\r\n    copyAllEdges(edges){\r\n        const res = [];\r\n        edges.forEach((e) => res.push(e.copyEdge()))\r\n        return res;\r\n    }\r\n}\r\n\r\nfunction distance(v1, v2, is3D){\r\n    let dist = 0;\r\n    if(!is3D) dist = Math.pow(v1.x-v2.x,2) + Math.pow(v1.y-v2.y, 2);\r\n    if(is3D) dist = Math.pow(v1.x-v2.x,2) + Math.pow(v1.y-v2.y, 2) + Math.pow(v1.z-v2.z,2);\r\n    if(dist === 0) dist = 0.00000000000000000001;\r\n    return dist\r\n}\r\n\r\nexport default Opt2Annealing;","import AbstractTSPAlgorithm from \"./AbstractTSPAlgorithm\";\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\nimport LinearColorGradient from \"../../../datatypes/ColorGradient/LinearColorGradient\";\r\nimport PolarColorGradient from \"../../../datatypes/ColorGradient/PolarColorGradient\";\r\n\r\nclass Opt3Annealing extends AbstractTSPAlgorithm{\r\n    constructor(){\r\n        super(\"3-Opt Simulated Annealing\")\r\n\r\n        this.iterations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Maximum Possible Swaps\",\r\n            100,\r\n            10000,\r\n            1,\r\n            5025);\r\n\r\n        this.simulations = AlgorithmSettingObject.newRangeSetting(\r\n            \"Attempts Per Iteration\",\r\n            100,\r\n            200,\r\n            1,\r\n            100\r\n        )\r\n\r\n        this.initialTemperature = AlgorithmSettingObject.newRangeSetting(\r\n            \"Initial System Temperature\",\r\n            50,\r\n            200,\r\n            1,\r\n            100\r\n        )\r\n\r\n        this.coolingHeuristic = AlgorithmSettingObject.newOptionSetting(\r\n            \"Temperature Cooling Heuristic\",\r\n            [\"Linear\", \"Exponential\"],\r\n            \"Exponential\"\r\n        )\r\n\r\n\r\n\r\n        this.temperatureGradient = AlgorithmSettingObject.newOptionSetting(\r\n            \"Temperature Color Gradient\",\r\n            [\"Polar\", \"Linear\"],\r\n            \"Linear\");\r\n\r\n        this.gradientSegments = AlgorithmSettingObject.newRangeSetting(\r\n            \"Color Gradient Segments\",\r\n            5,\r\n            30,\r\n            1,\r\n            10);\r\n\r\n        this.temperatureStartColor = AlgorithmSettingObject.newColorSetting(\r\n            \"Temperature Hot Color\",\r\n            \"#ff0000\"\r\n        );\r\n\r\n        this.temperatureEndColor = AlgorithmSettingObject.newColorSetting(\r\n            \"Temperature Cold Color\",\r\n            \"#0000ff\"\r\n        )\r\n\r\n        this.settings.push([\r\n            this.iterations,\r\n            this.simulations,\r\n            this.coolingHeuristic,\r\n            this.initialTemperature,\r\n            this.temperatureGradient,\r\n            this.gradientSegments,\r\n            this.temperatureStartColor,\r\n            this.temperatureEndColor]);\r\n\r\n        this.setRequiredProperty(\"Cycle\")\r\n        this.ACCEPTANCE = 0.0001;\r\n    }\r\n\r\n    /**\r\n     * returns the settings of the Opt-2 algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param vertices\r\n     * @param edges\r\n     * @param is3D\r\n     * @returns {[]}\r\n     */\r\n    async getAnimations(vertices, edges, is3D){\r\n        let temperature = this.initialTemperature.obj.value;\r\n        const colorGradient = this.temperatureGradient.obj.value === \"Linear\"?\r\n            new LinearColorGradient(\r\n                this.temperatureStartColor.obj.value,\r\n                this.temperatureEndColor.obj.value,\r\n                this.gradientSegments.obj.value):\r\n            new PolarColorGradient(\r\n                this.temperatureStartColor.obj.value,\r\n                this.temperatureEndColor.obj.value,\r\n                this.gradientSegments.obj.value);\r\n\r\n        //set up intial cycle definitions & first animation\r\n\r\n        //set up animations\r\n        const animations = [];\r\n        const firstFrameAnimation = [];\r\n        //set up intial cycle definitions & first animation\r\n        let path = [];\r\n\r\n        let root = edges[0].start;\r\n\r\n        firstFrameAnimation.push(edges[0].copyEdge())\r\n        path.push(root)\r\n\r\n        for(let i = 1; i < edges.length; i++){\r\n            path.push(edges[i].start);\r\n            firstFrameAnimation.push(edges[i].copyEdge())\r\n        }\r\n\r\n        path.push(root)\r\n        animations.push(firstFrameAnimation);\r\n        let currentEdges = firstFrameAnimation;\r\n        for(let j = 0; j < this.iterations.obj.value; j++){\r\n            //try and perform a swap that improves the below distance\r\n            let newPath = [];\r\n            let a; let b; let c; //v1, v2 and v3\r\n            let betterSolution = false;\r\n\r\n            for(let n = 0; n < this.simulations.obj.value; n++){\r\n                a = Math.floor(Math.random()*(path.length-3))+2;\r\n                b = Math.floor(Math.random()*(path.length-3))+2;\r\n                c = Math.floor(Math.random()*(path.length-3))+2;\r\n\r\n                [a,b,c] = [a,b,c].sort(function(a,b) {return a - b});\r\n                const values = this.reverseSegmentIfBetter(path, a, b, c, vertices, is3D, temperature);\r\n                newPath = values[0];\r\n                betterSolution = values[1];\r\n                if(betterSolution) {\r\n                    path = newPath\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(betterSolution){\r\n                const newEdges = [];\r\n                for(let i = 0; i < path.length - 1; i++){\r\n                    const e = currentEdges[i].copyEdge();\r\n                    e.start = newPath[i];\r\n                    e.end = newPath[i+1];\r\n                    newEdges.push(e);\r\n                    if(i ===  a || i === b || i === c){\r\n                        let degree = (this.initialTemperature.obj.value - temperature)/(this.initialTemperature.obj.value)\r\n                        degree = Math.floor(degree * this.gradientSegments.obj.value)\r\n                        newEdges[i].color = colorGradient.getColorGradientColor({degree: degree}, 0)\r\n                        newEdges[i].alpha = 0.5\r\n                    }\r\n                }\r\n                animations.push(newEdges)\r\n                currentEdges = newEdges\r\n                temperature = this.cool(temperature, j)\r\n            }\r\n        }\r\n\r\n        return animations;\r\n    }\r\n\r\n    /**\r\n     * Checks the three end points and swap edges as necessary.\r\n     * @param path the original path\r\n     * @param i endpoint1\r\n     * @param j endpoint2\r\n     * @param k endpoint3\r\n     * @param v network vertices\r\n     * @param is3D is the network data three dimensional?\r\n     * @returns {(*|boolean)[]|(*[]|boolean)[]} newPath, is better solution?\r\n     */\r\n    reverseSegmentIfBetter(path, i, j, k, v, is3D, temperature){\r\n        let newPath = [];\r\n        const [A, B, C, D, E, F] = [path[i-1], path[i], path[j-1], path[j], path[k-1], path[k]]\r\n        const d0 = distance(v[A], v[B], is3D) + distance(v[C], v[D], is3D) + distance(v[E], v[F], is3D);\r\n        const d1 = distance(v[A], v[C], is3D) + distance(v[B], v[D], is3D) + distance(v[E], v[F], is3D);\r\n        const d2 = distance(v[A], v[B], is3D) + distance(v[C], v[E], is3D) + distance(v[D], v[F], is3D);\r\n        const d3 = distance(v[A], v[D], is3D) + distance(v[E], v[B], is3D) + distance(v[C], v[F], is3D);\r\n        const d4 = distance(v[F], v[B], is3D) + distance(v[C], v[D], is3D) + distance(v[E], v[A], is3D);\r\n        const accepted = Math.random()\r\n        if(d0 > d1 || accepted < temperature* this.ACCEPTANCE){\r\n            newPath = this.reversedPath(path, i - 1, j -1);\r\n            return [newPath, true];\r\n        } else if (d0 > d2 || accepted < temperature* this.ACCEPTANCE){\r\n            newPath = this.reversedPath(path, j - 1, k - 1);\r\n            return [newPath, true];\r\n        } else if(d0 > d4 || accepted < temperature* this.ACCEPTANCE){\r\n            newPath = this.reversedPath(path, i - 1, k - 1);\r\n            return [newPath, true];\r\n        } else if(d0 > d3 || accepted < temperature* this.ACCEPTANCE){\r\n            newPath = this.reversedPathThree(path, i, j, k);\r\n            return [newPath, true];\r\n        }\r\n        return [path, false]\r\n    }\r\n\r\n    /**\r\n     * Reverse cycle path between two endpoints\r\n     * returns the reverse cycle\r\n     * @param path the original cycle\r\n     * @param a end point 1\r\n     * @param b end point 2\r\n     * @returns {[]}\r\n     */\r\n    reversedPath(path, a, b){\r\n        const new_path = [];\r\n        // console.log(path);\r\n        var root = path[0];\r\n        new_path.push(root);\r\n        for(let i = 0; i< a; i++){\r\n            new_path.push(path[i+1]);\r\n        }\r\n        for(let i = b-1; i > a-1; i--){\r\n            new_path.push(path[i+1]);\r\n        }\r\n        for(let i = b; i < path.length-1; i++){\r\n            new_path.push(path[i+1]);\r\n        }\r\n        // console.log(new_path);\r\n        return new_path;\r\n    }\r\n\r\n    /**\r\n     * reverse cycle path between three endpoints\r\n     * returns the reversed cycle\r\n     * @param path the original cycle\r\n     * @param i end point 1\r\n     * @param j end point 2\r\n     * @param k end point 3\r\n     * @returns {[]} reversed cycle\r\n     */\r\n    reversedPathThree(path, i, j, k){\r\n        const newPath = [];\r\n        let root = path[0];\r\n        newPath.push(root);\r\n        for(let n = 1; n < i; n++){\r\n            newPath.push(path[n]);\r\n        }\r\n        for(let n = j; n < k; n++){\r\n            newPath.push(path[n]);\r\n        }\r\n        for(let n = i; n< j; n++){\r\n            newPath.push(path[n]);\r\n        }\r\n        for(let n = k; n < path.length; n++){\r\n            newPath.push(path[n]);\r\n        }\r\n        return newPath;\r\n    }\r\n\r\n    /**\r\n     * Applies the cooling heuristic to the temperature based on the user selected cooling heuristic\r\n     * @param temperature\r\n     * @param i the iteration of the algorithm we are on\r\n     * @returns {*}\r\n     */\r\n    cool(temperature,  i){\r\n        if(this.coolingHeuristic.obj.value === \"Linear\"){\r\n            return this.initialTemperature.obj.value * (this.iterations.obj.value - i)/(this.iterations.obj.value)\r\n        } else if(this.coolingHeuristic.obj.value === \"Exponential\"){\r\n            return 0.996 * temperature;\r\n        }\r\n        return temperature\r\n    }\r\n\r\n    calculateDistancePath(path, vertices, is3D){\r\n        var totalDist = 0;\r\n        for(let i = 0; i < path.length -1 ; i++){\r\n            totalDist += distance(vertices[path[i]], vertices[path[i+1]], is3D)\r\n        }\r\n        return Math.sqrt(totalDist)\r\n    }\r\n\r\n    copyAllEdges(edges){\r\n        const res = [];\r\n        edges.forEach((e) => res.push(e.copyEdge()))\r\n        return res;\r\n    }\r\n}\r\n\r\nfunction distance(v1, v2, is3D){\r\n    let dist = 0;\r\n    if(!is3D) dist = Math.pow(v1.x-v2.x,2) + Math.pow(v1.y-v2.y, 2);\r\n    if(is3D) dist = Math.pow(v1.x-v2.x,2) + Math.pow(v1.y-v2.y, 2) + Math.pow(v1.z-v2.z,2);\r\n    if(dist === 0) dist = 0.00000000000000000001;\r\n    return dist\r\n}\r\n\r\nexport default Opt3Annealing;","import AbstractVertexColoringAlgorithm from \"./AbstractVertexColoringAlgorithm\";\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\nimport LinearColorGradient from \"../../../datatypes/ColorGradient/LinearColorGradient\";\r\nimport PolarColorGradient from \"../../../datatypes/ColorGradient/PolarColorGradient\";\r\n\r\nclass GreedyVertexColoring extends AbstractVertexColoringAlgorithm{\r\n    constructor(){\r\n        super(\"Greedy Vertex Coloring\")\r\n\r\n        this.gradientType = AlgorithmSettingObject.newOptionSetting(\r\n            \"Color Gradient Type\",\r\n            [\"Polar\", \"Linear\"],\r\n            \"Polar\")\r\n\r\n        this.startColor = AlgorithmSettingObject.newColorSetting(\"Start Color\", \"#ff0000\")\r\n\r\n        this.endColor = AlgorithmSettingObject.newColorSetting(\"End Color\", \"#00ffff\");\r\n\r\n        this.settings.push([this.gradientType, this.startColor, this.endColor]);\r\n        this.setRequiredProperty(null);\r\n    }\r\n\r\n    /**\r\n     * returns the settings of the Opt-2 algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     * Greedy vertex coloring assigns the first color possible that isnt directly adjacent to it\r\n     * @param vertices\r\n     * @param edges\r\n     * @param is3D\r\n     * @returns {[]} animations of greedy vertex algorithm\r\n     */\r\n    async getAnimations(vertices, edges, is3D){\r\n        const animations = [];\r\n        const initialVertices = this.createAnimationFrame(vertices) //create copy of network vertices\r\n        animations.push(initialVertices)\r\n\r\n        let maxDegree = -Infinity;\r\n        let minDegree = Infinity;\r\n        const assignedColors = new Array(vertices.length).fill(-1);\r\n\r\n        for(let i = 0; i < vertices.length; i ++){\r\n            maxDegree = Math.max(maxDegree, vertices[i].degree);\r\n            minDegree = Math.min(minDegree, vertices[i].degree);\r\n        }\r\n        const numColors = maxDegree - minDegree + 1;\r\n        const adj = this.createAdjacencyMatrix(vertices, edges);\r\n        const colors = this.gradientType.obj.type === \"Linear\"?\r\n            new LinearColorGradient(this.startColor.obj.value, this.endColor.obj.value, numColors):\r\n            new PolarColorGradient(this.startColor.obj.value, this.endColor.obj.value, numColors);\r\n\r\n        let currentVertices = initialVertices;\r\n\r\n        for(let i = 0; i < vertices.length; i++){\r\n            const neighbors = this.getNeighbors(vertices, i, adj);\r\n            const availableColors = this.getAvailableColors(assignedColors, neighbors, colors);\r\n            const newColor = availableColors[0]\r\n            currentVertices = this.createAnimationFrame(currentVertices, i, newColor);\r\n            assignedColors[i] = newColor\r\n            animations.push(currentVertices);\r\n        }\r\n\r\n        return animations;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation frame of the current network by copying all its vertices and assigning a color if possible\r\n     * @param vertices the vertices to copy\r\n     * @param updateIndex vertex to update\r\n     * @param color the color string value to set\r\n     * @returns {Vertex[]}\r\n     */\r\n    createAnimationFrame(vertices, updateIndex, color){\r\n        const res = [];\r\n        for(let i = 0; i < vertices.length; i++){\r\n            res.push(vertices[i].copyVertex());\r\n            if(i === updateIndex){\r\n                res[res.length -1].color = color\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    getAvailableColors(assignedColors, neighbors, colors){\r\n        const allColors = [];\r\n        const availableColors = [];\r\n\r\n        neighbors.forEach((neighbor) => {\r\n            if(assignedColors[neighbor] !== -1) {\r\n                allColors.push(assignedColors[neighbor]);\r\n            }\r\n        });\r\n\r\n        colors.colorGradient.forEach((gradientColor) => {\r\n            if(!checkColorIn(gradientColor, allColors)) availableColors.push(gradientColor)\r\n        });\r\n\r\n        return availableColors;\r\n    }\r\n\r\n    /**\r\n     * Gets the neighbors of vertex of index index\r\n     * @param vertices the vertices of the network\r\n     * @param index the index of the vertex whose neighbors we want to find\r\n     * @param adj the adjacency matrix of the network\r\n     * @returns neighbor vertices\r\n     */\r\n    getNeighbors(vertices, index, adj){\r\n        const neighbors = [];\r\n        for(let i = 0; i < vertices.length; i ++){\r\n            if(adj[index][i] === 1) neighbors.push(i);\r\n        }\r\n        return neighbors;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether or not provided color in the provided color list\r\n * @param color\r\n * @param colorList\r\n * @returns {boolean} color is in color list\r\n */\r\nfunction checkColorIn(color, colorList){\r\n    for(let i = 0; i < colorList.length; i++){\r\n        if(color === colorList[i]) return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport default GreedyVertexColoring;","import AbstractNetworkAlgorithm from \"../AbstractNetworkAlgorithm\";\r\n\r\nclass AbstractVertexColoringAlgorithm extends AbstractNetworkAlgorithm{\r\n    constructor(name){\r\n        super(name)\r\n        this.setRequiredProperty(null)\r\n    }\r\n    /**\r\n     * In Vertex coloring algorithms we want\r\n     * to assign new vertex colors to the network\r\n     * @param network the network we want to change\r\n     * @param animations\r\n     * @param currentStep\r\n     * @param actualSteps\r\n     */\r\n    applyAnimation(network, animations, currentStep, actualSteps) {\r\n        network.vertices = animations[currentStep + actualSteps]\r\n    }\r\n\r\n}\r\n\r\nexport default AbstractVertexColoringAlgorithm;","import AbstractEdgeColoringAlgorithm from \"./AbstractEdgeColoringAlgorithm\";\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\nimport PolarColorGradient from \"../../../datatypes/ColorGradient/PolarColorGradient\";\r\nimport LinearColorGradient from \"../../../datatypes/ColorGradient/LinearColorGradient\";\r\n\r\nclass MisraGries extends AbstractEdgeColoringAlgorithm{\r\n    constructor(){\r\n        super(\"Misra-Gries Edge Coloring\")\r\n\r\n        this.gradientType = AlgorithmSettingObject.newOptionSetting(\r\n            \"Gradient \",\r\n            [\"Polar\", \"Linear\"],\r\n            \"Polar\");\r\n\r\n        this.startColor = AlgorithmSettingObject.newColorSetting(\"Start Color\", \"#ff0000\");\r\n        this.endColor = AlgorithmSettingObject.newColorSetting(\"End Color\", \"#00ffff\");\r\n\r\n        this.settings.push([this.gradientType, this.startColor, this.endColor]);\r\n        this.setRequiredProperty(\"Connected\")\r\n    }\r\n\r\n    /**\r\n     * gets the settings of the misra-gries algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     * Returns the animations for the misra gries algorithm given the vertices and edges of the network.\r\n     * @param vertices\r\n     * @param edges\r\n     * @param is3D\r\n     * @returns {[]}\r\n     */\r\n    async getAnimations(vertices, edges, is3D) {\r\n        //setting up animation variables\r\n        const animations = [];\r\n        const initialColors = [];\r\n        const initialAlpha = [];\r\n        for(let i = 0; i < edges.length; i++){\r\n            initialColors.push(edges[i].color);\r\n            initialAlpha.push(edges[i].alpha);\r\n        }\r\n        const firstFrame = this.createAnimationFrame(edges);\r\n        animations.push(firstFrame);\r\n\r\n        let maxDegree = -Infinity;\r\n        vertices.forEach((v) => {maxDegree = Math.max(v.degree, maxDegree)})\r\n        const numColors = maxDegree + 1;\r\n        const colorGradient = this.gradientType.obj.value === \"Linear\"?\r\n            new LinearColorGradient(this.startColor.obj.value, this.endColor.obj.value, numColors):\r\n            new PolarColorGradient(this.startColor.obj.value, this.endColor.obj.value, numColors);\r\n        this.gradient = colorGradient\r\n\r\n        //Pre-Calculate some arrays/lists so that check incident colors/needed colors/fan colors become constant time\r\n        let incidentVertices = {}\r\n        vertices.forEach((v,index) => incidentVertices[index] = []);\r\n        edges.forEach((e) => {\r\n            incidentVertices[e.start].push(e.end);\r\n        });\r\n        this.incidentVertices = incidentVertices;\r\n        let incidentColors = {};\r\n\r\n        for(const key in incidentVertices) {\r\n            incidentColors[key] = [];\r\n        }\r\n        this.incidentColors = incidentColors;\r\n        let edgeColors = {};\r\n        edges.forEach((e) => {edgeColors[this.getIndex(e.start, e.end)] = null;})\r\n        this.edgeColors = edgeColors;\r\n\r\n        let currentEdges = firstFrame;\r\n        let uncoloredEdges = this.createAnimationFrame(edges);\r\n\r\n        uncoloredEdges.sort(function(a,b){\r\n            const [a1, a2] = a.start< a.end? [a.start, a.end]: [a.end,a.start];\r\n            const [b1, b2] = b.start < b.end? [b.start, b.end] : [b.end, b.start];\r\n            return a1 - b1 !== 0?a1 - b1: a2-b2;\r\n        })\r\n        //ACTUAL ALGORITHM\r\n        while(uncoloredEdges.length > 0){\r\n\r\n            const e = uncoloredEdges.pop();\r\n            const [u, v] = this.getIndex(e.start, e.end)\r\n\r\n            let fan = this.createFan(u,v);\r\n\r\n            let c = this.pickColor(u);\r\n            let d = this.pickColor(fan[fan.length-1]);\r\n\r\n            this.invertPath(u, c, d)\r\n\r\n            const fanPrime = [fan[0]];\r\n            for(let i = 1; i < fan.length; i++){\r\n                const freeColors = this.getFreeColors(fan[i]);\r\n                const index = this.getIndex(u, fanPrime[fanPrime.length-1])\r\n                let shouldAdd = freeColors.includes(this.edgeColors[index]);\r\n\r\n                if(shouldAdd) fanPrime.push(fan[i])\r\n\r\n            }\r\n\r\n            this.rotateFan(fanPrime, u);\r\n\r\n            this.edgeColors[this.getIndex(fanPrime[fanPrime.length-1], u)] = d;\r\n\r\n            //update animations edges\r\n            const newEdges = this.createAnimationFrame(currentEdges)\r\n            for(let i = 0; i < newEdges.length; i++){\r\n                const index = this.getIndex(newEdges[i].start, newEdges[i].end);\r\n                if(this.edgeColors[index] === null){\r\n                    newEdges[i].color = initialColors[i];\r\n                    newEdges[i].alpha = initialAlpha[i];\r\n                } else{\r\n                    newEdges[i].color = this.edgeColors[index]\r\n                    newEdges[i].alpha = 0.5;\r\n                }\r\n\r\n            }\r\n\r\n            animations.push(newEdges);\r\n            currentEdges = newEdges\r\n        }\r\n\r\n\r\n        return animations;\r\n    }\r\n\r\n\r\n    invertPath(startVertex, c, d){\r\n        if(c === d) return;\r\n\r\n        let searching = true;\r\n        let lastVertex = startVertex\r\n        let currentVertex = startVertex;\r\n\r\n        while(searching){\r\n            searching = false;\r\n            for(let i = 0; i < this.incidentVertices[currentVertex]; i++){\r\n                const v = this.incidentVertices[currentVertex][i];\r\n                if(v === lastVertex) continue;\r\n\r\n                const index = this.getIndex(currentVertex, v);\r\n                if(this.edgeColors[index] === c || this.edgeColors[index] === d){\r\n                    this.switchColors(currentVertex, v, c, d);\r\n                    searching = true;\r\n                    lastVertex = currentVertex;\r\n                    currentVertex = v;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches color c to color d and vice versa for an edge connecting vertex v1 and vertex v2\r\n     * @param v1\r\n     * @param v2\r\n     * @param c\r\n     * @param d\r\n     */\r\n    switchColors(v1, v2, c, d){\r\n        const index = this.getIndex(v1, v2)\r\n        let newColor = this.edgeColors[index];\r\n        if(this.edgeColors[index] === c) {newColor = d}\r\n        else if(this.edgeColors[index] === d){newColor = c}\r\n        this.edgeColors[index] = newColor\r\n    }\r\n\r\n    /**\r\n     * Creates a fan centered at center vertex, starting at uncolored startVertex\r\n     * as defined by the Misra-Gries coloring algorithm\r\n     * @param centerVertex\r\n     * @param startVertex\r\n     * @returns {[][]} the fan\r\n     */\r\n    createFan(centerVertex, startVertex){\r\n        const fan = [];\r\n\r\n        if(!this.isUncolored(centerVertex, startVertex)) throw new Error(\"unassigned edge should not have a color\");\r\n        fan.push(startVertex);\r\n\r\n        const startIndex = this.incidentVertices[centerVertex].indexOf(startVertex);\r\n\r\n        let incidentNotStart = this.incidentVertices[centerVertex].slice(0, startIndex).concat(\r\n            this.incidentVertices[centerVertex].slice(startIndex+1)\r\n        );\r\n\r\n        let lastAdded = startVertex;\r\n        let maximal = false;\r\n        while(!maximal){\r\n            maximal = true;\r\n            const freeColors = this.getFreeColors(lastAdded);\r\n            for(let i = 0; i < incidentNotStart.length; i++){\r\n                const color = this.edgeColors[this.getIndex(centerVertex, incidentNotStart[i])]\r\n                if(color === null){\r\n                    // do nothing\r\n                } else if(freeColors.includes(color)){\r\n                    fan.push(incidentNotStart[i]);\r\n                    lastAdded = incidentNotStart[i];\r\n                    incidentNotStart = incidentNotStart.slice(0, i).concat(incidentNotStart.slice(i+1))\r\n                    maximal = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return fan\r\n    }\r\n\r\n    /**\r\n     * Get free colors on a vertex\r\n     * @param vertex\r\n     * @returns {[]} free colors\r\n     */\r\n    getFreeColors(vertex){\r\n        const incident = this.incidentVertices[vertex];\r\n        const takenColors = [];\r\n        const freeColors = [];\r\n        for(let i = 0; i < incident.length; i++){\r\n            const color = this.edgeColors[this.getIndex(vertex, incident[i])]\r\n            if(color !== null) {\r\n                takenColors.push(color)\r\n            }\r\n        }\r\n        for(let i = 0; i < this.gradient.colorGradient.length; i++){\r\n            const c = this.gradient.colorGradient[i];\r\n            let valid = true;\r\n            for(let j = 0; j < takenColors.length; j++){\r\n                const d = takenColors[j];\r\n                if(c === d){\r\n                    valid = false;\r\n                    break;\r\n                }\r\n            }\r\n            if(valid) freeColors.push(c);\r\n        }\r\n        return freeColors;\r\n    }\r\n\r\n\r\n    /**\r\n     * Rotates the fan according to the misra gries algorithm\r\n     * @param fan\r\n     * @param centerVertex\r\n     * @param edgeColors\r\n     */\r\n    rotateFan(fan, centerVertex){\r\n        for(let i = 0; i < fan.length-1; i++){\r\n            const curIndex = this.getIndex(centerVertex, fan[i]);\r\n            const nextIndex = this.getIndex(centerVertex, fan[i+1]);\r\n            this.edgeColors[curIndex] = this.edgeColors[nextIndex];\r\n        }\r\n        this.edgeColors[this.getIndex(centerVertex, fan[fan.length-1])] = null\r\n    }\r\n\r\n    /**\r\n     * Picks a color in the color gradient that is free on the vertex\r\n     * @param vertex\r\n     */\r\n    pickColor(vertex){\r\n        const freeColors = this.getFreeColors(vertex)\r\n        if(freeColors.length === 0) throw new Error(\"no free colors on vertex\", vertex);\r\n        return freeColors[0];\r\n    }\r\n\r\n    /**\r\n     * Checks if an edge is uncolored\r\n     * @param u\r\n     * @param v\r\n     */\r\n    isUncolored(u, v){\r\n        return this.edgeColors[this.getIndex(u,v)] === null;\r\n    }\r\n\r\n    /**\r\n     * Returns sorted array of 2 edge endpoints\r\n     * @param a\r\n     * @param b\r\n     * @returns {*[]}\r\n     */\r\n    getIndex(a, b){\r\n        if(a < b){\r\n            return [a, b]\r\n        }\r\n        return [b, a]\r\n    }\r\n\r\n\r\n    /**\r\n     * Create an animation frame by copying the current \"state\" of the algorithms edges\r\n     * @param edges\r\n     * @returns {[]}\r\n     */\r\n    createAnimationFrame(edges){\r\n        const res = [];\r\n        edges.forEach((e) => {res.push(e.copyEdge())});\r\n        return res;\r\n    }\r\n}\r\n\r\nexport default MisraGries","import AbstractNetworkAlgorithm from \"../AbstractNetworkAlgorithm\";\r\n\r\nclass AbstractEdgeColoringAlgorithm extends AbstractNetworkAlgorithm{\r\n    /**\r\n     * In edge coloring algorithms we store the a copy of the deges as they are being colored\r\n     * @param network the network we want to change\r\n     * @param animations\r\n     * @param currentStep\r\n     * @param actualSteps\r\n     */\r\n    applyAnimation(network, animations, currentStep, actualSteps) {\r\n        network.edges = animations[currentStep + actualSteps]\r\n    }\r\n\r\n}\r\n\r\nexport default AbstractEdgeColoringAlgorithm;","import AbstractNetworkAlgorithm from \"../AbstractNetworkAlgorithm\";\r\n\r\nclass AbstractMinimumSpanningTreeAlgorithm extends AbstractNetworkAlgorithm{\r\n    constructor(name){\r\n        super(name)\r\n        this.setRequiredProperty(\"Connected\")\r\n    }\r\n    /**\r\n     * In minimum spanning trees we color both the vertices and edges\r\n     * @param network the network we want to change\r\n     * @param animations\r\n     * @param currentStep\r\n     * @param actualSteps\r\n     */\r\n    applyAnimation(network, animations, currentStep, actualSteps) {\r\n        network.vertices = animations[currentStep + actualSteps].vertices;\r\n        network.edges = animations[currentStep + actualSteps].edges;\r\n    }\r\n\r\n}\r\n\r\nexport default AbstractMinimumSpanningTreeAlgorithm","class UnionSets{\r\n  constructor(){\r\n    this.contents = [];\r\n    this.representative = null;\r\n  }\r\n\r\n  add(el){\r\n    if(this.contents.length === 0) this.representative = el;\r\n    this.contents.push(el);\r\n\r\n  }\r\n\r\n  push(contents){\r\n    for(let i = 0; i < contents.length; i++){\r\n      this.contents.push(contents[i]);\r\n    }\r\n  }\r\n\r\n  setRepresentative(v){\r\n    this.representative = v;\r\n  }\r\n\r\n  getRepresentative(){\r\n    return this.representative;\r\n  }\r\n\r\n  union(other){\r\n    this.setRepresentative(other.getRepresentative);\r\n  }\r\n\r\n}\r\n\r\nexport default UnionSets;\r\n","import AbstractMinimumSpanningTreeAlgorithm from \"./AbstractMinimumSpanningTreeAlgorithm\";\r\nimport UnionSets from \"../../../datatypes/UnionSets\";\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\n\r\nclass Kruskal extends AbstractMinimumSpanningTreeAlgorithm{\r\n    constructor(){\r\n        super(\"Kruskal MST\")\r\n\r\n        this.color = AlgorithmSettingObject.newColorSetting(\"Color\", \"#ff0000\");\r\n        this.settings.push([this.color]);\r\n    }\r\n\r\n    /**\r\n     * gets the settings of the Kruskal algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     * Gets the animations for Kruskal's minimum spanning tree algorithm\r\n     * @param vertices\r\n     * @param edges\r\n     * @param is3D\r\n     * @returns {[]}\r\n     */\r\n    async getAnimations(vertices, edges, is3D){\r\n        //Initial animation frame\r\n        const animations = [];\r\n        const firstFrame = this.createAnimationFrame(vertices, edges);\r\n        animations.push(firstFrame);\r\n\r\n        //set up animation variables\r\n        let currentVertices = firstFrame.vertices\r\n        let currentEdges = firstFrame.edges\r\n\r\n        const color = this.color.obj.value;\r\n\r\n\r\n        //first we need to sort the edges by increasing weight(distance)\r\n        var sortedEdges = edges.sort(function(e1, e2){\r\n            return distance(vertices[e1.start], vertices[e1.end], is3D) - distance(vertices[e2.start], vertices[e2.end], is3D);\r\n        })\r\n\r\n        const trees = [];\r\n        const treeIndices = [];\r\n        vertices.forEach((v, index) => {\r\n            const u = new UnionSets();\r\n            u.add(index);\r\n            trees.push(u);\r\n            treeIndices.push(index);\r\n        });\r\n\r\n        for(let e = 0; e < sortedEdges.length; e++){\r\n            const u = sortedEdges[e].start;\r\n            const v = sortedEdges[e].end;\r\n\r\n            if(treeIndices[u] !== treeIndices[v]){\r\n                trees[treeIndices[u]].push(trees[treeIndices[v]].contents);\r\n                const representative = treeIndices[v];\r\n                for(let i = 0; i < treeIndices.length; i++){\r\n                    if(treeIndices[i] === representative){\r\n                        treeIndices[i] = treeIndices[u];\r\n                        trees[treeIndices[i]].contents = [];\r\n                    }\r\n                }\r\n\r\n                const animationFrame = this.createAnimationFrame(currentVertices, currentEdges);\r\n                animationFrame.vertices[u].color = color;\r\n                animationFrame.edges[e].color = color;\r\n                if(!is3D) animationFrame.edges[e].alpha = 0.5;\r\n                animationFrame.vertices[v].color = color;\r\n                currentVertices = animationFrame.vertices;\r\n                currentEdges = animationFrame.edges;\r\n                animations.push(animationFrame);\r\n            }\r\n        }\r\n        return animations\r\n    }\r\n\r\n    createAnimationFrame(vertices, edges){\r\n        const newVertices = [];\r\n        vertices.forEach((v) => newVertices.push(v.copyVertex()))\r\n        const newEdges = [];\r\n        edges.forEach((e) => newEdges.push(e.copyEdge()))\r\n        return {vertices: newVertices, edges: newEdges};\r\n    }\r\n}\r\n\r\n/**\r\n * distance between two points (Vertex or Force)\r\n * @param v1 the first point\r\n * @param v2 the secont point\r\n * @param is3D is the network three dimensional?\r\n */\r\nfunction distance(v1, v2, is3D){\r\n    var dist;\r\n    if (is3D) {dist = Math.sqrt(\r\n        Math.pow((v1.x - v2.x), 2)\r\n        + Math.pow((v1.y - v2.y), 2)\r\n        + Math.pow((v1.z-v2.z),2))\r\n    } else{\r\n        dist = Math.sqrt(\r\n            Math.pow((v1.x - v2.x), 2)\r\n            + Math.pow((v1.y - v2.y), 2))\r\n    }\r\n    return dist === 0? 0.00000000000000000001: dist;\r\n\r\n}\r\n\r\nexport default Kruskal;","import AbstractMinimumSpanningTreeAlgorithm from \"./AbstractMinimumSpanningTreeAlgorithm\";\r\nimport AlgorithmSettingObject from \"../AlgorithmSetting\";\r\n\r\nclass Prim extends AbstractMinimumSpanningTreeAlgorithm{\r\n    constructor(){\r\n        super(\"Prim MST\");\r\n\r\n        this.color = AlgorithmSettingObject.newColorSetting(\"Color\", \"#ff0000\")\r\n        this.settings.push([this.color]);\r\n    }\r\n\r\n    /**\r\n     * gets the settings of the Prim minimum spanning tree algorithm\r\n     * @returns {AlgorithmSettings}\r\n     */\r\n    getSettings(){\r\n        return this.settings\r\n    }\r\n\r\n    /**\r\n     * Gets the animations for Prims's minimum spanning tree algorithm\r\n     * @param vertices\r\n     * @param edges\r\n     * @param is3D\r\n     * @returns {[]}\r\n     */\r\n    async getAnimations(vertices, edges, is3D){\r\n        //setup initial animation variables\r\n        const color = this.color.obj.value;\r\n\r\n        const adj = this.createAdjacencyMatrix(vertices, edges)\r\n        // assign edge index to adjacency values\r\n        for(let e =0; e < edges.length; e++){\r\n            adj[edges[e].start][edges[e].end] = e;\r\n            adj[edges[e].end][edges[e].start] = e;\r\n        }\r\n        const animations = [];\r\n        const firstFrame = this.createAnimationFrame(vertices, edges);\r\n        animations.push(firstFrame);\r\n        let currentVertices = firstFrame.vertices;\r\n        let currentEdges = firstFrame.edges;\r\n\r\n        var vertexQueue = [];\r\n        vertices.forEach((v, index) => vertexQueue.push({key: Infinity, parent: null, vertex: index}));\r\n\r\n        const explored = [];\r\n        while(vertexQueue.length !== 0){\r\n            let u;\r\n            [u, vertexQueue] = pop(vertexQueue);\r\n            if(!(u.vertex in explored)){\r\n                const animationFrame = this.createAnimationFrame(currentVertices, currentEdges);\r\n                animationFrame.vertices[u.vertex].color = color;\r\n                animations.push(animationFrame)\r\n                currentVertices = animationFrame.vertices;\r\n                currentEdges = animationFrame.edges;\r\n                if(u.parent !== null){\r\n                    const animationFrame2 = this.createAnimationFrame(currentVertices, currentEdges);\r\n                    animationFrame2.edges[adj[u.vertex][u.parent]].color = color\r\n                    if(!is3D) animationFrame2.edges[adj[u.vertex][u.parent]].alpha = 0.4;\r\n                    animations.push(animationFrame2)\r\n                    currentVertices = animationFrame2.vertices;\r\n                    currentEdges = animationFrame2.edges;\r\n                }\r\n            }\r\n\r\n            for(let i = 0; i < adj[u.vertex].length; i ++){\r\n                if(adj[u.vertex][i] !== 0){\r\n                    for(let k = 0; k < vertexQueue.length; k++){\r\n                        if(vertexQueue[k].vertex === i &&\r\n                            distance(vertices[u.vertex], vertices[vertexQueue[k].vertex], is3D) < vertexQueue[k].key){\r\n                            vertexQueue[k].key = distance(vertices[u.vertex], vertices[vertexQueue[k].vertex], is3D);\r\n                            vertexQueue[k].parent = u.vertex;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(vertexQueue.length !== 2) vertexQueue.sort(function(v1, v2) {return v1.key - v2.key});\r\n        }\r\n\r\n        return animations;\r\n\r\n    }\r\n\r\n    createAnimationFrame(vertices, edges){\r\n        const newVertices = [];\r\n        vertices.forEach((v) => newVertices.push(v.copyVertex()))\r\n        const newEdges = [];\r\n        edges.forEach((e) => newEdges.push(e.copyEdge()))\r\n        return {vertices: newVertices, edges: newEdges};\r\n    }\r\n}\r\n\r\n/**\r\n * Pop the value at index 0 of an array then update its contents appropriately\r\n * @param array\r\n * @returns {(*|*[])[]} the popped element, modified array\r\n */\r\nfunction pop(array){\r\n    const poppedValue = array[0];\r\n    if(array.length > 1)array = array.slice(1);\r\n    else if(array.length === 1) array = [];\r\n    return [poppedValue,array]\r\n}\r\n\r\n/**\r\n * distance between two points (Vertex or Force)\r\n * @param v1 the first point\r\n * @param v2 the secont point\r\n * @param is3D is the vertex data three dimensional?\r\n */\r\nfunction distance(v1, v2, is3D){\r\n    var dist;\r\n    if (is3D) {dist = Math.sqrt(\r\n        Math.pow((v1.x - v2.x), 2)\r\n        + Math.pow((v1.y - v2.y), 2)\r\n        + Math.pow((v1.z-v2.z),2))\r\n    } else{\r\n        dist = Math.sqrt(\r\n            Math.pow((v1.x - v2.x), 2)\r\n            + Math.pow((v1.y - v2.y), 2))\r\n    }\r\n    return dist === 0? 0.00000000000000000001: dist;\r\n\r\n}\r\n\r\nexport default Prim;","import * as ALGORITHMS from \"./Algorithms\"\r\nimport AlgorithmList from \"../Components/Settings/AlgorithmList\";\r\nimport AlgorithmSettings from \"../Components/Settings/AlgorithmSettings\";\r\nimport React from \"react\";\r\n\r\nclass Animator{\r\n    constructor(){\r\n\r\n        this.algorithms = [];\r\n        for(const key in ALGORITHMS){\r\n            for (const algo in ALGORITHMS[key]){\r\n                this.algorithms.push(new ALGORITHMS[key][algo]())\r\n\r\n            }\r\n        }\r\n        if(this.algorithms.length === 0) throw new Error(\"No algorithms were imported by the Animator object\")\r\n        console.log(\"LOADED ALGORITHMS\", this.algorithms)\r\n        this.activeAlgorithm = this.algorithms[0]\r\n    }\r\n\r\n\r\n    algorithmsToHTML(){\r\n        return <AlgorithmList algorithms = {this.algorithms} animator = {this}/>\r\n    }\r\n\r\n    algorithmSettingsToHTML(ref){\r\n        return <AlgorithmSettings ref = {ref} algorithms = {this.algorithms} />\r\n    }\r\n\r\n    async getAnimations(vertices, edges, is3D){\r\n        const a = await this.activeAlgorithm.getAnimations(vertices, edges, is3D)\r\n        return a\r\n    }\r\n\r\n    /**\r\n     * Performs the specified amount of animation steps\r\n     * @param animations\r\n     * @param network\r\n     * @param currentStep\r\n     * @param steps\r\n     */\r\n    nextAnimationSteps(network, animations, currentStep, steps) {\r\n        if(this.animations === []) {\r\n            console.warn(\"No animations were loaded\")\r\n            return;\r\n        }\r\n        network.shouldUpdate = true\r\n        return this.activeAlgorithm.nextAnimationSteps(network, animations,currentStep, steps)\r\n    }\r\n\r\n}\r\nexport default Animator","//DEFAULT IMPORTS\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\n//CUSTOM COMPONENT IMPORTS\r\n\r\nimport {NavBar} from \"./Components/NavBar\"\r\nimport {Visualizer, Network} from \"./Components/Network\";\r\nimport NetworkSettings from \"./Components/Network/NetworkSettings\";\r\nimport Animator from \"./Animations/Animator\";\r\nimport PolarColorGradient from \"./datatypes/ColorGradient/PolarColorGradient\";\r\n\r\n//REACT ROUTER IMPORTS\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\n\r\n// IONIC IMPORTS\r\nimport {\r\n  IonApp, IonGrid, IonRow, IonCol, IonContent, IonItem, IonIcon, IonInput, IonButton, IonProgressBar\r\n} from \"@ionic/react\"\r\nimport '@ionic/react/css/core.css';\r\n/* Basic CSS for apps built with Ionic */\r\nimport '@ionic/react/css/normalize.css';\r\nimport '@ionic/react/css/structure.css';\r\nimport '@ionic/react/css/typography.css';\r\n\r\n/* Optional CSS utils that can be commented out */\r\nimport '@ionic/react/css/padding.css';\r\nimport '@ionic/react/css/float-elements.css';\r\nimport '@ionic/react/css/text-alignment.css';\r\nimport '@ionic/react/css/text-transformation.css';\r\nimport '@ionic/react/css/flex-utils.css';\r\nimport '@ionic/react/css/display.css';\r\nimport {\r\n  playBackCircleOutline,\r\n  playCircleOutline, playForwardCircleOutline,\r\n  playSkipBackCircleOutline, playSkipForwardCircleOutline,\r\n  searchCircleOutline, pauseCircleSharp,\r\n    closeCircleOutline,\r\n} from 'ionicons/icons';\r\nimport {Redirect} from \"react-router\";\r\n\r\n\r\nconst ANIMATOR = new Animator()\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      height: 0,\r\n      width: 0,\r\n      settingsObject : [],\r\n      settingsHTML: null,\r\n      networkSettingHTML : null,\r\n      algorithmSelectHTML: null,\r\n      activeAlgorithm : { },\r\n      animations: [],\r\n      animationsInBuffer: false,\r\n      currentStep : 0,\r\n      running : false,\r\n      filter: \"\",\r\n      invalidAlgorithm: false,\r\n      invalidAlgorithmInfo: {},\r\n      fps: 60,\r\n      custom: false,\r\n    }\r\n    this.networkSettings = new NetworkSettings()\r\n    this.networkData = new Network(this.networkSettings, false)\r\n    this.maxTimeout = 0;\r\n    this.networkSettingsRef = React.createRef()\r\n    this.algorithmSettingsRef = React.createRef()\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    const networkSettingsHTML = this.networkSettings.toHTML(this.networkSettingsRef)\r\n    const algorithmSettingsHTML = ANIMATOR.algorithmSettingsToHTML(this.algorithmSettingsRef)\r\n    const algorithmSelectHTML = ANIMATOR.algorithmsToHTML()\r\n    const w = window.innerWidth;\r\n    const h = window.innerHeight;\r\n    window.addEventListener(\"resize\", () => {this.resize()})\r\n    this.setState({\r\n      height: h,\r\n      width: w,\r\n      settingsHTML: <div> Loading ...</div>,\r\n      settingsObject: null,\r\n      networkSettingsHTML : networkSettingsHTML,\r\n      algorithmSettingsHTML: algorithmSettingsHTML,\r\n      algorithmSelectHTML: algorithmSelectHTML,\r\n      activeAlgorithm: ANIMATOR.activeAlgorithm,\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    while(this.maxTimeout >= 0){\r\n      clearTimeout(this.maxTimeout);\r\n      this.maxTimeout --;\r\n    }\r\n  }\r\n\r\n  animate(){\r\n    if(this.state.running){\r\n      this.maxTimeout = setTimeout(() => {\r\n        if(this.state.currentStep === this.state.animations.length -1){\r\n          this.setState({running:false})\r\n        }\r\n\r\n        const stepsPerformed = ANIMATOR.nextAnimationSteps(\r\n            this.networkData,\r\n            this.state.animations,\r\n            this.state.currentStep,\r\n            1)\r\n        this.setState({currentStep: this.state.currentStep + stepsPerformed})\r\n        window.requestAnimationFrame(() => this.animate())\r\n      }, parseInt(1000/ this.state.fps));\r\n    }\r\n  }\r\n\r\n  resize(){\r\n    const w = window.innerWidth\r\n    const h = window.innerHeight\r\n    this.setState({height: h, width: w})\r\n  }\r\n\r\n  async getAnimation(){\r\n    //check if network is of valid type\r\n    if( ANIMATOR.activeAlgorithm.requiredProperty !== null &&\r\n        !this.networkData.settings.properties[ANIMATOR.activeAlgorithm.requiredProperty]){\r\n      this.setState({\r\n        invalidAlgorithm: true,\r\n        invalidAlgorithmInfo: {\r\n          name: ANIMATOR.activeAlgorithm.name,\r\n          requiredProperty: ANIMATOR.activeAlgorithm.requiredProperty\r\n        },\r\n      })\r\n    }else{\r\n      //animationsInBuffer tells to load the animation player, and loading dictates whether or not\r\n      // the animation is done fetching\r\n      await this.setState({\r\n        invalidAlgorithm: false,\r\n        invalidAlgorithmInfo: {},\r\n        animationsInBuffer: true,\r\n        loading: true,\r\n        currentStep: 0,\r\n        activeAlgorithm: ANIMATOR.activeAlgorithm, })\r\n      await this.forceUpdate()\r\n      setTimeout(() => ANIMATOR.getAnimations(\r\n          this.networkData.vertices,\r\n          this.networkData.edges,\r\n          this.networkData.isThreeDimensional).then((animations) => {\r\n            this.setState({animations: animations, loading: false})\r\n          }), 10)\r\n\r\n    }\r\n  }\r\n\r\n\r\n  performAnimationStep(num){\r\n    if(num === 1 || num === -1) this.setState({running:false})\r\n    const numPerformed = ANIMATOR.nextAnimationSteps(\r\n        this.networkData,\r\n        this.state.animations,\r\n        this.state.currentStep,\r\n        parseInt(num))\r\n    this.setState({currentStep: this.state.currentStep + numPerformed})\r\n  }\r\n\r\n  setSpecificAnimationFrame(animationIndex){\r\n    if(this.state.animations.length === 0 || !this.state.animationsInBuffer) return\r\n    //using current step = 0; means we can apply any animation index and have the returned steps be the new current step number\r\n    const newCurrentStep = ANIMATOR.nextAnimationSteps(\r\n        this.networkData,\r\n        this.state.animations,\r\n        0,\r\n        parseInt(animationIndex)\r\n    )\r\n    this.setState({currentStep: newCurrentStep, running:false});\r\n  }\r\n\r\n  async toggleAnimationsRunning(){\r\n    await this.setState({running: !this.state.running})\r\n    this.animate()\r\n  }\r\n\r\n  resetAnimationLogic(){\r\n    this.setState({\r\n      animations : [],\r\n      currentStep: 0,\r\n      animationsInBuffer: false,\r\n      running: false,\r\n      activeAlgorithm: {}})\r\n  }\r\n\r\n  setFilter(v){\r\n    this.networkSettingsRef.current.setState({filter: v})\r\n    this.algorithmSettingsRef.current.setState({filter:v})\r\n    this.setState({filter: v})\r\n  }\r\n\r\n  setFPS(v){\r\n    this.setState({fps: parseInt(v)})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Router>\r\n          <Route path = \"/\">\r\n            <Redirect to =\"/Network-Analysis-Visualization/2d\"/>\r\n          </Route>\r\n\r\n\r\n        <IonApp>\r\n\r\n          <IonContent>\r\n            <IonGrid width = \"100%\">\r\n              <NavBar parent = {this} />\r\n\r\n              <IonRow size = \"11\" style = {{overflow: \"auto\"}} id = \"appcontent\">\r\n\r\n                <Visualizer parent = {this} />\r\n\r\n                <IonCol size = \"3\"  id = \"settings\">\r\n\r\n                  <IonContent style = {{boxShadow: \"5px 10px 35px grey\"}}>\r\n                    {/*SETTINGS/ ANIMATION PlAYER CONDITIONAL*/}\r\n                    {this.state.animationsInBuffer === false? <div>\r\n                      <IonItem>\r\n                        <IonIcon icon = {searchCircleOutline}/>\r\n                        <IonInput\r\n                            onIonChange = {(e) => this.setFilter(e.target.value)}\r\n                            placeholder = \"filter\"\r\n                            style = {{textAlign: \"center\"}} >\r\n                        </IonInput>\r\n                      </IonItem>\r\n                      <div style = {{outline: \"1px solid black\"}}>\r\n                        <div style =\r\n                                 {{minHeight:  Math.max(this.state.height*(5.8/10), 300),\r\n                                   maxHeight: Math.max(this.state.height*(5.8/10), 300),\r\n                                   overflowY: \"scroll\"}}>\r\n                          {this.state.networkSettingsHTML}\r\n                          {this.state.algorithmSettingsHTML}\r\n                        </div>\r\n                      </div>\r\n                      <hr/>\r\n                      <IonItem lines = \"full\">\r\n                        {this.state.algorithmSelectHTML}\r\n\r\n                      </IonItem>\r\n                      <IonItem lines = \"full\">\r\n                        <IonButton\r\n                            disabled = {this.state.custom}\r\n                            style = {{margin:\"auto\"}} onClick = {() => this.getAnimation()}> Animate </IonButton>\r\n                      </IonItem>\r\n                      <div\r\n                          hidden = {!this.state.invalidAlgorithm}\r\n                          style = {{color:\"red\", textAlign:\"center\"}}>\r\n                        Algorithm '{this.state.invalidAlgorithmInfo.name}' requires Network property/type\r\n                        '{this.state.invalidAlgorithmInfo.requiredProperty}'\r\n                      </div>\r\n                    </div>:\r\n                    // ANIMATION PLAYER\r\n                    <div className = \"animationPlayer\">\r\n                      <IonIcon hidden = {this.state.loading}\r\n                               onClick = {() => this.resetAnimationLogic()}\r\n                               style = {{position: \"absolute\", top: 0, right: 0,cursor: \"pointer\"}}\r\n                               size = \"large\"\r\n                               icon = {closeCircleOutline}/>\r\n\r\n                      <br className = \"noSelectText\"/>\r\n                      <p className = \"noSelectText\" style = {{textAlign: \"center\"}}><b>{this.state.activeAlgorithm.name}</b></p>\r\n                      <IonProgressBar hidden = {!this.state.loading}type = \"indeterminate\"/>\r\n\r\n                      <br className = \"noSelectText\"/>\r\n                      <div className = \"animationControls\" hidden = {this.state.loading}>\r\n\r\n                      <div style = {{display: \"flex\", justifyContent:\"center\",\r\n                        alignItems:\"center\", alignContent:\"center\"}}>\r\n                        <IonButton expand = \"block\" fill = \"clear\" color = \"medium\"\r\n                                   onClick = {() => this.performAnimationStep(-this.state.animations.length)}>\r\n                          <IonIcon\r\n                              size = \"large\"\r\n                              icon = {playBackCircleOutline}\r\n                              />\r\n                        </IonButton>\r\n                        <IonButton expand = \"block\" fill = \"clear\" color = \"medium\"\r\n                                   onClick = {() => this.performAnimationStep(-1)}>\r\n                          <IonIcon\r\n                              size = \"large\"\r\n                              icon = {playSkipBackCircleOutline}\r\n                              />\r\n                        </IonButton>\r\n                        <IonButton expand = \"block\" fill = \"clear\" color = \"medium\"\r\n                                   onClick = {() => this.toggleAnimationsRunning()}>\r\n                          <IonIcon\r\n                              size = \"large\"\r\n                              icon = {this.state.running === false?playCircleOutline: pauseCircleSharp}\r\n                              />\r\n                        </IonButton>\r\n                        <IonButton expand = \"block\" fill = \"clear\" color = \"medium\"\r\n                                   onClick = {() => this.performAnimationStep(1)}>\r\n                          <IonIcon\r\n                              size = \"large\"\r\n                              icon = {playSkipForwardCircleOutline}\r\n                              />\r\n                        </IonButton>\r\n                        <IonButton expand = \"block\" fill = \"clear\" color = \"medium\"\r\n                                   onClick = {() => this.performAnimationStep(this.state.animations.length)}>\r\n                          <IonIcon\r\n                              size = \"large\"\r\n                              icon = {playForwardCircleOutline}\r\n                              />\r\n                        </IonButton>\r\n                      </div>\r\n\r\n\r\n                      <IonItem lines = \"none\" color = \"light\">\r\n                      <input type = \"range\"\r\n                          style = {{color: \"rgb(63,111,255)\", cursor: \"grab\", width: \"100%\"}}\r\n                          min = \"0\"\r\n                          max = {this.state.animations.length-1}\r\n                          value = {this.state.currentStep}\r\n                          onChange = {(e) => this.setSpecificAnimationFrame(e.target.value)}\r\n                      />\r\n                      </IonItem>\r\n                          <div style = {{display: \"flex\", flexDirection: \"row\", alignContent: \"center\"}}>\r\n                          <p style = {{textAlign: \"center\", marginLeft: \"5%\"}}> FPS Cap: {this.state.fps}</p>\r\n                          <input type = \"range\"\r\n                                 style = {{marginLeft: \"5%\", marginRight: \"5%\", color: \"rgb(63,111,255)\", cursor: \"grab\", width: \"100%\"}}\r\n                                 min = \"10\"\r\n                                 max = \"60\"\r\n                                 step = \"1\"\r\n                                 value = {this.state.fps}\r\n                                 onChange = {(e) => this.setFPS(e.target.value)}/>\r\n                        </div>\r\n\r\n                      </div>\r\n\r\n                    </div>}\r\n\r\n                  </IonContent>\r\n\r\n                </IonCol>\r\n              </IonRow>\r\n\r\n            </IonGrid>\r\n          </IonContent>\r\n\r\n        </IonApp>\r\n        </Router>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\r\n    <App />,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}